// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package crowdstrike

import (
	"context"
	"reflect"

	"errors"
	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows management of the default sensor update policy in the CrowdStrike Falcon platform. Destruction of this resource *will not* delete the default sensor update policy or remove any configured settings.
//
// ## API Scopes
//
// The following API scopes are required:
//
// - Sensor update policies | Read & Write
//
// ## Import
//
// A default sensor update policy can be imported by specifying the policy id.
//
// ```sh
// $ pulumi import crowdstrike:index/defaultSensorUpdatePolicy:DefaultSensorUpdatePolicy default 7fb858a949034a0cbca175f660f1e769
// ```
type DefaultSensorUpdatePolicy struct {
	pulumi.CustomResourceState

	// Sensor build to use for the default sensor update policy.
	Build pulumi.StringOutput `pulumi:"build"`
	// Sensor arm64 build to use for the default sensor update policy (Linux only). Required if platformName is Linux.
	BuildArm64  pulumi.StringPtrOutput `pulumi:"buildArm64"`
	LastUpdated pulumi.StringOutput    `pulumi:"lastUpdated"`
	// Chooses which default sensor update policy to manage. (Windows, Mac, Linux)
	PlatformName pulumi.StringOutput `pulumi:"platformName"`
	// Prohibit sensor updates during a set of time blocks.
	Schedule DefaultSensorUpdatePolicyScheduleOutput `pulumi:"schedule"`
	// Enable uninstall protection. Windows and Mac only.
	UninstallProtection pulumi.BoolOutput `pulumi:"uninstallProtection"`
}

// NewDefaultSensorUpdatePolicy registers a new resource with the given unique name, arguments, and options.
func NewDefaultSensorUpdatePolicy(ctx *pulumi.Context,
	name string, args *DefaultSensorUpdatePolicyArgs, opts ...pulumi.ResourceOption) (*DefaultSensorUpdatePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Build == nil {
		return nil, errors.New("invalid value for required argument 'Build'")
	}
	if args.PlatformName == nil {
		return nil, errors.New("invalid value for required argument 'PlatformName'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DefaultSensorUpdatePolicy
	err := ctx.RegisterResource("crowdstrike:index/defaultSensorUpdatePolicy:DefaultSensorUpdatePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultSensorUpdatePolicy gets an existing DefaultSensorUpdatePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultSensorUpdatePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefaultSensorUpdatePolicyState, opts ...pulumi.ResourceOption) (*DefaultSensorUpdatePolicy, error) {
	var resource DefaultSensorUpdatePolicy
	err := ctx.ReadResource("crowdstrike:index/defaultSensorUpdatePolicy:DefaultSensorUpdatePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefaultSensorUpdatePolicy resources.
type defaultSensorUpdatePolicyState struct {
	// Sensor build to use for the default sensor update policy.
	Build *string `pulumi:"build"`
	// Sensor arm64 build to use for the default sensor update policy (Linux only). Required if platformName is Linux.
	BuildArm64  *string `pulumi:"buildArm64"`
	LastUpdated *string `pulumi:"lastUpdated"`
	// Chooses which default sensor update policy to manage. (Windows, Mac, Linux)
	PlatformName *string `pulumi:"platformName"`
	// Prohibit sensor updates during a set of time blocks.
	Schedule *DefaultSensorUpdatePolicySchedule `pulumi:"schedule"`
	// Enable uninstall protection. Windows and Mac only.
	UninstallProtection *bool `pulumi:"uninstallProtection"`
}

type DefaultSensorUpdatePolicyState struct {
	// Sensor build to use for the default sensor update policy.
	Build pulumi.StringPtrInput
	// Sensor arm64 build to use for the default sensor update policy (Linux only). Required if platformName is Linux.
	BuildArm64  pulumi.StringPtrInput
	LastUpdated pulumi.StringPtrInput
	// Chooses which default sensor update policy to manage. (Windows, Mac, Linux)
	PlatformName pulumi.StringPtrInput
	// Prohibit sensor updates during a set of time blocks.
	Schedule DefaultSensorUpdatePolicySchedulePtrInput
	// Enable uninstall protection. Windows and Mac only.
	UninstallProtection pulumi.BoolPtrInput
}

func (DefaultSensorUpdatePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultSensorUpdatePolicyState)(nil)).Elem()
}

type defaultSensorUpdatePolicyArgs struct {
	// Sensor build to use for the default sensor update policy.
	Build string `pulumi:"build"`
	// Sensor arm64 build to use for the default sensor update policy (Linux only). Required if platformName is Linux.
	BuildArm64 *string `pulumi:"buildArm64"`
	// Chooses which default sensor update policy to manage. (Windows, Mac, Linux)
	PlatformName string `pulumi:"platformName"`
	// Prohibit sensor updates during a set of time blocks.
	Schedule DefaultSensorUpdatePolicySchedule `pulumi:"schedule"`
	// Enable uninstall protection. Windows and Mac only.
	UninstallProtection *bool `pulumi:"uninstallProtection"`
}

// The set of arguments for constructing a DefaultSensorUpdatePolicy resource.
type DefaultSensorUpdatePolicyArgs struct {
	// Sensor build to use for the default sensor update policy.
	Build pulumi.StringInput
	// Sensor arm64 build to use for the default sensor update policy (Linux only). Required if platformName is Linux.
	BuildArm64 pulumi.StringPtrInput
	// Chooses which default sensor update policy to manage. (Windows, Mac, Linux)
	PlatformName pulumi.StringInput
	// Prohibit sensor updates during a set of time blocks.
	Schedule DefaultSensorUpdatePolicyScheduleInput
	// Enable uninstall protection. Windows and Mac only.
	UninstallProtection pulumi.BoolPtrInput
}

func (DefaultSensorUpdatePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultSensorUpdatePolicyArgs)(nil)).Elem()
}

type DefaultSensorUpdatePolicyInput interface {
	pulumi.Input

	ToDefaultSensorUpdatePolicyOutput() DefaultSensorUpdatePolicyOutput
	ToDefaultSensorUpdatePolicyOutputWithContext(ctx context.Context) DefaultSensorUpdatePolicyOutput
}

func (*DefaultSensorUpdatePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultSensorUpdatePolicy)(nil)).Elem()
}

func (i *DefaultSensorUpdatePolicy) ToDefaultSensorUpdatePolicyOutput() DefaultSensorUpdatePolicyOutput {
	return i.ToDefaultSensorUpdatePolicyOutputWithContext(context.Background())
}

func (i *DefaultSensorUpdatePolicy) ToDefaultSensorUpdatePolicyOutputWithContext(ctx context.Context) DefaultSensorUpdatePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSensorUpdatePolicyOutput)
}

// DefaultSensorUpdatePolicyArrayInput is an input type that accepts DefaultSensorUpdatePolicyArray and DefaultSensorUpdatePolicyArrayOutput values.
// You can construct a concrete instance of `DefaultSensorUpdatePolicyArrayInput` via:
//
//	DefaultSensorUpdatePolicyArray{ DefaultSensorUpdatePolicyArgs{...} }
type DefaultSensorUpdatePolicyArrayInput interface {
	pulumi.Input

	ToDefaultSensorUpdatePolicyArrayOutput() DefaultSensorUpdatePolicyArrayOutput
	ToDefaultSensorUpdatePolicyArrayOutputWithContext(context.Context) DefaultSensorUpdatePolicyArrayOutput
}

type DefaultSensorUpdatePolicyArray []DefaultSensorUpdatePolicyInput

func (DefaultSensorUpdatePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultSensorUpdatePolicy)(nil)).Elem()
}

func (i DefaultSensorUpdatePolicyArray) ToDefaultSensorUpdatePolicyArrayOutput() DefaultSensorUpdatePolicyArrayOutput {
	return i.ToDefaultSensorUpdatePolicyArrayOutputWithContext(context.Background())
}

func (i DefaultSensorUpdatePolicyArray) ToDefaultSensorUpdatePolicyArrayOutputWithContext(ctx context.Context) DefaultSensorUpdatePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSensorUpdatePolicyArrayOutput)
}

// DefaultSensorUpdatePolicyMapInput is an input type that accepts DefaultSensorUpdatePolicyMap and DefaultSensorUpdatePolicyMapOutput values.
// You can construct a concrete instance of `DefaultSensorUpdatePolicyMapInput` via:
//
//	DefaultSensorUpdatePolicyMap{ "key": DefaultSensorUpdatePolicyArgs{...} }
type DefaultSensorUpdatePolicyMapInput interface {
	pulumi.Input

	ToDefaultSensorUpdatePolicyMapOutput() DefaultSensorUpdatePolicyMapOutput
	ToDefaultSensorUpdatePolicyMapOutputWithContext(context.Context) DefaultSensorUpdatePolicyMapOutput
}

type DefaultSensorUpdatePolicyMap map[string]DefaultSensorUpdatePolicyInput

func (DefaultSensorUpdatePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultSensorUpdatePolicy)(nil)).Elem()
}

func (i DefaultSensorUpdatePolicyMap) ToDefaultSensorUpdatePolicyMapOutput() DefaultSensorUpdatePolicyMapOutput {
	return i.ToDefaultSensorUpdatePolicyMapOutputWithContext(context.Background())
}

func (i DefaultSensorUpdatePolicyMap) ToDefaultSensorUpdatePolicyMapOutputWithContext(ctx context.Context) DefaultSensorUpdatePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSensorUpdatePolicyMapOutput)
}

type DefaultSensorUpdatePolicyOutput struct{ *pulumi.OutputState }

func (DefaultSensorUpdatePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultSensorUpdatePolicy)(nil)).Elem()
}

func (o DefaultSensorUpdatePolicyOutput) ToDefaultSensorUpdatePolicyOutput() DefaultSensorUpdatePolicyOutput {
	return o
}

func (o DefaultSensorUpdatePolicyOutput) ToDefaultSensorUpdatePolicyOutputWithContext(ctx context.Context) DefaultSensorUpdatePolicyOutput {
	return o
}

// Sensor build to use for the default sensor update policy.
func (o DefaultSensorUpdatePolicyOutput) Build() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultSensorUpdatePolicy) pulumi.StringOutput { return v.Build }).(pulumi.StringOutput)
}

// Sensor arm64 build to use for the default sensor update policy (Linux only). Required if platformName is Linux.
func (o DefaultSensorUpdatePolicyOutput) BuildArm64() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultSensorUpdatePolicy) pulumi.StringPtrOutput { return v.BuildArm64 }).(pulumi.StringPtrOutput)
}

func (o DefaultSensorUpdatePolicyOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultSensorUpdatePolicy) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// Chooses which default sensor update policy to manage. (Windows, Mac, Linux)
func (o DefaultSensorUpdatePolicyOutput) PlatformName() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultSensorUpdatePolicy) pulumi.StringOutput { return v.PlatformName }).(pulumi.StringOutput)
}

// Prohibit sensor updates during a set of time blocks.
func (o DefaultSensorUpdatePolicyOutput) Schedule() DefaultSensorUpdatePolicyScheduleOutput {
	return o.ApplyT(func(v *DefaultSensorUpdatePolicy) DefaultSensorUpdatePolicyScheduleOutput { return v.Schedule }).(DefaultSensorUpdatePolicyScheduleOutput)
}

// Enable uninstall protection. Windows and Mac only.
func (o DefaultSensorUpdatePolicyOutput) UninstallProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultSensorUpdatePolicy) pulumi.BoolOutput { return v.UninstallProtection }).(pulumi.BoolOutput)
}

type DefaultSensorUpdatePolicyArrayOutput struct{ *pulumi.OutputState }

func (DefaultSensorUpdatePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultSensorUpdatePolicy)(nil)).Elem()
}

func (o DefaultSensorUpdatePolicyArrayOutput) ToDefaultSensorUpdatePolicyArrayOutput() DefaultSensorUpdatePolicyArrayOutput {
	return o
}

func (o DefaultSensorUpdatePolicyArrayOutput) ToDefaultSensorUpdatePolicyArrayOutputWithContext(ctx context.Context) DefaultSensorUpdatePolicyArrayOutput {
	return o
}

func (o DefaultSensorUpdatePolicyArrayOutput) Index(i pulumi.IntInput) DefaultSensorUpdatePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DefaultSensorUpdatePolicy {
		return vs[0].([]*DefaultSensorUpdatePolicy)[vs[1].(int)]
	}).(DefaultSensorUpdatePolicyOutput)
}

type DefaultSensorUpdatePolicyMapOutput struct{ *pulumi.OutputState }

func (DefaultSensorUpdatePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultSensorUpdatePolicy)(nil)).Elem()
}

func (o DefaultSensorUpdatePolicyMapOutput) ToDefaultSensorUpdatePolicyMapOutput() DefaultSensorUpdatePolicyMapOutput {
	return o
}

func (o DefaultSensorUpdatePolicyMapOutput) ToDefaultSensorUpdatePolicyMapOutputWithContext(ctx context.Context) DefaultSensorUpdatePolicyMapOutput {
	return o
}

func (o DefaultSensorUpdatePolicyMapOutput) MapIndex(k pulumi.StringInput) DefaultSensorUpdatePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DefaultSensorUpdatePolicy {
		return vs[0].(map[string]*DefaultSensorUpdatePolicy)[vs[1].(string)]
	}).(DefaultSensorUpdatePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultSensorUpdatePolicyInput)(nil)).Elem(), &DefaultSensorUpdatePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultSensorUpdatePolicyArrayInput)(nil)).Elem(), DefaultSensorUpdatePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultSensorUpdatePolicyMapInput)(nil)).Elem(), DefaultSensorUpdatePolicyMap{})
	pulumi.RegisterOutputType(DefaultSensorUpdatePolicyOutput{})
	pulumi.RegisterOutputType(DefaultSensorUpdatePolicyArrayOutput{})
	pulumi.RegisterOutputType(DefaultSensorUpdatePolicyMapOutput{})
}
