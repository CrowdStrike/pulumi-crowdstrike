// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package crowdstrike

import (
	"context"
	"reflect"

	"errors"
	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you set the precedence of Prevention Policies based on the order of IDs.
//
// ## API Scopes
//
// The following API scopes are required:
//
// - Prevention policies | Read & Write
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := crowdstrike.NewPreventionPolicyPrecedence(ctx, "example", &crowdstrike.PreventionPolicyPrecedenceArgs{
//				Ids: pulumi.StringArray{
//					pulumi.String("a1j09y3yq0wnrpb5o6jlij9e4f40k6lq"),
//					pulumi.String("2asia54xti93bg0jbr5hfpqqbhxbyeoa"),
//					pulumi.String("xuzq8hs1uyc2s7zdar3fli0shiyl22vc"),
//				},
//				PlatformName: pulumi.String("linux"),
//				Enforcement:  pulumi.String("dynamic"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("preventionPolicyPrecedence", example)
//			return nil
//		})
//	}
//
// ```
type PreventionPolicyPrecedence struct {
	pulumi.CustomResourceState

	// The enforcement type for this resource. `strict` requires all non-default prevention policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
	Enforcement pulumi.StringOutput `pulumi:"enforcement"`
	// The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
	Ids         pulumi.StringArrayOutput `pulumi:"ids"`
	LastUpdated pulumi.StringOutput      `pulumi:"lastUpdated"`
	// That platform of the prevention policies. (Windows, Mac, Linux)
	PlatformName pulumi.StringOutput `pulumi:"platformName"`
}

// NewPreventionPolicyPrecedence registers a new resource with the given unique name, arguments, and options.
func NewPreventionPolicyPrecedence(ctx *pulumi.Context,
	name string, args *PreventionPolicyPrecedenceArgs, opts ...pulumi.ResourceOption) (*PreventionPolicyPrecedence, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enforcement == nil {
		return nil, errors.New("invalid value for required argument 'Enforcement'")
	}
	if args.Ids == nil {
		return nil, errors.New("invalid value for required argument 'Ids'")
	}
	if args.PlatformName == nil {
		return nil, errors.New("invalid value for required argument 'PlatformName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PreventionPolicyPrecedence
	err := ctx.RegisterResource("crowdstrike:index/preventionPolicyPrecedence:PreventionPolicyPrecedence", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPreventionPolicyPrecedence gets an existing PreventionPolicyPrecedence resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreventionPolicyPrecedence(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PreventionPolicyPrecedenceState, opts ...pulumi.ResourceOption) (*PreventionPolicyPrecedence, error) {
	var resource PreventionPolicyPrecedence
	err := ctx.ReadResource("crowdstrike:index/preventionPolicyPrecedence:PreventionPolicyPrecedence", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PreventionPolicyPrecedence resources.
type preventionPolicyPrecedenceState struct {
	// The enforcement type for this resource. `strict` requires all non-default prevention policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
	Enforcement *string `pulumi:"enforcement"`
	// The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
	Ids         []string `pulumi:"ids"`
	LastUpdated *string  `pulumi:"lastUpdated"`
	// That platform of the prevention policies. (Windows, Mac, Linux)
	PlatformName *string `pulumi:"platformName"`
}

type PreventionPolicyPrecedenceState struct {
	// The enforcement type for this resource. `strict` requires all non-default prevention policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
	Enforcement pulumi.StringPtrInput
	// The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
	Ids         pulumi.StringArrayInput
	LastUpdated pulumi.StringPtrInput
	// That platform of the prevention policies. (Windows, Mac, Linux)
	PlatformName pulumi.StringPtrInput
}

func (PreventionPolicyPrecedenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*preventionPolicyPrecedenceState)(nil)).Elem()
}

type preventionPolicyPrecedenceArgs struct {
	// The enforcement type for this resource. `strict` requires all non-default prevention policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
	Enforcement string `pulumi:"enforcement"`
	// The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
	Ids []string `pulumi:"ids"`
	// That platform of the prevention policies. (Windows, Mac, Linux)
	PlatformName string `pulumi:"platformName"`
}

// The set of arguments for constructing a PreventionPolicyPrecedence resource.
type PreventionPolicyPrecedenceArgs struct {
	// The enforcement type for this resource. `strict` requires all non-default prevention policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
	Enforcement pulumi.StringInput
	// The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
	Ids pulumi.StringArrayInput
	// That platform of the prevention policies. (Windows, Mac, Linux)
	PlatformName pulumi.StringInput
}

func (PreventionPolicyPrecedenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*preventionPolicyPrecedenceArgs)(nil)).Elem()
}

type PreventionPolicyPrecedenceInput interface {
	pulumi.Input

	ToPreventionPolicyPrecedenceOutput() PreventionPolicyPrecedenceOutput
	ToPreventionPolicyPrecedenceOutputWithContext(ctx context.Context) PreventionPolicyPrecedenceOutput
}

func (*PreventionPolicyPrecedence) ElementType() reflect.Type {
	return reflect.TypeOf((**PreventionPolicyPrecedence)(nil)).Elem()
}

func (i *PreventionPolicyPrecedence) ToPreventionPolicyPrecedenceOutput() PreventionPolicyPrecedenceOutput {
	return i.ToPreventionPolicyPrecedenceOutputWithContext(context.Background())
}

func (i *PreventionPolicyPrecedence) ToPreventionPolicyPrecedenceOutputWithContext(ctx context.Context) PreventionPolicyPrecedenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionPolicyPrecedenceOutput)
}

// PreventionPolicyPrecedenceArrayInput is an input type that accepts PreventionPolicyPrecedenceArray and PreventionPolicyPrecedenceArrayOutput values.
// You can construct a concrete instance of `PreventionPolicyPrecedenceArrayInput` via:
//
//	PreventionPolicyPrecedenceArray{ PreventionPolicyPrecedenceArgs{...} }
type PreventionPolicyPrecedenceArrayInput interface {
	pulumi.Input

	ToPreventionPolicyPrecedenceArrayOutput() PreventionPolicyPrecedenceArrayOutput
	ToPreventionPolicyPrecedenceArrayOutputWithContext(context.Context) PreventionPolicyPrecedenceArrayOutput
}

type PreventionPolicyPrecedenceArray []PreventionPolicyPrecedenceInput

func (PreventionPolicyPrecedenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreventionPolicyPrecedence)(nil)).Elem()
}

func (i PreventionPolicyPrecedenceArray) ToPreventionPolicyPrecedenceArrayOutput() PreventionPolicyPrecedenceArrayOutput {
	return i.ToPreventionPolicyPrecedenceArrayOutputWithContext(context.Background())
}

func (i PreventionPolicyPrecedenceArray) ToPreventionPolicyPrecedenceArrayOutputWithContext(ctx context.Context) PreventionPolicyPrecedenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionPolicyPrecedenceArrayOutput)
}

// PreventionPolicyPrecedenceMapInput is an input type that accepts PreventionPolicyPrecedenceMap and PreventionPolicyPrecedenceMapOutput values.
// You can construct a concrete instance of `PreventionPolicyPrecedenceMapInput` via:
//
//	PreventionPolicyPrecedenceMap{ "key": PreventionPolicyPrecedenceArgs{...} }
type PreventionPolicyPrecedenceMapInput interface {
	pulumi.Input

	ToPreventionPolicyPrecedenceMapOutput() PreventionPolicyPrecedenceMapOutput
	ToPreventionPolicyPrecedenceMapOutputWithContext(context.Context) PreventionPolicyPrecedenceMapOutput
}

type PreventionPolicyPrecedenceMap map[string]PreventionPolicyPrecedenceInput

func (PreventionPolicyPrecedenceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreventionPolicyPrecedence)(nil)).Elem()
}

func (i PreventionPolicyPrecedenceMap) ToPreventionPolicyPrecedenceMapOutput() PreventionPolicyPrecedenceMapOutput {
	return i.ToPreventionPolicyPrecedenceMapOutputWithContext(context.Background())
}

func (i PreventionPolicyPrecedenceMap) ToPreventionPolicyPrecedenceMapOutputWithContext(ctx context.Context) PreventionPolicyPrecedenceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionPolicyPrecedenceMapOutput)
}

type PreventionPolicyPrecedenceOutput struct{ *pulumi.OutputState }

func (PreventionPolicyPrecedenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreventionPolicyPrecedence)(nil)).Elem()
}

func (o PreventionPolicyPrecedenceOutput) ToPreventionPolicyPrecedenceOutput() PreventionPolicyPrecedenceOutput {
	return o
}

func (o PreventionPolicyPrecedenceOutput) ToPreventionPolicyPrecedenceOutputWithContext(ctx context.Context) PreventionPolicyPrecedenceOutput {
	return o
}

// The enforcement type for this resource. `strict` requires all non-default prevention policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
func (o PreventionPolicyPrecedenceOutput) Enforcement() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionPolicyPrecedence) pulumi.StringOutput { return v.Enforcement }).(pulumi.StringOutput)
}

// The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
func (o PreventionPolicyPrecedenceOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PreventionPolicyPrecedence) pulumi.StringArrayOutput { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o PreventionPolicyPrecedenceOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionPolicyPrecedence) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// That platform of the prevention policies. (Windows, Mac, Linux)
func (o PreventionPolicyPrecedenceOutput) PlatformName() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionPolicyPrecedence) pulumi.StringOutput { return v.PlatformName }).(pulumi.StringOutput)
}

type PreventionPolicyPrecedenceArrayOutput struct{ *pulumi.OutputState }

func (PreventionPolicyPrecedenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreventionPolicyPrecedence)(nil)).Elem()
}

func (o PreventionPolicyPrecedenceArrayOutput) ToPreventionPolicyPrecedenceArrayOutput() PreventionPolicyPrecedenceArrayOutput {
	return o
}

func (o PreventionPolicyPrecedenceArrayOutput) ToPreventionPolicyPrecedenceArrayOutputWithContext(ctx context.Context) PreventionPolicyPrecedenceArrayOutput {
	return o
}

func (o PreventionPolicyPrecedenceArrayOutput) Index(i pulumi.IntInput) PreventionPolicyPrecedenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PreventionPolicyPrecedence {
		return vs[0].([]*PreventionPolicyPrecedence)[vs[1].(int)]
	}).(PreventionPolicyPrecedenceOutput)
}

type PreventionPolicyPrecedenceMapOutput struct{ *pulumi.OutputState }

func (PreventionPolicyPrecedenceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreventionPolicyPrecedence)(nil)).Elem()
}

func (o PreventionPolicyPrecedenceMapOutput) ToPreventionPolicyPrecedenceMapOutput() PreventionPolicyPrecedenceMapOutput {
	return o
}

func (o PreventionPolicyPrecedenceMapOutput) ToPreventionPolicyPrecedenceMapOutputWithContext(ctx context.Context) PreventionPolicyPrecedenceMapOutput {
	return o
}

func (o PreventionPolicyPrecedenceMapOutput) MapIndex(k pulumi.StringInput) PreventionPolicyPrecedenceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PreventionPolicyPrecedence {
		return vs[0].(map[string]*PreventionPolicyPrecedence)[vs[1].(string)]
	}).(PreventionPolicyPrecedenceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionPolicyPrecedenceInput)(nil)).Elem(), &PreventionPolicyPrecedence{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionPolicyPrecedenceArrayInput)(nil)).Elem(), PreventionPolicyPrecedenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionPolicyPrecedenceMapInput)(nil)).Elem(), PreventionPolicyPrecedenceMap{})
	pulumi.RegisterOutputType(PreventionPolicyPrecedenceOutput{})
	pulumi.RegisterOutputType(PreventionPolicyPrecedenceArrayOutput{})
	pulumi.RegisterOutputType(PreventionPolicyPrecedenceMapOutput{})
}
