// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package crowdstrike

import (
	"context"
	"reflect"

	"errors"
	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to manage CrowdStrike Falcon prevention policies for Mac hosts. Prevention policies allow you to manage what activity will trigger detections and preventions on your hosts.
//
// ## API Scopes
//
// The following API scopes are required:
//
// - Prevention policies | Read & Write
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := crowdstrike.NewPreventionPolicyMac(ctx, "example", &crowdstrike.PreventionPolicyMacArgs{
//				Enabled:     pulumi.Bool(false),
//				Description: pulumi.String("Made with Pulumi"),
//				HostGroups: pulumi.StringArray{
//					pulumi.String("d6e3c1e1b3d0467da0fowc96a5e6ecb5"),
//				},
//				IoaRuleGroups: pulumi.StringArray{},
//				CloudAdwareAndPup: &crowdstrike.PreventionPolicyMacCloudAdwareAndPupArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("CAUTIOUS"),
//				},
//				CloudAntiMalware: &crowdstrike.PreventionPolicyMacCloudAntiMalwareArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("CAUTIOUS"),
//				},
//				SensorAntiMalware: &crowdstrike.PreventionPolicyMacSensorAntiMalwareArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("CAUTIOUS"),
//				},
//				SensorAdwareAndPup: &crowdstrike.PreventionPolicyMacSensorAdwareAndPupArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("CAUTIOUS"),
//				},
//				NotifyEndUsers:                           pulumi.Bool(true),
//				CustomBlocking:                           pulumi.Bool(true),
//				DetectOnWrite:                            pulumi.Bool(true),
//				IntelligenceSourcedThreats:               pulumi.Bool(true),
//				PreventSuspiciousProcesses:               pulumi.Bool(true),
//				Quarantine:                               pulumi.Bool(true),
//				QuarantineOnWrite:                        pulumi.Bool(true),
//				ScriptBasedExecutionMonitoring:           pulumi.Bool(true),
//				SensorTamperingProtection:                pulumi.Bool(true),
//				UploadUnknownExecutables:                 pulumi.Bool(true),
//				UploadUnknownDetectionRelatedExecutables: pulumi.Bool(true),
//				XpcomShell:                               pulumi.Bool(true),
//				KcPasswordDecoded:                        pulumi.Bool(true),
//				HashCollector:                            pulumi.Bool(true),
//				EmpyreBackdoor:                           pulumi.Bool(true),
//				ChopperWebshell:                          pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("preventionPolicyMac", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// prevention policy can be imported by specifying the policy id.
//
// ```sh
// $ pulumi import crowdstrike:index/preventionPolicyMac:PreventionPolicyMac example 7fb858a949034a0cbca175f660f1e769
// ```
type PreventionPolicyMac struct {
	pulumi.CustomResourceState

	// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
	ChopperWebshell pulumi.BoolOutput `pulumi:"chopperWebshell"`
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
	CloudAdwareAndPup PreventionPolicyMacCloudAdwareAndPupOutput `pulumi:"cloudAdwareAndPup"`
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware PreventionPolicyMacCloudAntiMalwareOutput `pulumi:"cloudAntiMalware"`
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking pulumi.BoolOutput `pulumi:"customBlocking"`
	// Description of the prevention policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
	DetectOnWrite pulumi.BoolOutput `pulumi:"detectOnWrite"`
	// Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
	EmpyreBackdoor pulumi.BoolOutput `pulumi:"empyreBackdoor"`
	// Enable the prevention policy.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
	HashCollector pulumi.BoolOutput `pulumi:"hashCollector"`
	// Host Group ids to attach to the prevention policy.
	HostGroups pulumi.StringArrayOutput `pulumi:"hostGroups"`
	// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
	IntelligenceSourcedThreats pulumi.BoolOutput `pulumi:"intelligenceSourcedThreats"`
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups pulumi.StringArrayOutput `pulumi:"ioaRuleGroups"`
	// Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
	KcPasswordDecoded pulumi.BoolOutput   `pulumi:"kcPasswordDecoded"`
	LastUpdated       pulumi.StringOutput `pulumi:"lastUpdated"`
	// Name of the prevention policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
	NotifyEndUsers pulumi.BoolOutput `pulumi:"notifyEndUsers"`
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses pulumi.BoolOutput `pulumi:"preventSuspiciousProcesses"`
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine pulumi.BoolOutput `pulumi:"quarantine"`
	// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
	QuarantineOnWrite pulumi.BoolOutput `pulumi:"quarantineOnWrite"`
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring pulumi.BoolOutput `pulumi:"scriptBasedExecutionMonitoring"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
	SensorAdwareAndPup PreventionPolicyMacSensorAdwareAndPupOutput `pulumi:"sensorAdwareAndPup"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware PreventionPolicyMacSensorAntiMalwareOutput `pulumi:"sensorAntiMalware"`
	// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
	SensorTamperingProtection pulumi.BoolOutput `pulumi:"sensorTamperingProtection"`
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables pulumi.BoolOutput `pulumi:"uploadUnknownDetectionRelatedExecutables"`
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables pulumi.BoolOutput `pulumi:"uploadUnknownExecutables"`
	// Whether to enable the setting. The execution of an XPCOM shell was blocked.
	XpcomShell pulumi.BoolOutput `pulumi:"xpcomShell"`
}

// NewPreventionPolicyMac registers a new resource with the given unique name, arguments, and options.
func NewPreventionPolicyMac(ctx *pulumi.Context,
	name string, args *PreventionPolicyMacArgs, opts ...pulumi.ResourceOption) (*PreventionPolicyMac, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostGroups == nil {
		return nil, errors.New("invalid value for required argument 'HostGroups'")
	}
	if args.IoaRuleGroups == nil {
		return nil, errors.New("invalid value for required argument 'IoaRuleGroups'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PreventionPolicyMac
	err := ctx.RegisterResource("crowdstrike:index/preventionPolicyMac:PreventionPolicyMac", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPreventionPolicyMac gets an existing PreventionPolicyMac resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreventionPolicyMac(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PreventionPolicyMacState, opts ...pulumi.ResourceOption) (*PreventionPolicyMac, error) {
	var resource PreventionPolicyMac
	err := ctx.ReadResource("crowdstrike:index/preventionPolicyMac:PreventionPolicyMac", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PreventionPolicyMac resources.
type preventionPolicyMacState struct {
	// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
	ChopperWebshell *bool `pulumi:"chopperWebshell"`
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
	CloudAdwareAndPup *PreventionPolicyMacCloudAdwareAndPup `pulumi:"cloudAdwareAndPup"`
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware *PreventionPolicyMacCloudAntiMalware `pulumi:"cloudAntiMalware"`
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking *bool `pulumi:"customBlocking"`
	// Description of the prevention policy.
	Description *string `pulumi:"description"`
	// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
	DetectOnWrite *bool `pulumi:"detectOnWrite"`
	// Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
	EmpyreBackdoor *bool `pulumi:"empyreBackdoor"`
	// Enable the prevention policy.
	Enabled *bool `pulumi:"enabled"`
	// Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
	HashCollector *bool `pulumi:"hashCollector"`
	// Host Group ids to attach to the prevention policy.
	HostGroups []string `pulumi:"hostGroups"`
	// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
	IntelligenceSourcedThreats *bool `pulumi:"intelligenceSourcedThreats"`
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups []string `pulumi:"ioaRuleGroups"`
	// Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
	KcPasswordDecoded *bool   `pulumi:"kcPasswordDecoded"`
	LastUpdated       *string `pulumi:"lastUpdated"`
	// Name of the prevention policy.
	Name *string `pulumi:"name"`
	// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
	NotifyEndUsers *bool `pulumi:"notifyEndUsers"`
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses *bool `pulumi:"preventSuspiciousProcesses"`
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine *bool `pulumi:"quarantine"`
	// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
	QuarantineOnWrite *bool `pulumi:"quarantineOnWrite"`
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring *bool `pulumi:"scriptBasedExecutionMonitoring"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
	SensorAdwareAndPup *PreventionPolicyMacSensorAdwareAndPup `pulumi:"sensorAdwareAndPup"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware *PreventionPolicyMacSensorAntiMalware `pulumi:"sensorAntiMalware"`
	// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
	SensorTamperingProtection *bool `pulumi:"sensorTamperingProtection"`
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables *bool `pulumi:"uploadUnknownDetectionRelatedExecutables"`
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables *bool `pulumi:"uploadUnknownExecutables"`
	// Whether to enable the setting. The execution of an XPCOM shell was blocked.
	XpcomShell *bool `pulumi:"xpcomShell"`
}

type PreventionPolicyMacState struct {
	// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
	ChopperWebshell pulumi.BoolPtrInput
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
	CloudAdwareAndPup PreventionPolicyMacCloudAdwareAndPupPtrInput
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware PreventionPolicyMacCloudAntiMalwarePtrInput
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking pulumi.BoolPtrInput
	// Description of the prevention policy.
	Description pulumi.StringPtrInput
	// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
	DetectOnWrite pulumi.BoolPtrInput
	// Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
	EmpyreBackdoor pulumi.BoolPtrInput
	// Enable the prevention policy.
	Enabled pulumi.BoolPtrInput
	// Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
	HashCollector pulumi.BoolPtrInput
	// Host Group ids to attach to the prevention policy.
	HostGroups pulumi.StringArrayInput
	// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
	IntelligenceSourcedThreats pulumi.BoolPtrInput
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups pulumi.StringArrayInput
	// Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
	KcPasswordDecoded pulumi.BoolPtrInput
	LastUpdated       pulumi.StringPtrInput
	// Name of the prevention policy.
	Name pulumi.StringPtrInput
	// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
	NotifyEndUsers pulumi.BoolPtrInput
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses pulumi.BoolPtrInput
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine pulumi.BoolPtrInput
	// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
	QuarantineOnWrite pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring pulumi.BoolPtrInput
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
	SensorAdwareAndPup PreventionPolicyMacSensorAdwareAndPupPtrInput
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware PreventionPolicyMacSensorAntiMalwarePtrInput
	// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
	SensorTamperingProtection pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables pulumi.BoolPtrInput
	// Whether to enable the setting. The execution of an XPCOM shell was blocked.
	XpcomShell pulumi.BoolPtrInput
}

func (PreventionPolicyMacState) ElementType() reflect.Type {
	return reflect.TypeOf((*preventionPolicyMacState)(nil)).Elem()
}

type preventionPolicyMacArgs struct {
	// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
	ChopperWebshell *bool `pulumi:"chopperWebshell"`
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
	CloudAdwareAndPup *PreventionPolicyMacCloudAdwareAndPup `pulumi:"cloudAdwareAndPup"`
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware *PreventionPolicyMacCloudAntiMalware `pulumi:"cloudAntiMalware"`
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking *bool `pulumi:"customBlocking"`
	// Description of the prevention policy.
	Description *string `pulumi:"description"`
	// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
	DetectOnWrite *bool `pulumi:"detectOnWrite"`
	// Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
	EmpyreBackdoor *bool `pulumi:"empyreBackdoor"`
	// Enable the prevention policy.
	Enabled *bool `pulumi:"enabled"`
	// Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
	HashCollector *bool `pulumi:"hashCollector"`
	// Host Group ids to attach to the prevention policy.
	HostGroups []string `pulumi:"hostGroups"`
	// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
	IntelligenceSourcedThreats *bool `pulumi:"intelligenceSourcedThreats"`
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups []string `pulumi:"ioaRuleGroups"`
	// Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
	KcPasswordDecoded *bool `pulumi:"kcPasswordDecoded"`
	// Name of the prevention policy.
	Name *string `pulumi:"name"`
	// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
	NotifyEndUsers *bool `pulumi:"notifyEndUsers"`
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses *bool `pulumi:"preventSuspiciousProcesses"`
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine *bool `pulumi:"quarantine"`
	// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
	QuarantineOnWrite *bool `pulumi:"quarantineOnWrite"`
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring *bool `pulumi:"scriptBasedExecutionMonitoring"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
	SensorAdwareAndPup *PreventionPolicyMacSensorAdwareAndPup `pulumi:"sensorAdwareAndPup"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware *PreventionPolicyMacSensorAntiMalware `pulumi:"sensorAntiMalware"`
	// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
	SensorTamperingProtection *bool `pulumi:"sensorTamperingProtection"`
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables *bool `pulumi:"uploadUnknownDetectionRelatedExecutables"`
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables *bool `pulumi:"uploadUnknownExecutables"`
	// Whether to enable the setting. The execution of an XPCOM shell was blocked.
	XpcomShell *bool `pulumi:"xpcomShell"`
}

// The set of arguments for constructing a PreventionPolicyMac resource.
type PreventionPolicyMacArgs struct {
	// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
	ChopperWebshell pulumi.BoolPtrInput
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
	CloudAdwareAndPup PreventionPolicyMacCloudAdwareAndPupPtrInput
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware PreventionPolicyMacCloudAntiMalwarePtrInput
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking pulumi.BoolPtrInput
	// Description of the prevention policy.
	Description pulumi.StringPtrInput
	// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
	DetectOnWrite pulumi.BoolPtrInput
	// Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
	EmpyreBackdoor pulumi.BoolPtrInput
	// Enable the prevention policy.
	Enabled pulumi.BoolPtrInput
	// Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
	HashCollector pulumi.BoolPtrInput
	// Host Group ids to attach to the prevention policy.
	HostGroups pulumi.StringArrayInput
	// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
	IntelligenceSourcedThreats pulumi.BoolPtrInput
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups pulumi.StringArrayInput
	// Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
	KcPasswordDecoded pulumi.BoolPtrInput
	// Name of the prevention policy.
	Name pulumi.StringPtrInput
	// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
	NotifyEndUsers pulumi.BoolPtrInput
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses pulumi.BoolPtrInput
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine pulumi.BoolPtrInput
	// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
	QuarantineOnWrite pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring pulumi.BoolPtrInput
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
	SensorAdwareAndPup PreventionPolicyMacSensorAdwareAndPupPtrInput
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware PreventionPolicyMacSensorAntiMalwarePtrInput
	// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
	SensorTamperingProtection pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables pulumi.BoolPtrInput
	// Whether to enable the setting. The execution of an XPCOM shell was blocked.
	XpcomShell pulumi.BoolPtrInput
}

func (PreventionPolicyMacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*preventionPolicyMacArgs)(nil)).Elem()
}

type PreventionPolicyMacInput interface {
	pulumi.Input

	ToPreventionPolicyMacOutput() PreventionPolicyMacOutput
	ToPreventionPolicyMacOutputWithContext(ctx context.Context) PreventionPolicyMacOutput
}

func (*PreventionPolicyMac) ElementType() reflect.Type {
	return reflect.TypeOf((**PreventionPolicyMac)(nil)).Elem()
}

func (i *PreventionPolicyMac) ToPreventionPolicyMacOutput() PreventionPolicyMacOutput {
	return i.ToPreventionPolicyMacOutputWithContext(context.Background())
}

func (i *PreventionPolicyMac) ToPreventionPolicyMacOutputWithContext(ctx context.Context) PreventionPolicyMacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionPolicyMacOutput)
}

// PreventionPolicyMacArrayInput is an input type that accepts PreventionPolicyMacArray and PreventionPolicyMacArrayOutput values.
// You can construct a concrete instance of `PreventionPolicyMacArrayInput` via:
//
//	PreventionPolicyMacArray{ PreventionPolicyMacArgs{...} }
type PreventionPolicyMacArrayInput interface {
	pulumi.Input

	ToPreventionPolicyMacArrayOutput() PreventionPolicyMacArrayOutput
	ToPreventionPolicyMacArrayOutputWithContext(context.Context) PreventionPolicyMacArrayOutput
}

type PreventionPolicyMacArray []PreventionPolicyMacInput

func (PreventionPolicyMacArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreventionPolicyMac)(nil)).Elem()
}

func (i PreventionPolicyMacArray) ToPreventionPolicyMacArrayOutput() PreventionPolicyMacArrayOutput {
	return i.ToPreventionPolicyMacArrayOutputWithContext(context.Background())
}

func (i PreventionPolicyMacArray) ToPreventionPolicyMacArrayOutputWithContext(ctx context.Context) PreventionPolicyMacArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionPolicyMacArrayOutput)
}

// PreventionPolicyMacMapInput is an input type that accepts PreventionPolicyMacMap and PreventionPolicyMacMapOutput values.
// You can construct a concrete instance of `PreventionPolicyMacMapInput` via:
//
//	PreventionPolicyMacMap{ "key": PreventionPolicyMacArgs{...} }
type PreventionPolicyMacMapInput interface {
	pulumi.Input

	ToPreventionPolicyMacMapOutput() PreventionPolicyMacMapOutput
	ToPreventionPolicyMacMapOutputWithContext(context.Context) PreventionPolicyMacMapOutput
}

type PreventionPolicyMacMap map[string]PreventionPolicyMacInput

func (PreventionPolicyMacMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreventionPolicyMac)(nil)).Elem()
}

func (i PreventionPolicyMacMap) ToPreventionPolicyMacMapOutput() PreventionPolicyMacMapOutput {
	return i.ToPreventionPolicyMacMapOutputWithContext(context.Background())
}

func (i PreventionPolicyMacMap) ToPreventionPolicyMacMapOutputWithContext(ctx context.Context) PreventionPolicyMacMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionPolicyMacMapOutput)
}

type PreventionPolicyMacOutput struct{ *pulumi.OutputState }

func (PreventionPolicyMacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreventionPolicyMac)(nil)).Elem()
}

func (o PreventionPolicyMacOutput) ToPreventionPolicyMacOutput() PreventionPolicyMacOutput {
	return o
}

func (o PreventionPolicyMacOutput) ToPreventionPolicyMacOutputWithContext(ctx context.Context) PreventionPolicyMacOutput {
	return o
}

// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
func (o PreventionPolicyMacOutput) ChopperWebshell() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.ChopperWebshell }).(pulumi.BoolOutput)
}

// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
func (o PreventionPolicyMacOutput) CloudAdwareAndPup() PreventionPolicyMacCloudAdwareAndPupOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) PreventionPolicyMacCloudAdwareAndPupOutput { return v.CloudAdwareAndPup }).(PreventionPolicyMacCloudAdwareAndPupOutput)
}

// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
func (o PreventionPolicyMacOutput) CloudAntiMalware() PreventionPolicyMacCloudAntiMalwareOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) PreventionPolicyMacCloudAntiMalwareOutput { return v.CloudAntiMalware }).(PreventionPolicyMacCloudAntiMalwareOutput)
}

// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
func (o PreventionPolicyMacOutput) CustomBlocking() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.CustomBlocking }).(pulumi.BoolOutput)
}

// Description of the prevention policy.
func (o PreventionPolicyMacOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
func (o PreventionPolicyMacOutput) DetectOnWrite() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.DetectOnWrite }).(pulumi.BoolOutput)
}

// Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
func (o PreventionPolicyMacOutput) EmpyreBackdoor() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.EmpyreBackdoor }).(pulumi.BoolOutput)
}

// Enable the prevention policy.
func (o PreventionPolicyMacOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
func (o PreventionPolicyMacOutput) HashCollector() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.HashCollector }).(pulumi.BoolOutput)
}

// Host Group ids to attach to the prevention policy.
func (o PreventionPolicyMacOutput) HostGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.StringArrayOutput { return v.HostGroups }).(pulumi.StringArrayOutput)
}

// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
func (o PreventionPolicyMacOutput) IntelligenceSourcedThreats() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.IntelligenceSourcedThreats }).(pulumi.BoolOutput)
}

// IOA Rule Group to attach to the prevention policy.
func (o PreventionPolicyMacOutput) IoaRuleGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.StringArrayOutput { return v.IoaRuleGroups }).(pulumi.StringArrayOutput)
}

// Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
func (o PreventionPolicyMacOutput) KcPasswordDecoded() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.KcPasswordDecoded }).(pulumi.BoolOutput)
}

func (o PreventionPolicyMacOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// Name of the prevention policy.
func (o PreventionPolicyMacOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
func (o PreventionPolicyMacOutput) NotifyEndUsers() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.NotifyEndUsers }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
func (o PreventionPolicyMacOutput) PreventSuspiciousProcesses() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.PreventSuspiciousProcesses }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
func (o PreventionPolicyMacOutput) Quarantine() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.Quarantine }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
func (o PreventionPolicyMacOutput) QuarantineOnWrite() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.QuarantineOnWrite }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
func (o PreventionPolicyMacOutput) ScriptBasedExecutionMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.ScriptBasedExecutionMonitoring }).(pulumi.BoolOutput)
}

// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
func (o PreventionPolicyMacOutput) SensorAdwareAndPup() PreventionPolicyMacSensorAdwareAndPupOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) PreventionPolicyMacSensorAdwareAndPupOutput { return v.SensorAdwareAndPup }).(PreventionPolicyMacSensorAdwareAndPupOutput)
}

// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
func (o PreventionPolicyMacOutput) SensorAntiMalware() PreventionPolicyMacSensorAntiMalwareOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) PreventionPolicyMacSensorAntiMalwareOutput { return v.SensorAntiMalware }).(PreventionPolicyMacSensorAntiMalwareOutput)
}

// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
func (o PreventionPolicyMacOutput) SensorTamperingProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.SensorTamperingProtection }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
func (o PreventionPolicyMacOutput) UploadUnknownDetectionRelatedExecutables() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.UploadUnknownDetectionRelatedExecutables }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
func (o PreventionPolicyMacOutput) UploadUnknownExecutables() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.UploadUnknownExecutables }).(pulumi.BoolOutput)
}

// Whether to enable the setting. The execution of an XPCOM shell was blocked.
func (o PreventionPolicyMacOutput) XpcomShell() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyMac) pulumi.BoolOutput { return v.XpcomShell }).(pulumi.BoolOutput)
}

type PreventionPolicyMacArrayOutput struct{ *pulumi.OutputState }

func (PreventionPolicyMacArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreventionPolicyMac)(nil)).Elem()
}

func (o PreventionPolicyMacArrayOutput) ToPreventionPolicyMacArrayOutput() PreventionPolicyMacArrayOutput {
	return o
}

func (o PreventionPolicyMacArrayOutput) ToPreventionPolicyMacArrayOutputWithContext(ctx context.Context) PreventionPolicyMacArrayOutput {
	return o
}

func (o PreventionPolicyMacArrayOutput) Index(i pulumi.IntInput) PreventionPolicyMacOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PreventionPolicyMac {
		return vs[0].([]*PreventionPolicyMac)[vs[1].(int)]
	}).(PreventionPolicyMacOutput)
}

type PreventionPolicyMacMapOutput struct{ *pulumi.OutputState }

func (PreventionPolicyMacMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreventionPolicyMac)(nil)).Elem()
}

func (o PreventionPolicyMacMapOutput) ToPreventionPolicyMacMapOutput() PreventionPolicyMacMapOutput {
	return o
}

func (o PreventionPolicyMacMapOutput) ToPreventionPolicyMacMapOutputWithContext(ctx context.Context) PreventionPolicyMacMapOutput {
	return o
}

func (o PreventionPolicyMacMapOutput) MapIndex(k pulumi.StringInput) PreventionPolicyMacOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PreventionPolicyMac {
		return vs[0].(map[string]*PreventionPolicyMac)[vs[1].(string)]
	}).(PreventionPolicyMacOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionPolicyMacInput)(nil)).Elem(), &PreventionPolicyMac{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionPolicyMacArrayInput)(nil)).Elem(), PreventionPolicyMacArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionPolicyMacMapInput)(nil)).Elem(), PreventionPolicyMacMap{})
	pulumi.RegisterOutputType(PreventionPolicyMacOutput{})
	pulumi.RegisterOutputType(PreventionPolicyMacArrayOutput{})
	pulumi.RegisterOutputType(PreventionPolicyMacMapOutput{})
}
