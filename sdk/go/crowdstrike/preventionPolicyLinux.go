// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package crowdstrike

import (
	"context"
	"reflect"

	"errors"
	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to manage CrowdStrike Falcon prevention policies for Linux hosts. Prevention policies allow you to manage what activity will trigger detections and preventions on your hosts.
//
// ## API Scopes
//
// The following API scopes are required:
//
// - Prevention policies | Read & Write
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := crowdstrike.NewPreventionPolicyLinux(ctx, "example", &crowdstrike.PreventionPolicyLinuxArgs{
//				Enabled:     pulumi.Bool(true),
//				Description: pulumi.String("Made with Pulumi"),
//				HostGroups: pulumi.StringArray{
//					pulumi.String("d6e3c1e1b3d0467da0fowc96a5e6ecb5"),
//				},
//				IoaRuleGroups: pulumi.StringArray{},
//				CloudAntiMalware: &crowdstrike.PreventionPolicyLinuxCloudAntiMalwareArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("CAUTIOUS"),
//				},
//				SensorAntiMalware: &crowdstrike.PreventionPolicyLinuxSensorAntiMalwareArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("CAUTIOUS"),
//				},
//				Quarantine:                               pulumi.Bool(true),
//				CustomBlocking:                           pulumi.Bool(true),
//				PreventSuspiciousProcesses:               pulumi.Bool(true),
//				ScriptBasedExecutionMonitoring:           pulumi.Bool(true),
//				UploadUnknownExecutables:                 pulumi.Bool(true),
//				UploadUnknownDetectionRelatedExecutables: pulumi.Bool(true),
//				DriftPrevention:                          pulumi.Bool(true),
//				EmailProtocolVisibility:                  pulumi.Bool(true),
//				FilesystemVisibility:                     pulumi.Bool(true),
//				FtpVisibility:                            pulumi.Bool(true),
//				HttpVisibility:                           pulumi.Bool(true),
//				NetworkVisibility:                        pulumi.Bool(true),
//				TlsVisibility:                            pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("preventionPolicyLinux", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// prevention policy can be imported by specifying the policy id.
//
// ```sh
// $ pulumi import crowdstrike:index/preventionPolicyLinux:PreventionPolicyLinux example 7fb858a949034a0cbca175f660f1e769
// ```
type PreventionPolicyLinux struct {
	pulumi.CustomResourceState

	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware PreventionPolicyLinuxCloudAntiMalwareOutput `pulumi:"cloudAntiMalware"`
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking pulumi.BoolOutput `pulumi:"customBlocking"`
	// Description of the prevention policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
	DriftPrevention pulumi.BoolOutput `pulumi:"driftPrevention"`
	// Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
	EmailProtocolVisibility pulumi.BoolOutput `pulumi:"emailProtocolVisibility"`
	// Enable the prevention policy.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
	FilesystemVisibility pulumi.BoolOutput `pulumi:"filesystemVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
	FtpVisibility pulumi.BoolOutput `pulumi:"ftpVisibility"`
	// Host Group ids to attach to the prevention policy.
	HostGroups pulumi.StringArrayOutput `pulumi:"hostGroups"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
	HttpVisibility pulumi.BoolOutput `pulumi:"httpVisibility"`
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups pulumi.StringArrayOutput `pulumi:"ioaRuleGroups"`
	LastUpdated   pulumi.StringOutput      `pulumi:"lastUpdated"`
	// Name of the prevention policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
	NetworkVisibility pulumi.BoolOutput `pulumi:"networkVisibility"`
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses pulumi.BoolOutput `pulumi:"preventSuspiciousProcesses"`
	// Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine pulumi.BoolOutput `pulumi:"quarantine"`
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring pulumi.BoolOutput `pulumi:"scriptBasedExecutionMonitoring"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware PreventionPolicyLinuxSensorAntiMalwareOutput `pulumi:"sensorAntiMalware"`
	// Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
	TlsVisibility pulumi.BoolOutput `pulumi:"tlsVisibility"`
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables pulumi.BoolOutput `pulumi:"uploadUnknownDetectionRelatedExecutables"`
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables pulumi.BoolOutput `pulumi:"uploadUnknownExecutables"`
}

// NewPreventionPolicyLinux registers a new resource with the given unique name, arguments, and options.
func NewPreventionPolicyLinux(ctx *pulumi.Context,
	name string, args *PreventionPolicyLinuxArgs, opts ...pulumi.ResourceOption) (*PreventionPolicyLinux, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostGroups == nil {
		return nil, errors.New("invalid value for required argument 'HostGroups'")
	}
	if args.IoaRuleGroups == nil {
		return nil, errors.New("invalid value for required argument 'IoaRuleGroups'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PreventionPolicyLinux
	err := ctx.RegisterResource("crowdstrike:index/preventionPolicyLinux:PreventionPolicyLinux", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPreventionPolicyLinux gets an existing PreventionPolicyLinux resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreventionPolicyLinux(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PreventionPolicyLinuxState, opts ...pulumi.ResourceOption) (*PreventionPolicyLinux, error) {
	var resource PreventionPolicyLinux
	err := ctx.ReadResource("crowdstrike:index/preventionPolicyLinux:PreventionPolicyLinux", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PreventionPolicyLinux resources.
type preventionPolicyLinuxState struct {
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware *PreventionPolicyLinuxCloudAntiMalware `pulumi:"cloudAntiMalware"`
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking *bool `pulumi:"customBlocking"`
	// Description of the prevention policy.
	Description *string `pulumi:"description"`
	// Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
	DriftPrevention *bool `pulumi:"driftPrevention"`
	// Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
	EmailProtocolVisibility *bool `pulumi:"emailProtocolVisibility"`
	// Enable the prevention policy.
	Enabled *bool `pulumi:"enabled"`
	// Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
	FilesystemVisibility *bool `pulumi:"filesystemVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
	FtpVisibility *bool `pulumi:"ftpVisibility"`
	// Host Group ids to attach to the prevention policy.
	HostGroups []string `pulumi:"hostGroups"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
	HttpVisibility *bool `pulumi:"httpVisibility"`
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups []string `pulumi:"ioaRuleGroups"`
	LastUpdated   *string  `pulumi:"lastUpdated"`
	// Name of the prevention policy.
	Name *string `pulumi:"name"`
	// Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
	NetworkVisibility *bool `pulumi:"networkVisibility"`
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses *bool `pulumi:"preventSuspiciousProcesses"`
	// Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine *bool `pulumi:"quarantine"`
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring *bool `pulumi:"scriptBasedExecutionMonitoring"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware *PreventionPolicyLinuxSensorAntiMalware `pulumi:"sensorAntiMalware"`
	// Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
	TlsVisibility *bool `pulumi:"tlsVisibility"`
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables *bool `pulumi:"uploadUnknownDetectionRelatedExecutables"`
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables *bool `pulumi:"uploadUnknownExecutables"`
}

type PreventionPolicyLinuxState struct {
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware PreventionPolicyLinuxCloudAntiMalwarePtrInput
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking pulumi.BoolPtrInput
	// Description of the prevention policy.
	Description pulumi.StringPtrInput
	// Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
	DriftPrevention pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
	EmailProtocolVisibility pulumi.BoolPtrInput
	// Enable the prevention policy.
	Enabled pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
	FilesystemVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
	FtpVisibility pulumi.BoolPtrInput
	// Host Group ids to attach to the prevention policy.
	HostGroups pulumi.StringArrayInput
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
	HttpVisibility pulumi.BoolPtrInput
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups pulumi.StringArrayInput
	LastUpdated   pulumi.StringPtrInput
	// Name of the prevention policy.
	Name pulumi.StringPtrInput
	// Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
	NetworkVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses pulumi.BoolPtrInput
	// Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring pulumi.BoolPtrInput
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware PreventionPolicyLinuxSensorAntiMalwarePtrInput
	// Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
	TlsVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables pulumi.BoolPtrInput
}

func (PreventionPolicyLinuxState) ElementType() reflect.Type {
	return reflect.TypeOf((*preventionPolicyLinuxState)(nil)).Elem()
}

type preventionPolicyLinuxArgs struct {
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware *PreventionPolicyLinuxCloudAntiMalware `pulumi:"cloudAntiMalware"`
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking *bool `pulumi:"customBlocking"`
	// Description of the prevention policy.
	Description *string `pulumi:"description"`
	// Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
	DriftPrevention *bool `pulumi:"driftPrevention"`
	// Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
	EmailProtocolVisibility *bool `pulumi:"emailProtocolVisibility"`
	// Enable the prevention policy.
	Enabled *bool `pulumi:"enabled"`
	// Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
	FilesystemVisibility *bool `pulumi:"filesystemVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
	FtpVisibility *bool `pulumi:"ftpVisibility"`
	// Host Group ids to attach to the prevention policy.
	HostGroups []string `pulumi:"hostGroups"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
	HttpVisibility *bool `pulumi:"httpVisibility"`
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups []string `pulumi:"ioaRuleGroups"`
	// Name of the prevention policy.
	Name *string `pulumi:"name"`
	// Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
	NetworkVisibility *bool `pulumi:"networkVisibility"`
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses *bool `pulumi:"preventSuspiciousProcesses"`
	// Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine *bool `pulumi:"quarantine"`
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring *bool `pulumi:"scriptBasedExecutionMonitoring"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware *PreventionPolicyLinuxSensorAntiMalware `pulumi:"sensorAntiMalware"`
	// Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
	TlsVisibility *bool `pulumi:"tlsVisibility"`
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables *bool `pulumi:"uploadUnknownDetectionRelatedExecutables"`
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables *bool `pulumi:"uploadUnknownExecutables"`
}

// The set of arguments for constructing a PreventionPolicyLinux resource.
type PreventionPolicyLinuxArgs struct {
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware PreventionPolicyLinuxCloudAntiMalwarePtrInput
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking pulumi.BoolPtrInput
	// Description of the prevention policy.
	Description pulumi.StringPtrInput
	// Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
	DriftPrevention pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
	EmailProtocolVisibility pulumi.BoolPtrInput
	// Enable the prevention policy.
	Enabled pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
	FilesystemVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
	FtpVisibility pulumi.BoolPtrInput
	// Host Group ids to attach to the prevention policy.
	HostGroups pulumi.StringArrayInput
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
	HttpVisibility pulumi.BoolPtrInput
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups pulumi.StringArrayInput
	// Name of the prevention policy.
	Name pulumi.StringPtrInput
	// Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
	NetworkVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses pulumi.BoolPtrInput
	// Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring pulumi.BoolPtrInput
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware PreventionPolicyLinuxSensorAntiMalwarePtrInput
	// Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
	TlsVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables pulumi.BoolPtrInput
}

func (PreventionPolicyLinuxArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*preventionPolicyLinuxArgs)(nil)).Elem()
}

type PreventionPolicyLinuxInput interface {
	pulumi.Input

	ToPreventionPolicyLinuxOutput() PreventionPolicyLinuxOutput
	ToPreventionPolicyLinuxOutputWithContext(ctx context.Context) PreventionPolicyLinuxOutput
}

func (*PreventionPolicyLinux) ElementType() reflect.Type {
	return reflect.TypeOf((**PreventionPolicyLinux)(nil)).Elem()
}

func (i *PreventionPolicyLinux) ToPreventionPolicyLinuxOutput() PreventionPolicyLinuxOutput {
	return i.ToPreventionPolicyLinuxOutputWithContext(context.Background())
}

func (i *PreventionPolicyLinux) ToPreventionPolicyLinuxOutputWithContext(ctx context.Context) PreventionPolicyLinuxOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionPolicyLinuxOutput)
}

// PreventionPolicyLinuxArrayInput is an input type that accepts PreventionPolicyLinuxArray and PreventionPolicyLinuxArrayOutput values.
// You can construct a concrete instance of `PreventionPolicyLinuxArrayInput` via:
//
//	PreventionPolicyLinuxArray{ PreventionPolicyLinuxArgs{...} }
type PreventionPolicyLinuxArrayInput interface {
	pulumi.Input

	ToPreventionPolicyLinuxArrayOutput() PreventionPolicyLinuxArrayOutput
	ToPreventionPolicyLinuxArrayOutputWithContext(context.Context) PreventionPolicyLinuxArrayOutput
}

type PreventionPolicyLinuxArray []PreventionPolicyLinuxInput

func (PreventionPolicyLinuxArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreventionPolicyLinux)(nil)).Elem()
}

func (i PreventionPolicyLinuxArray) ToPreventionPolicyLinuxArrayOutput() PreventionPolicyLinuxArrayOutput {
	return i.ToPreventionPolicyLinuxArrayOutputWithContext(context.Background())
}

func (i PreventionPolicyLinuxArray) ToPreventionPolicyLinuxArrayOutputWithContext(ctx context.Context) PreventionPolicyLinuxArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionPolicyLinuxArrayOutput)
}

// PreventionPolicyLinuxMapInput is an input type that accepts PreventionPolicyLinuxMap and PreventionPolicyLinuxMapOutput values.
// You can construct a concrete instance of `PreventionPolicyLinuxMapInput` via:
//
//	PreventionPolicyLinuxMap{ "key": PreventionPolicyLinuxArgs{...} }
type PreventionPolicyLinuxMapInput interface {
	pulumi.Input

	ToPreventionPolicyLinuxMapOutput() PreventionPolicyLinuxMapOutput
	ToPreventionPolicyLinuxMapOutputWithContext(context.Context) PreventionPolicyLinuxMapOutput
}

type PreventionPolicyLinuxMap map[string]PreventionPolicyLinuxInput

func (PreventionPolicyLinuxMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreventionPolicyLinux)(nil)).Elem()
}

func (i PreventionPolicyLinuxMap) ToPreventionPolicyLinuxMapOutput() PreventionPolicyLinuxMapOutput {
	return i.ToPreventionPolicyLinuxMapOutputWithContext(context.Background())
}

func (i PreventionPolicyLinuxMap) ToPreventionPolicyLinuxMapOutputWithContext(ctx context.Context) PreventionPolicyLinuxMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionPolicyLinuxMapOutput)
}

type PreventionPolicyLinuxOutput struct{ *pulumi.OutputState }

func (PreventionPolicyLinuxOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreventionPolicyLinux)(nil)).Elem()
}

func (o PreventionPolicyLinuxOutput) ToPreventionPolicyLinuxOutput() PreventionPolicyLinuxOutput {
	return o
}

func (o PreventionPolicyLinuxOutput) ToPreventionPolicyLinuxOutputWithContext(ctx context.Context) PreventionPolicyLinuxOutput {
	return o
}

// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
func (o PreventionPolicyLinuxOutput) CloudAntiMalware() PreventionPolicyLinuxCloudAntiMalwareOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) PreventionPolicyLinuxCloudAntiMalwareOutput { return v.CloudAntiMalware }).(PreventionPolicyLinuxCloudAntiMalwareOutput)
}

// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
func (o PreventionPolicyLinuxOutput) CustomBlocking() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.CustomBlocking }).(pulumi.BoolOutput)
}

// Description of the prevention policy.
func (o PreventionPolicyLinuxOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
func (o PreventionPolicyLinuxOutput) DriftPrevention() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.DriftPrevention }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
func (o PreventionPolicyLinuxOutput) EmailProtocolVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.EmailProtocolVisibility }).(pulumi.BoolOutput)
}

// Enable the prevention policy.
func (o PreventionPolicyLinuxOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
func (o PreventionPolicyLinuxOutput) FilesystemVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.FilesystemVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
func (o PreventionPolicyLinuxOutput) FtpVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.FtpVisibility }).(pulumi.BoolOutput)
}

// Host Group ids to attach to the prevention policy.
func (o PreventionPolicyLinuxOutput) HostGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.StringArrayOutput { return v.HostGroups }).(pulumi.StringArrayOutput)
}

// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
func (o PreventionPolicyLinuxOutput) HttpVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.HttpVisibility }).(pulumi.BoolOutput)
}

// IOA Rule Group to attach to the prevention policy.
func (o PreventionPolicyLinuxOutput) IoaRuleGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.StringArrayOutput { return v.IoaRuleGroups }).(pulumi.StringArrayOutput)
}

func (o PreventionPolicyLinuxOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// Name of the prevention policy.
func (o PreventionPolicyLinuxOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
func (o PreventionPolicyLinuxOutput) NetworkVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.NetworkVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
func (o PreventionPolicyLinuxOutput) PreventSuspiciousProcesses() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.PreventSuspiciousProcesses }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
func (o PreventionPolicyLinuxOutput) Quarantine() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.Quarantine }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
func (o PreventionPolicyLinuxOutput) ScriptBasedExecutionMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.ScriptBasedExecutionMonitoring }).(pulumi.BoolOutput)
}

// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
func (o PreventionPolicyLinuxOutput) SensorAntiMalware() PreventionPolicyLinuxSensorAntiMalwareOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) PreventionPolicyLinuxSensorAntiMalwareOutput {
		return v.SensorAntiMalware
	}).(PreventionPolicyLinuxSensorAntiMalwareOutput)
}

// Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
func (o PreventionPolicyLinuxOutput) TlsVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.TlsVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
func (o PreventionPolicyLinuxOutput) UploadUnknownDetectionRelatedExecutables() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.UploadUnknownDetectionRelatedExecutables }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
func (o PreventionPolicyLinuxOutput) UploadUnknownExecutables() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyLinux) pulumi.BoolOutput { return v.UploadUnknownExecutables }).(pulumi.BoolOutput)
}

type PreventionPolicyLinuxArrayOutput struct{ *pulumi.OutputState }

func (PreventionPolicyLinuxArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreventionPolicyLinux)(nil)).Elem()
}

func (o PreventionPolicyLinuxArrayOutput) ToPreventionPolicyLinuxArrayOutput() PreventionPolicyLinuxArrayOutput {
	return o
}

func (o PreventionPolicyLinuxArrayOutput) ToPreventionPolicyLinuxArrayOutputWithContext(ctx context.Context) PreventionPolicyLinuxArrayOutput {
	return o
}

func (o PreventionPolicyLinuxArrayOutput) Index(i pulumi.IntInput) PreventionPolicyLinuxOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PreventionPolicyLinux {
		return vs[0].([]*PreventionPolicyLinux)[vs[1].(int)]
	}).(PreventionPolicyLinuxOutput)
}

type PreventionPolicyLinuxMapOutput struct{ *pulumi.OutputState }

func (PreventionPolicyLinuxMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreventionPolicyLinux)(nil)).Elem()
}

func (o PreventionPolicyLinuxMapOutput) ToPreventionPolicyLinuxMapOutput() PreventionPolicyLinuxMapOutput {
	return o
}

func (o PreventionPolicyLinuxMapOutput) ToPreventionPolicyLinuxMapOutputWithContext(ctx context.Context) PreventionPolicyLinuxMapOutput {
	return o
}

func (o PreventionPolicyLinuxMapOutput) MapIndex(k pulumi.StringInput) PreventionPolicyLinuxOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PreventionPolicyLinux {
		return vs[0].(map[string]*PreventionPolicyLinux)[vs[1].(string)]
	}).(PreventionPolicyLinuxOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionPolicyLinuxInput)(nil)).Elem(), &PreventionPolicyLinux{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionPolicyLinuxArrayInput)(nil)).Elem(), PreventionPolicyLinuxArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionPolicyLinuxMapInput)(nil)).Elem(), PreventionPolicyLinuxMap{})
	pulumi.RegisterOutputType(PreventionPolicyLinuxOutput{})
	pulumi.RegisterOutputType(PreventionPolicyLinuxArrayOutput{})
	pulumi.RegisterOutputType(PreventionPolicyLinuxMapOutput{})
}
