// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package crowdstrike

import (
	"context"
	"reflect"

	"errors"
	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to set the precedence of Sensor Update Policies based on the order of IDs.
//
// ## API Scopes
//
// The following API scopes are required:
//
// - Sensor update policies | Read & Write
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := crowdstrike.NewSensorUpdatePolicyPrecedence(ctx, "example", &crowdstrike.SensorUpdatePolicyPrecedenceArgs{
//				Ids: pulumi.StringArray{
//					pulumi.String("a1j09y3yq0wnrpb5o6jlij9e4f40k6lq"),
//					pulumi.String("2asia54xti93bg0jbr5hfpqqbhxbyeoa"),
//					pulumi.String("xuzq8hs1uyc2s7zdar3fli0shiyl22vc"),
//				},
//				PlatformName: pulumi.String("linux"),
//				Enforcement:  pulumi.String("dynamic"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("sensorUpdatePolicyPrecedence", example)
//			return nil
//		})
//	}
//
// ```
type SensorUpdatePolicyPrecedence struct {
	pulumi.CustomResourceState

	// The enforcement type for this resource. `strict` requires all non-default sensor update policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
	Enforcement pulumi.StringOutput `pulumi:"enforcement"`
	// The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
	Ids         pulumi.StringArrayOutput `pulumi:"ids"`
	LastUpdated pulumi.StringOutput      `pulumi:"lastUpdated"`
	// That platform of the sensor update policies. (Windows, Mac, Linux)
	PlatformName pulumi.StringOutput `pulumi:"platformName"`
}

// NewSensorUpdatePolicyPrecedence registers a new resource with the given unique name, arguments, and options.
func NewSensorUpdatePolicyPrecedence(ctx *pulumi.Context,
	name string, args *SensorUpdatePolicyPrecedenceArgs, opts ...pulumi.ResourceOption) (*SensorUpdatePolicyPrecedence, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enforcement == nil {
		return nil, errors.New("invalid value for required argument 'Enforcement'")
	}
	if args.Ids == nil {
		return nil, errors.New("invalid value for required argument 'Ids'")
	}
	if args.PlatformName == nil {
		return nil, errors.New("invalid value for required argument 'PlatformName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SensorUpdatePolicyPrecedence
	err := ctx.RegisterResource("crowdstrike:index/sensorUpdatePolicyPrecedence:SensorUpdatePolicyPrecedence", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensorUpdatePolicyPrecedence gets an existing SensorUpdatePolicyPrecedence resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensorUpdatePolicyPrecedence(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensorUpdatePolicyPrecedenceState, opts ...pulumi.ResourceOption) (*SensorUpdatePolicyPrecedence, error) {
	var resource SensorUpdatePolicyPrecedence
	err := ctx.ReadResource("crowdstrike:index/sensorUpdatePolicyPrecedence:SensorUpdatePolicyPrecedence", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SensorUpdatePolicyPrecedence resources.
type sensorUpdatePolicyPrecedenceState struct {
	// The enforcement type for this resource. `strict` requires all non-default sensor update policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
	Enforcement *string `pulumi:"enforcement"`
	// The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
	Ids         []string `pulumi:"ids"`
	LastUpdated *string  `pulumi:"lastUpdated"`
	// That platform of the sensor update policies. (Windows, Mac, Linux)
	PlatformName *string `pulumi:"platformName"`
}

type SensorUpdatePolicyPrecedenceState struct {
	// The enforcement type for this resource. `strict` requires all non-default sensor update policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
	Enforcement pulumi.StringPtrInput
	// The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
	Ids         pulumi.StringArrayInput
	LastUpdated pulumi.StringPtrInput
	// That platform of the sensor update policies. (Windows, Mac, Linux)
	PlatformName pulumi.StringPtrInput
}

func (SensorUpdatePolicyPrecedenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorUpdatePolicyPrecedenceState)(nil)).Elem()
}

type sensorUpdatePolicyPrecedenceArgs struct {
	// The enforcement type for this resource. `strict` requires all non-default sensor update policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
	Enforcement string `pulumi:"enforcement"`
	// The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
	Ids []string `pulumi:"ids"`
	// That platform of the sensor update policies. (Windows, Mac, Linux)
	PlatformName string `pulumi:"platformName"`
}

// The set of arguments for constructing a SensorUpdatePolicyPrecedence resource.
type SensorUpdatePolicyPrecedenceArgs struct {
	// The enforcement type for this resource. `strict` requires all non-default sensor update policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
	Enforcement pulumi.StringInput
	// The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
	Ids pulumi.StringArrayInput
	// That platform of the sensor update policies. (Windows, Mac, Linux)
	PlatformName pulumi.StringInput
}

func (SensorUpdatePolicyPrecedenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorUpdatePolicyPrecedenceArgs)(nil)).Elem()
}

type SensorUpdatePolicyPrecedenceInput interface {
	pulumi.Input

	ToSensorUpdatePolicyPrecedenceOutput() SensorUpdatePolicyPrecedenceOutput
	ToSensorUpdatePolicyPrecedenceOutputWithContext(ctx context.Context) SensorUpdatePolicyPrecedenceOutput
}

func (*SensorUpdatePolicyPrecedence) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorUpdatePolicyPrecedence)(nil)).Elem()
}

func (i *SensorUpdatePolicyPrecedence) ToSensorUpdatePolicyPrecedenceOutput() SensorUpdatePolicyPrecedenceOutput {
	return i.ToSensorUpdatePolicyPrecedenceOutputWithContext(context.Background())
}

func (i *SensorUpdatePolicyPrecedence) ToSensorUpdatePolicyPrecedenceOutputWithContext(ctx context.Context) SensorUpdatePolicyPrecedenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorUpdatePolicyPrecedenceOutput)
}

// SensorUpdatePolicyPrecedenceArrayInput is an input type that accepts SensorUpdatePolicyPrecedenceArray and SensorUpdatePolicyPrecedenceArrayOutput values.
// You can construct a concrete instance of `SensorUpdatePolicyPrecedenceArrayInput` via:
//
//	SensorUpdatePolicyPrecedenceArray{ SensorUpdatePolicyPrecedenceArgs{...} }
type SensorUpdatePolicyPrecedenceArrayInput interface {
	pulumi.Input

	ToSensorUpdatePolicyPrecedenceArrayOutput() SensorUpdatePolicyPrecedenceArrayOutput
	ToSensorUpdatePolicyPrecedenceArrayOutputWithContext(context.Context) SensorUpdatePolicyPrecedenceArrayOutput
}

type SensorUpdatePolicyPrecedenceArray []SensorUpdatePolicyPrecedenceInput

func (SensorUpdatePolicyPrecedenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorUpdatePolicyPrecedence)(nil)).Elem()
}

func (i SensorUpdatePolicyPrecedenceArray) ToSensorUpdatePolicyPrecedenceArrayOutput() SensorUpdatePolicyPrecedenceArrayOutput {
	return i.ToSensorUpdatePolicyPrecedenceArrayOutputWithContext(context.Background())
}

func (i SensorUpdatePolicyPrecedenceArray) ToSensorUpdatePolicyPrecedenceArrayOutputWithContext(ctx context.Context) SensorUpdatePolicyPrecedenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorUpdatePolicyPrecedenceArrayOutput)
}

// SensorUpdatePolicyPrecedenceMapInput is an input type that accepts SensorUpdatePolicyPrecedenceMap and SensorUpdatePolicyPrecedenceMapOutput values.
// You can construct a concrete instance of `SensorUpdatePolicyPrecedenceMapInput` via:
//
//	SensorUpdatePolicyPrecedenceMap{ "key": SensorUpdatePolicyPrecedenceArgs{...} }
type SensorUpdatePolicyPrecedenceMapInput interface {
	pulumi.Input

	ToSensorUpdatePolicyPrecedenceMapOutput() SensorUpdatePolicyPrecedenceMapOutput
	ToSensorUpdatePolicyPrecedenceMapOutputWithContext(context.Context) SensorUpdatePolicyPrecedenceMapOutput
}

type SensorUpdatePolicyPrecedenceMap map[string]SensorUpdatePolicyPrecedenceInput

func (SensorUpdatePolicyPrecedenceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorUpdatePolicyPrecedence)(nil)).Elem()
}

func (i SensorUpdatePolicyPrecedenceMap) ToSensorUpdatePolicyPrecedenceMapOutput() SensorUpdatePolicyPrecedenceMapOutput {
	return i.ToSensorUpdatePolicyPrecedenceMapOutputWithContext(context.Background())
}

func (i SensorUpdatePolicyPrecedenceMap) ToSensorUpdatePolicyPrecedenceMapOutputWithContext(ctx context.Context) SensorUpdatePolicyPrecedenceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorUpdatePolicyPrecedenceMapOutput)
}

type SensorUpdatePolicyPrecedenceOutput struct{ *pulumi.OutputState }

func (SensorUpdatePolicyPrecedenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorUpdatePolicyPrecedence)(nil)).Elem()
}

func (o SensorUpdatePolicyPrecedenceOutput) ToSensorUpdatePolicyPrecedenceOutput() SensorUpdatePolicyPrecedenceOutput {
	return o
}

func (o SensorUpdatePolicyPrecedenceOutput) ToSensorUpdatePolicyPrecedenceOutputWithContext(ctx context.Context) SensorUpdatePolicyPrecedenceOutput {
	return o
}

// The enforcement type for this resource. `strict` requires all non-default sensor update policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
func (o SensorUpdatePolicyPrecedenceOutput) Enforcement() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorUpdatePolicyPrecedence) pulumi.StringOutput { return v.Enforcement }).(pulumi.StringOutput)
}

// The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
func (o SensorUpdatePolicyPrecedenceOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensorUpdatePolicyPrecedence) pulumi.StringArrayOutput { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o SensorUpdatePolicyPrecedenceOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorUpdatePolicyPrecedence) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// That platform of the sensor update policies. (Windows, Mac, Linux)
func (o SensorUpdatePolicyPrecedenceOutput) PlatformName() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorUpdatePolicyPrecedence) pulumi.StringOutput { return v.PlatformName }).(pulumi.StringOutput)
}

type SensorUpdatePolicyPrecedenceArrayOutput struct{ *pulumi.OutputState }

func (SensorUpdatePolicyPrecedenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorUpdatePolicyPrecedence)(nil)).Elem()
}

func (o SensorUpdatePolicyPrecedenceArrayOutput) ToSensorUpdatePolicyPrecedenceArrayOutput() SensorUpdatePolicyPrecedenceArrayOutput {
	return o
}

func (o SensorUpdatePolicyPrecedenceArrayOutput) ToSensorUpdatePolicyPrecedenceArrayOutputWithContext(ctx context.Context) SensorUpdatePolicyPrecedenceArrayOutput {
	return o
}

func (o SensorUpdatePolicyPrecedenceArrayOutput) Index(i pulumi.IntInput) SensorUpdatePolicyPrecedenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SensorUpdatePolicyPrecedence {
		return vs[0].([]*SensorUpdatePolicyPrecedence)[vs[1].(int)]
	}).(SensorUpdatePolicyPrecedenceOutput)
}

type SensorUpdatePolicyPrecedenceMapOutput struct{ *pulumi.OutputState }

func (SensorUpdatePolicyPrecedenceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorUpdatePolicyPrecedence)(nil)).Elem()
}

func (o SensorUpdatePolicyPrecedenceMapOutput) ToSensorUpdatePolicyPrecedenceMapOutput() SensorUpdatePolicyPrecedenceMapOutput {
	return o
}

func (o SensorUpdatePolicyPrecedenceMapOutput) ToSensorUpdatePolicyPrecedenceMapOutputWithContext(ctx context.Context) SensorUpdatePolicyPrecedenceMapOutput {
	return o
}

func (o SensorUpdatePolicyPrecedenceMapOutput) MapIndex(k pulumi.StringInput) SensorUpdatePolicyPrecedenceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SensorUpdatePolicyPrecedence {
		return vs[0].(map[string]*SensorUpdatePolicyPrecedence)[vs[1].(string)]
	}).(SensorUpdatePolicyPrecedenceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensorUpdatePolicyPrecedenceInput)(nil)).Elem(), &SensorUpdatePolicyPrecedence{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorUpdatePolicyPrecedenceArrayInput)(nil)).Elem(), SensorUpdatePolicyPrecedenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorUpdatePolicyPrecedenceMapInput)(nil)).Elem(), SensorUpdatePolicyPrecedenceMap{})
	pulumi.RegisterOutputType(SensorUpdatePolicyPrecedenceOutput{})
	pulumi.RegisterOutputType(SensorUpdatePolicyPrecedenceArrayOutput{})
	pulumi.RegisterOutputType(SensorUpdatePolicyPrecedenceMapOutput{})
}
