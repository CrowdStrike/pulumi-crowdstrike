// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package crowdstrike

import (
	"context"
	"reflect"

	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides information about the latest sensor builds for each platform.
//
// ## API Scopes
//
// The following API scopes are required:
//
// - Sensor update policies | Write
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			builds, err := crowdstrike.GetSensorUpdatePolicyBuilds(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("latestWindowsBuild", builds.Windows.Latest)
//			ctx.Export("n1LinuxBuild", builds.Linux.N1)
//			ctx.Export("n2MacBuild", builds.Mac.N2)
//			ctx.Export("latestLinuxArm64Build", builds.LinuxArm64.Latest)
//			return nil
//		})
//	}
//
// ```
func GetSensorUpdatePolicyBuilds(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetSensorUpdatePolicyBuildsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSensorUpdatePolicyBuildsResult
	err := ctx.Invoke("crowdstrike:index/getSensorUpdatePolicyBuilds:getSensorUpdatePolicyBuilds", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getSensorUpdatePolicyBuilds.
type GetSensorUpdatePolicyBuildsResult struct {
	// Placeholder identifier.
	Id string `pulumi:"id"`
	// Builds for the Linux platform.
	Linux GetSensorUpdatePolicyBuildsLinux `pulumi:"linux"`
	// Builds for the Linux platform (arm64).
	LinuxArm64 GetSensorUpdatePolicyBuildsLinuxArm64 `pulumi:"linuxArm64"`
	// Builds for the Mac platform.
	Mac GetSensorUpdatePolicyBuildsMac `pulumi:"mac"`
	// Builds for the Windows platform.
	Windows GetSensorUpdatePolicyBuildsWindows `pulumi:"windows"`
}

func GetSensorUpdatePolicyBuildsOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetSensorUpdatePolicyBuildsResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetSensorUpdatePolicyBuildsResultOutput, error) {
		options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
		return ctx.InvokeOutput("crowdstrike:index/getSensorUpdatePolicyBuilds:getSensorUpdatePolicyBuilds", nil, GetSensorUpdatePolicyBuildsResultOutput{}, options).(GetSensorUpdatePolicyBuildsResultOutput), nil
	}).(GetSensorUpdatePolicyBuildsResultOutput)
}

// A collection of values returned by getSensorUpdatePolicyBuilds.
type GetSensorUpdatePolicyBuildsResultOutput struct{ *pulumi.OutputState }

func (GetSensorUpdatePolicyBuildsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSensorUpdatePolicyBuildsResult)(nil)).Elem()
}

func (o GetSensorUpdatePolicyBuildsResultOutput) ToGetSensorUpdatePolicyBuildsResultOutput() GetSensorUpdatePolicyBuildsResultOutput {
	return o
}

func (o GetSensorUpdatePolicyBuildsResultOutput) ToGetSensorUpdatePolicyBuildsResultOutputWithContext(ctx context.Context) GetSensorUpdatePolicyBuildsResultOutput {
	return o
}

// Placeholder identifier.
func (o GetSensorUpdatePolicyBuildsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSensorUpdatePolicyBuildsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Builds for the Linux platform.
func (o GetSensorUpdatePolicyBuildsResultOutput) Linux() GetSensorUpdatePolicyBuildsLinuxOutput {
	return o.ApplyT(func(v GetSensorUpdatePolicyBuildsResult) GetSensorUpdatePolicyBuildsLinux { return v.Linux }).(GetSensorUpdatePolicyBuildsLinuxOutput)
}

// Builds for the Linux platform (arm64).
func (o GetSensorUpdatePolicyBuildsResultOutput) LinuxArm64() GetSensorUpdatePolicyBuildsLinuxArm64Output {
	return o.ApplyT(func(v GetSensorUpdatePolicyBuildsResult) GetSensorUpdatePolicyBuildsLinuxArm64 { return v.LinuxArm64 }).(GetSensorUpdatePolicyBuildsLinuxArm64Output)
}

// Builds for the Mac platform.
func (o GetSensorUpdatePolicyBuildsResultOutput) Mac() GetSensorUpdatePolicyBuildsMacOutput {
	return o.ApplyT(func(v GetSensorUpdatePolicyBuildsResult) GetSensorUpdatePolicyBuildsMac { return v.Mac }).(GetSensorUpdatePolicyBuildsMacOutput)
}

// Builds for the Windows platform.
func (o GetSensorUpdatePolicyBuildsResultOutput) Windows() GetSensorUpdatePolicyBuildsWindowsOutput {
	return o.ApplyT(func(v GetSensorUpdatePolicyBuildsResult) GetSensorUpdatePolicyBuildsWindows { return v.Windows }).(GetSensorUpdatePolicyBuildsWindowsOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSensorUpdatePolicyBuildsResultOutput{})
}
