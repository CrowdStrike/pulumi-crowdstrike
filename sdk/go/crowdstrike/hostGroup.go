// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package crowdstrike

import (
	"context"
	"reflect"

	"errors"
	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to manage host groups in the CrowdStrike Falcon Platform.
//
// ## API Scopes
//
// The following API scopes are required:
//
// - Host groups | Read & Write
// - Firewall management | Read & Write
// - Prevention policies | Read & Write
// - Response policies | Read & Write
// - Sensor update policies | Read & Write
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			dynamic, err := crowdstrike.NewHostGroup(ctx, "dynamic", &crowdstrike.HostGroupArgs{
//				AssignmentRule: pulumi.String("tags:'SensorGroupingTags/molecule'+os_version:'Debian GNU 11'"),
//				Description:    pulumi.String("Made with Pulumi"),
//				Type:           pulumi.String("dynamic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = crowdstrike.NewHostGroup(ctx, "static", &crowdstrike.HostGroupArgs{
//				Description: pulumi.String("Made with Pulumi"),
//				Type:        pulumi.String("static"),
//				Hostnames: pulumi.StringArray{
//					pulumi.String("host1"),
//					pulumi.String("host2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = crowdstrike.NewHostGroup(ctx, "staticByID", &crowdstrike.HostGroupArgs{
//				Description: pulumi.String("Made with Pulumi"),
//				Type:        pulumi.String("staticByID"),
//				HostIds: pulumi.StringArray{
//					pulumi.String("123123"),
//					pulumi.String("124124"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("hostGroup", dynamic)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// host group can be imported by specifying the policy id.
//
// ```sh
// $ pulumi import crowdstrike:index/hostGroup:HostGroup example 7fb858a949034a0cbca175f660f1e769
// ```
type HostGroup struct {
	pulumi.CustomResourceState

	// The assignment rule for dynamic host groups.
	AssignmentRule pulumi.StringPtrOutput `pulumi:"assignmentRule"`
	// Description of the host group.
	Description pulumi.StringOutput `pulumi:"description"`
	// List of host ids to add to a staticByID host group.
	HostIds pulumi.StringArrayOutput `pulumi:"hostIds"`
	// List of hostnames to add to a static host group.
	Hostnames   pulumi.StringArrayOutput `pulumi:"hostnames"`
	LastUpdated pulumi.StringOutput      `pulumi:"lastUpdated"`
	// Name of the host group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The host group type, case sensitive. (dynamic, static, staticByID)
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewHostGroup registers a new resource with the given unique name, arguments, and options.
func NewHostGroup(ctx *pulumi.Context,
	name string, args *HostGroupArgs, opts ...pulumi.ResourceOption) (*HostGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostGroup
	err := ctx.RegisterResource("crowdstrike:index/hostGroup:HostGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostGroup gets an existing HostGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostGroupState, opts ...pulumi.ResourceOption) (*HostGroup, error) {
	var resource HostGroup
	err := ctx.ReadResource("crowdstrike:index/hostGroup:HostGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostGroup resources.
type hostGroupState struct {
	// The assignment rule for dynamic host groups.
	AssignmentRule *string `pulumi:"assignmentRule"`
	// Description of the host group.
	Description *string `pulumi:"description"`
	// List of host ids to add to a staticByID host group.
	HostIds []string `pulumi:"hostIds"`
	// List of hostnames to add to a static host group.
	Hostnames   []string `pulumi:"hostnames"`
	LastUpdated *string  `pulumi:"lastUpdated"`
	// Name of the host group.
	Name *string `pulumi:"name"`
	// The host group type, case sensitive. (dynamic, static, staticByID)
	Type *string `pulumi:"type"`
}

type HostGroupState struct {
	// The assignment rule for dynamic host groups.
	AssignmentRule pulumi.StringPtrInput
	// Description of the host group.
	Description pulumi.StringPtrInput
	// List of host ids to add to a staticByID host group.
	HostIds pulumi.StringArrayInput
	// List of hostnames to add to a static host group.
	Hostnames   pulumi.StringArrayInput
	LastUpdated pulumi.StringPtrInput
	// Name of the host group.
	Name pulumi.StringPtrInput
	// The host group type, case sensitive. (dynamic, static, staticByID)
	Type pulumi.StringPtrInput
}

func (HostGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostGroupState)(nil)).Elem()
}

type hostGroupArgs struct {
	// The assignment rule for dynamic host groups.
	AssignmentRule *string `pulumi:"assignmentRule"`
	// Description of the host group.
	Description string `pulumi:"description"`
	// List of host ids to add to a staticByID host group.
	HostIds []string `pulumi:"hostIds"`
	// List of hostnames to add to a static host group.
	Hostnames []string `pulumi:"hostnames"`
	// Name of the host group.
	Name *string `pulumi:"name"`
	// The host group type, case sensitive. (dynamic, static, staticByID)
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a HostGroup resource.
type HostGroupArgs struct {
	// The assignment rule for dynamic host groups.
	AssignmentRule pulumi.StringPtrInput
	// Description of the host group.
	Description pulumi.StringInput
	// List of host ids to add to a staticByID host group.
	HostIds pulumi.StringArrayInput
	// List of hostnames to add to a static host group.
	Hostnames pulumi.StringArrayInput
	// Name of the host group.
	Name pulumi.StringPtrInput
	// The host group type, case sensitive. (dynamic, static, staticByID)
	Type pulumi.StringInput
}

func (HostGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostGroupArgs)(nil)).Elem()
}

type HostGroupInput interface {
	pulumi.Input

	ToHostGroupOutput() HostGroupOutput
	ToHostGroupOutputWithContext(ctx context.Context) HostGroupOutput
}

func (*HostGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**HostGroup)(nil)).Elem()
}

func (i *HostGroup) ToHostGroupOutput() HostGroupOutput {
	return i.ToHostGroupOutputWithContext(context.Background())
}

func (i *HostGroup) ToHostGroupOutputWithContext(ctx context.Context) HostGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostGroupOutput)
}

// HostGroupArrayInput is an input type that accepts HostGroupArray and HostGroupArrayOutput values.
// You can construct a concrete instance of `HostGroupArrayInput` via:
//
//	HostGroupArray{ HostGroupArgs{...} }
type HostGroupArrayInput interface {
	pulumi.Input

	ToHostGroupArrayOutput() HostGroupArrayOutput
	ToHostGroupArrayOutputWithContext(context.Context) HostGroupArrayOutput
}

type HostGroupArray []HostGroupInput

func (HostGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostGroup)(nil)).Elem()
}

func (i HostGroupArray) ToHostGroupArrayOutput() HostGroupArrayOutput {
	return i.ToHostGroupArrayOutputWithContext(context.Background())
}

func (i HostGroupArray) ToHostGroupArrayOutputWithContext(ctx context.Context) HostGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostGroupArrayOutput)
}

// HostGroupMapInput is an input type that accepts HostGroupMap and HostGroupMapOutput values.
// You can construct a concrete instance of `HostGroupMapInput` via:
//
//	HostGroupMap{ "key": HostGroupArgs{...} }
type HostGroupMapInput interface {
	pulumi.Input

	ToHostGroupMapOutput() HostGroupMapOutput
	ToHostGroupMapOutputWithContext(context.Context) HostGroupMapOutput
}

type HostGroupMap map[string]HostGroupInput

func (HostGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostGroup)(nil)).Elem()
}

func (i HostGroupMap) ToHostGroupMapOutput() HostGroupMapOutput {
	return i.ToHostGroupMapOutputWithContext(context.Background())
}

func (i HostGroupMap) ToHostGroupMapOutputWithContext(ctx context.Context) HostGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostGroupMapOutput)
}

type HostGroupOutput struct{ *pulumi.OutputState }

func (HostGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostGroup)(nil)).Elem()
}

func (o HostGroupOutput) ToHostGroupOutput() HostGroupOutput {
	return o
}

func (o HostGroupOutput) ToHostGroupOutputWithContext(ctx context.Context) HostGroupOutput {
	return o
}

// The assignment rule for dynamic host groups.
func (o HostGroupOutput) AssignmentRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.StringPtrOutput { return v.AssignmentRule }).(pulumi.StringPtrOutput)
}

// Description of the host group.
func (o HostGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of host ids to add to a staticByID host group.
func (o HostGroupOutput) HostIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.StringArrayOutput { return v.HostIds }).(pulumi.StringArrayOutput)
}

// List of hostnames to add to a static host group.
func (o HostGroupOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.StringArrayOutput { return v.Hostnames }).(pulumi.StringArrayOutput)
}

func (o HostGroupOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// Name of the host group.
func (o HostGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The host group type, case sensitive. (dynamic, static, staticByID)
func (o HostGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type HostGroupArrayOutput struct{ *pulumi.OutputState }

func (HostGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostGroup)(nil)).Elem()
}

func (o HostGroupArrayOutput) ToHostGroupArrayOutput() HostGroupArrayOutput {
	return o
}

func (o HostGroupArrayOutput) ToHostGroupArrayOutputWithContext(ctx context.Context) HostGroupArrayOutput {
	return o
}

func (o HostGroupArrayOutput) Index(i pulumi.IntInput) HostGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostGroup {
		return vs[0].([]*HostGroup)[vs[1].(int)]
	}).(HostGroupOutput)
}

type HostGroupMapOutput struct{ *pulumi.OutputState }

func (HostGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostGroup)(nil)).Elem()
}

func (o HostGroupMapOutput) ToHostGroupMapOutput() HostGroupMapOutput {
	return o
}

func (o HostGroupMapOutput) ToHostGroupMapOutputWithContext(ctx context.Context) HostGroupMapOutput {
	return o
}

func (o HostGroupMapOutput) MapIndex(k pulumi.StringInput) HostGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostGroup {
		return vs[0].(map[string]*HostGroup)[vs[1].(string)]
	}).(HostGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostGroupInput)(nil)).Elem(), &HostGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostGroupArrayInput)(nil)).Elem(), HostGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostGroupMapInput)(nil)).Elem(), HostGroupMap{})
	pulumi.RegisterOutputType(HostGroupOutput{})
	pulumi.RegisterOutputType(HostGroupArrayOutput{})
	pulumi.RegisterOutputType(HostGroupMapOutput{})
}
