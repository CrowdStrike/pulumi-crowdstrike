// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package crowdstrike

import (
	"context"
	"reflect"

	"errors"
	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to manage the default prevention policy for Linux hosts. Prevention policies allow you to manage what activity will trigger detections and preventions on your hosts. Destruction of this resource *will not* delete the default prevention policy or remove any configured settings.
//
// ## API Scopes
//
// The following API scopes are required:
//
// - Prevention policies | Read & Write
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := crowdstrike.NewDefaultPreventionPolicyLinux(ctx, "default", &crowdstrike.DefaultPreventionPolicyLinuxArgs{
//				Description:   pulumi.String("managed by terraform"),
//				IoaRuleGroups: pulumi.StringArray{},
//				CloudAntiMalware: &crowdstrike.DefaultPreventionPolicyLinuxCloudAntiMalwareArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("CAUTIOUS"),
//				},
//				SensorAntiMalware: &crowdstrike.DefaultPreventionPolicyLinuxSensorAntiMalwareArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("CAUTIOUS"),
//				},
//				Quarantine:                               pulumi.Bool(true),
//				CustomBlocking:                           pulumi.Bool(true),
//				PreventSuspiciousProcesses:               pulumi.Bool(true),
//				ScriptBasedExecutionMonitoring:           pulumi.Bool(true),
//				UploadUnknownExecutables:                 pulumi.Bool(true),
//				UploadUnknownDetectionRelatedExecutables: pulumi.Bool(true),
//				DriftPrevention:                          pulumi.Bool(true),
//				EmailProtocolVisibility:                  pulumi.Bool(true),
//				FilesystemVisibility:                     pulumi.Bool(true),
//				FtpVisibility:                            pulumi.Bool(true),
//				HttpVisibility:                           pulumi.Bool(true),
//				NetworkVisibility:                        pulumi.Bool(true),
//				TlsVisibility:                            pulumi.Bool(true),
//				SensorTamperingProtection:                pulumi.Bool(true),
//				OnWriteScriptFileVisibility:              pulumi.Bool(true),
//				MemoryVisibility:                         pulumi.Bool(true),
//				ExtendedCommandLineVisibility:            pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("defaultPreventionPolicyLinux", _default)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The mac default prevention policy can be imported by specifying the id.
//
// ```sh
// $ pulumi import crowdstrike:index/defaultPreventionPolicyLinux:DefaultPreventionPolicyLinux default 7fb858a949034a0cbca175f660f1e769
// ```
type DefaultPreventionPolicyLinux struct {
	pulumi.CustomResourceState

	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware DefaultPreventionPolicyLinuxCloudAntiMalwareOutput `pulumi:"cloudAntiMalware"`
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking pulumi.BoolOutput `pulumi:"customBlocking"`
	// Description of the prevention policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
	DriftPrevention pulumi.BoolOutput `pulumi:"driftPrevention"`
	// Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
	EmailProtocolVisibility pulumi.BoolOutput `pulumi:"emailProtocolVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor full CLI commands that include pipes and redirects. This is applicable only for User mode.
	ExtendedCommandLineVisibility pulumi.BoolOutput `pulumi:"extendedCommandLineVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
	FilesystemVisibility pulumi.BoolOutput `pulumi:"filesystemVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
	FtpVisibility pulumi.BoolOutput `pulumi:"ftpVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
	HttpVisibility pulumi.BoolOutput `pulumi:"httpVisibility"`
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups pulumi.StringArrayOutput `pulumi:"ioaRuleGroups"`
	LastUpdated   pulumi.StringOutput      `pulumi:"lastUpdated"`
	// Whether to enable the setting. When enabled, the sensor will inspect memory-related operations: mmap, mprotect, ptrace and reading/writing remote process memory and produce events.
	MemoryVisibility pulumi.BoolOutput `pulumi:"memoryVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
	NetworkVisibility pulumi.BoolOutput `pulumi:"networkVisibility"`
	// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
	OnWriteScriptFileVisibility pulumi.BoolOutput `pulumi:"onWriteScriptFileVisibility"`
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses pulumi.BoolOutput `pulumi:"preventSuspiciousProcesses"`
	// Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine pulumi.BoolOutput `pulumi:"quarantine"`
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring pulumi.BoolOutput `pulumi:"scriptBasedExecutionMonitoring"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware DefaultPreventionPolicyLinuxSensorAntiMalwareOutput `pulumi:"sensorAntiMalware"`
	// Whether to enable the setting. Block attempts to tamper with the sensor by protecting critical components and resources. If disabled, the sensor still creates detections for tampering attempts but will not prevent the activity from occurring. Disabling is not recommended.
	SensorTamperingProtection pulumi.BoolOutput `pulumi:"sensorTamperingProtection"`
	// Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
	TlsVisibility pulumi.BoolOutput `pulumi:"tlsVisibility"`
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables pulumi.BoolOutput `pulumi:"uploadUnknownDetectionRelatedExecutables"`
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables pulumi.BoolOutput `pulumi:"uploadUnknownExecutables"`
}

// NewDefaultPreventionPolicyLinux registers a new resource with the given unique name, arguments, and options.
func NewDefaultPreventionPolicyLinux(ctx *pulumi.Context,
	name string, args *DefaultPreventionPolicyLinuxArgs, opts ...pulumi.ResourceOption) (*DefaultPreventionPolicyLinux, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IoaRuleGroups == nil {
		return nil, errors.New("invalid value for required argument 'IoaRuleGroups'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DefaultPreventionPolicyLinux
	err := ctx.RegisterResource("crowdstrike:index/defaultPreventionPolicyLinux:DefaultPreventionPolicyLinux", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultPreventionPolicyLinux gets an existing DefaultPreventionPolicyLinux resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultPreventionPolicyLinux(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefaultPreventionPolicyLinuxState, opts ...pulumi.ResourceOption) (*DefaultPreventionPolicyLinux, error) {
	var resource DefaultPreventionPolicyLinux
	err := ctx.ReadResource("crowdstrike:index/defaultPreventionPolicyLinux:DefaultPreventionPolicyLinux", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefaultPreventionPolicyLinux resources.
type defaultPreventionPolicyLinuxState struct {
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware *DefaultPreventionPolicyLinuxCloudAntiMalware `pulumi:"cloudAntiMalware"`
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking *bool `pulumi:"customBlocking"`
	// Description of the prevention policy.
	Description *string `pulumi:"description"`
	// Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
	DriftPrevention *bool `pulumi:"driftPrevention"`
	// Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
	EmailProtocolVisibility *bool `pulumi:"emailProtocolVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor full CLI commands that include pipes and redirects. This is applicable only for User mode.
	ExtendedCommandLineVisibility *bool `pulumi:"extendedCommandLineVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
	FilesystemVisibility *bool `pulumi:"filesystemVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
	FtpVisibility *bool `pulumi:"ftpVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
	HttpVisibility *bool `pulumi:"httpVisibility"`
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups []string `pulumi:"ioaRuleGroups"`
	LastUpdated   *string  `pulumi:"lastUpdated"`
	// Whether to enable the setting. When enabled, the sensor will inspect memory-related operations: mmap, mprotect, ptrace and reading/writing remote process memory and produce events.
	MemoryVisibility *bool `pulumi:"memoryVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
	NetworkVisibility *bool `pulumi:"networkVisibility"`
	// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
	OnWriteScriptFileVisibility *bool `pulumi:"onWriteScriptFileVisibility"`
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses *bool `pulumi:"preventSuspiciousProcesses"`
	// Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine *bool `pulumi:"quarantine"`
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring *bool `pulumi:"scriptBasedExecutionMonitoring"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware *DefaultPreventionPolicyLinuxSensorAntiMalware `pulumi:"sensorAntiMalware"`
	// Whether to enable the setting. Block attempts to tamper with the sensor by protecting critical components and resources. If disabled, the sensor still creates detections for tampering attempts but will not prevent the activity from occurring. Disabling is not recommended.
	SensorTamperingProtection *bool `pulumi:"sensorTamperingProtection"`
	// Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
	TlsVisibility *bool `pulumi:"tlsVisibility"`
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables *bool `pulumi:"uploadUnknownDetectionRelatedExecutables"`
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables *bool `pulumi:"uploadUnknownExecutables"`
}

type DefaultPreventionPolicyLinuxState struct {
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware DefaultPreventionPolicyLinuxCloudAntiMalwarePtrInput
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking pulumi.BoolPtrInput
	// Description of the prevention policy.
	Description pulumi.StringPtrInput
	// Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
	DriftPrevention pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
	EmailProtocolVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor full CLI commands that include pipes and redirects. This is applicable only for User mode.
	ExtendedCommandLineVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
	FilesystemVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
	FtpVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
	HttpVisibility pulumi.BoolPtrInput
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups pulumi.StringArrayInput
	LastUpdated   pulumi.StringPtrInput
	// Whether to enable the setting. When enabled, the sensor will inspect memory-related operations: mmap, mprotect, ptrace and reading/writing remote process memory and produce events.
	MemoryVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
	NetworkVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
	OnWriteScriptFileVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses pulumi.BoolPtrInput
	// Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring pulumi.BoolPtrInput
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware DefaultPreventionPolicyLinuxSensorAntiMalwarePtrInput
	// Whether to enable the setting. Block attempts to tamper with the sensor by protecting critical components and resources. If disabled, the sensor still creates detections for tampering attempts but will not prevent the activity from occurring. Disabling is not recommended.
	SensorTamperingProtection pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
	TlsVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables pulumi.BoolPtrInput
}

func (DefaultPreventionPolicyLinuxState) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultPreventionPolicyLinuxState)(nil)).Elem()
}

type defaultPreventionPolicyLinuxArgs struct {
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware *DefaultPreventionPolicyLinuxCloudAntiMalware `pulumi:"cloudAntiMalware"`
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking *bool `pulumi:"customBlocking"`
	// Description of the prevention policy.
	Description *string `pulumi:"description"`
	// Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
	DriftPrevention *bool `pulumi:"driftPrevention"`
	// Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
	EmailProtocolVisibility *bool `pulumi:"emailProtocolVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor full CLI commands that include pipes and redirects. This is applicable only for User mode.
	ExtendedCommandLineVisibility *bool `pulumi:"extendedCommandLineVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
	FilesystemVisibility *bool `pulumi:"filesystemVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
	FtpVisibility *bool `pulumi:"ftpVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
	HttpVisibility *bool `pulumi:"httpVisibility"`
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups []string `pulumi:"ioaRuleGroups"`
	// Whether to enable the setting. When enabled, the sensor will inspect memory-related operations: mmap, mprotect, ptrace and reading/writing remote process memory and produce events.
	MemoryVisibility *bool `pulumi:"memoryVisibility"`
	// Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
	NetworkVisibility *bool `pulumi:"networkVisibility"`
	// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
	OnWriteScriptFileVisibility *bool `pulumi:"onWriteScriptFileVisibility"`
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses *bool `pulumi:"preventSuspiciousProcesses"`
	// Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine *bool `pulumi:"quarantine"`
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring *bool `pulumi:"scriptBasedExecutionMonitoring"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware *DefaultPreventionPolicyLinuxSensorAntiMalware `pulumi:"sensorAntiMalware"`
	// Whether to enable the setting. Block attempts to tamper with the sensor by protecting critical components and resources. If disabled, the sensor still creates detections for tampering attempts but will not prevent the activity from occurring. Disabling is not recommended.
	SensorTamperingProtection *bool `pulumi:"sensorTamperingProtection"`
	// Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
	TlsVisibility *bool `pulumi:"tlsVisibility"`
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables *bool `pulumi:"uploadUnknownDetectionRelatedExecutables"`
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables *bool `pulumi:"uploadUnknownExecutables"`
}

// The set of arguments for constructing a DefaultPreventionPolicyLinux resource.
type DefaultPreventionPolicyLinuxArgs struct {
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware DefaultPreventionPolicyLinuxCloudAntiMalwarePtrInput
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking pulumi.BoolPtrInput
	// Description of the prevention policy.
	Description pulumi.StringPtrInput
	// Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
	DriftPrevention pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
	EmailProtocolVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor full CLI commands that include pipes and redirects. This is applicable only for User mode.
	ExtendedCommandLineVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
	FilesystemVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
	FtpVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
	HttpVisibility pulumi.BoolPtrInput
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups pulumi.StringArrayInput
	// Whether to enable the setting. When enabled, the sensor will inspect memory-related operations: mmap, mprotect, ptrace and reading/writing remote process memory and produce events.
	MemoryVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
	NetworkVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
	OnWriteScriptFileVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses pulumi.BoolPtrInput
	// Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
	Quarantine pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
	ScriptBasedExecutionMonitoring pulumi.BoolPtrInput
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware DefaultPreventionPolicyLinuxSensorAntiMalwarePtrInput
	// Whether to enable the setting. Block attempts to tamper with the sensor by protecting critical components and resources. If disabled, the sensor still creates detections for tampering attempts but will not prevent the activity from occurring. Disabling is not recommended.
	SensorTamperingProtection pulumi.BoolPtrInput
	// Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
	TlsVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables pulumi.BoolPtrInput
}

func (DefaultPreventionPolicyLinuxArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultPreventionPolicyLinuxArgs)(nil)).Elem()
}

type DefaultPreventionPolicyLinuxInput interface {
	pulumi.Input

	ToDefaultPreventionPolicyLinuxOutput() DefaultPreventionPolicyLinuxOutput
	ToDefaultPreventionPolicyLinuxOutputWithContext(ctx context.Context) DefaultPreventionPolicyLinuxOutput
}

func (*DefaultPreventionPolicyLinux) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultPreventionPolicyLinux)(nil)).Elem()
}

func (i *DefaultPreventionPolicyLinux) ToDefaultPreventionPolicyLinuxOutput() DefaultPreventionPolicyLinuxOutput {
	return i.ToDefaultPreventionPolicyLinuxOutputWithContext(context.Background())
}

func (i *DefaultPreventionPolicyLinux) ToDefaultPreventionPolicyLinuxOutputWithContext(ctx context.Context) DefaultPreventionPolicyLinuxOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultPreventionPolicyLinuxOutput)
}

// DefaultPreventionPolicyLinuxArrayInput is an input type that accepts DefaultPreventionPolicyLinuxArray and DefaultPreventionPolicyLinuxArrayOutput values.
// You can construct a concrete instance of `DefaultPreventionPolicyLinuxArrayInput` via:
//
//	DefaultPreventionPolicyLinuxArray{ DefaultPreventionPolicyLinuxArgs{...} }
type DefaultPreventionPolicyLinuxArrayInput interface {
	pulumi.Input

	ToDefaultPreventionPolicyLinuxArrayOutput() DefaultPreventionPolicyLinuxArrayOutput
	ToDefaultPreventionPolicyLinuxArrayOutputWithContext(context.Context) DefaultPreventionPolicyLinuxArrayOutput
}

type DefaultPreventionPolicyLinuxArray []DefaultPreventionPolicyLinuxInput

func (DefaultPreventionPolicyLinuxArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultPreventionPolicyLinux)(nil)).Elem()
}

func (i DefaultPreventionPolicyLinuxArray) ToDefaultPreventionPolicyLinuxArrayOutput() DefaultPreventionPolicyLinuxArrayOutput {
	return i.ToDefaultPreventionPolicyLinuxArrayOutputWithContext(context.Background())
}

func (i DefaultPreventionPolicyLinuxArray) ToDefaultPreventionPolicyLinuxArrayOutputWithContext(ctx context.Context) DefaultPreventionPolicyLinuxArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultPreventionPolicyLinuxArrayOutput)
}

// DefaultPreventionPolicyLinuxMapInput is an input type that accepts DefaultPreventionPolicyLinuxMap and DefaultPreventionPolicyLinuxMapOutput values.
// You can construct a concrete instance of `DefaultPreventionPolicyLinuxMapInput` via:
//
//	DefaultPreventionPolicyLinuxMap{ "key": DefaultPreventionPolicyLinuxArgs{...} }
type DefaultPreventionPolicyLinuxMapInput interface {
	pulumi.Input

	ToDefaultPreventionPolicyLinuxMapOutput() DefaultPreventionPolicyLinuxMapOutput
	ToDefaultPreventionPolicyLinuxMapOutputWithContext(context.Context) DefaultPreventionPolicyLinuxMapOutput
}

type DefaultPreventionPolicyLinuxMap map[string]DefaultPreventionPolicyLinuxInput

func (DefaultPreventionPolicyLinuxMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultPreventionPolicyLinux)(nil)).Elem()
}

func (i DefaultPreventionPolicyLinuxMap) ToDefaultPreventionPolicyLinuxMapOutput() DefaultPreventionPolicyLinuxMapOutput {
	return i.ToDefaultPreventionPolicyLinuxMapOutputWithContext(context.Background())
}

func (i DefaultPreventionPolicyLinuxMap) ToDefaultPreventionPolicyLinuxMapOutputWithContext(ctx context.Context) DefaultPreventionPolicyLinuxMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultPreventionPolicyLinuxMapOutput)
}

type DefaultPreventionPolicyLinuxOutput struct{ *pulumi.OutputState }

func (DefaultPreventionPolicyLinuxOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultPreventionPolicyLinux)(nil)).Elem()
}

func (o DefaultPreventionPolicyLinuxOutput) ToDefaultPreventionPolicyLinuxOutput() DefaultPreventionPolicyLinuxOutput {
	return o
}

func (o DefaultPreventionPolicyLinuxOutput) ToDefaultPreventionPolicyLinuxOutputWithContext(ctx context.Context) DefaultPreventionPolicyLinuxOutput {
	return o
}

// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
func (o DefaultPreventionPolicyLinuxOutput) CloudAntiMalware() DefaultPreventionPolicyLinuxCloudAntiMalwareOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) DefaultPreventionPolicyLinuxCloudAntiMalwareOutput {
		return v.CloudAntiMalware
	}).(DefaultPreventionPolicyLinuxCloudAntiMalwareOutput)
}

// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
func (o DefaultPreventionPolicyLinuxOutput) CustomBlocking() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.CustomBlocking }).(pulumi.BoolOutput)
}

// Description of the prevention policy.
func (o DefaultPreventionPolicyLinuxOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
func (o DefaultPreventionPolicyLinuxOutput) DriftPrevention() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.DriftPrevention }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
func (o DefaultPreventionPolicyLinuxOutput) EmailProtocolVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.EmailProtocolVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Allows the sensor to monitor full CLI commands that include pipes and redirects. This is applicable only for User mode.
func (o DefaultPreventionPolicyLinuxOutput) ExtendedCommandLineVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.ExtendedCommandLineVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
func (o DefaultPreventionPolicyLinuxOutput) FilesystemVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.FilesystemVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
func (o DefaultPreventionPolicyLinuxOutput) FtpVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.FtpVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
func (o DefaultPreventionPolicyLinuxOutput) HttpVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.HttpVisibility }).(pulumi.BoolOutput)
}

// IOA Rule Group to attach to the prevention policy.
func (o DefaultPreventionPolicyLinuxOutput) IoaRuleGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.StringArrayOutput { return v.IoaRuleGroups }).(pulumi.StringArrayOutput)
}

func (o DefaultPreventionPolicyLinuxOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// Whether to enable the setting. When enabled, the sensor will inspect memory-related operations: mmap, mprotect, ptrace and reading/writing remote process memory and produce events.
func (o DefaultPreventionPolicyLinuxOutput) MemoryVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.MemoryVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
func (o DefaultPreventionPolicyLinuxOutput) NetworkVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.NetworkVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
func (o DefaultPreventionPolicyLinuxOutput) OnWriteScriptFileVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.OnWriteScriptFileVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
func (o DefaultPreventionPolicyLinuxOutput) PreventSuspiciousProcesses() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.PreventSuspiciousProcesses }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
func (o DefaultPreventionPolicyLinuxOutput) Quarantine() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.Quarantine }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
func (o DefaultPreventionPolicyLinuxOutput) ScriptBasedExecutionMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.ScriptBasedExecutionMonitoring }).(pulumi.BoolOutput)
}

// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
func (o DefaultPreventionPolicyLinuxOutput) SensorAntiMalware() DefaultPreventionPolicyLinuxSensorAntiMalwareOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) DefaultPreventionPolicyLinuxSensorAntiMalwareOutput {
		return v.SensorAntiMalware
	}).(DefaultPreventionPolicyLinuxSensorAntiMalwareOutput)
}

// Whether to enable the setting. Block attempts to tamper with the sensor by protecting critical components and resources. If disabled, the sensor still creates detections for tampering attempts but will not prevent the activity from occurring. Disabling is not recommended.
func (o DefaultPreventionPolicyLinuxOutput) SensorTamperingProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.SensorTamperingProtection }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
func (o DefaultPreventionPolicyLinuxOutput) TlsVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.TlsVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
func (o DefaultPreventionPolicyLinuxOutput) UploadUnknownDetectionRelatedExecutables() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput {
		return v.UploadUnknownDetectionRelatedExecutables
	}).(pulumi.BoolOutput)
}

// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
func (o DefaultPreventionPolicyLinuxOutput) UploadUnknownExecutables() pulumi.BoolOutput {
	return o.ApplyT(func(v *DefaultPreventionPolicyLinux) pulumi.BoolOutput { return v.UploadUnknownExecutables }).(pulumi.BoolOutput)
}

type DefaultPreventionPolicyLinuxArrayOutput struct{ *pulumi.OutputState }

func (DefaultPreventionPolicyLinuxArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultPreventionPolicyLinux)(nil)).Elem()
}

func (o DefaultPreventionPolicyLinuxArrayOutput) ToDefaultPreventionPolicyLinuxArrayOutput() DefaultPreventionPolicyLinuxArrayOutput {
	return o
}

func (o DefaultPreventionPolicyLinuxArrayOutput) ToDefaultPreventionPolicyLinuxArrayOutputWithContext(ctx context.Context) DefaultPreventionPolicyLinuxArrayOutput {
	return o
}

func (o DefaultPreventionPolicyLinuxArrayOutput) Index(i pulumi.IntInput) DefaultPreventionPolicyLinuxOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DefaultPreventionPolicyLinux {
		return vs[0].([]*DefaultPreventionPolicyLinux)[vs[1].(int)]
	}).(DefaultPreventionPolicyLinuxOutput)
}

type DefaultPreventionPolicyLinuxMapOutput struct{ *pulumi.OutputState }

func (DefaultPreventionPolicyLinuxMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultPreventionPolicyLinux)(nil)).Elem()
}

func (o DefaultPreventionPolicyLinuxMapOutput) ToDefaultPreventionPolicyLinuxMapOutput() DefaultPreventionPolicyLinuxMapOutput {
	return o
}

func (o DefaultPreventionPolicyLinuxMapOutput) ToDefaultPreventionPolicyLinuxMapOutputWithContext(ctx context.Context) DefaultPreventionPolicyLinuxMapOutput {
	return o
}

func (o DefaultPreventionPolicyLinuxMapOutput) MapIndex(k pulumi.StringInput) DefaultPreventionPolicyLinuxOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DefaultPreventionPolicyLinux {
		return vs[0].(map[string]*DefaultPreventionPolicyLinux)[vs[1].(string)]
	}).(DefaultPreventionPolicyLinuxOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultPreventionPolicyLinuxInput)(nil)).Elem(), &DefaultPreventionPolicyLinux{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultPreventionPolicyLinuxArrayInput)(nil)).Elem(), DefaultPreventionPolicyLinuxArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultPreventionPolicyLinuxMapInput)(nil)).Elem(), DefaultPreventionPolicyLinuxMap{})
	pulumi.RegisterOutputType(DefaultPreventionPolicyLinuxOutput{})
	pulumi.RegisterOutputType(DefaultPreventionPolicyLinuxArrayOutput{})
	pulumi.RegisterOutputType(DefaultPreventionPolicyLinuxMapOutput{})
}
