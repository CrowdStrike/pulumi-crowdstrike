// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package crowdstrike

import (
	"context"
	"reflect"

	"errors"
	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to manage prevention policies for Windows hosts. Prevention policies allow you to manage what activity will trigger detections and preventions on your hosts.
//
// ## API Scopes
//
// The following API scopes are required:
//
// - Prevention policies | Read & Write
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := crowdstrike.NewPreventionPolicyWindows(ctx, "example", &crowdstrike.PreventionPolicyWindowsArgs{
//				Enabled:       pulumi.Bool(true),
//				Description:   pulumi.String("Made with Pulumi"),
//				HostGroups:    pulumi.StringArray{},
//				IoaRuleGroups: pulumi.StringArray{},
//				AdwareAndPup: &crowdstrike.PreventionPolicyWindowsAdwareAndPupArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("CAUTIOUS"),
//				},
//				CloudAntiMalwareMicrosoftOfficeFiles: &crowdstrike.PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("DISABLED"),
//				},
//				CloudAntiMalware: &crowdstrike.PreventionPolicyWindowsCloudAntiMalwareArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("CAUTIOUS"),
//				},
//				CloudAntiMalwareUserInitiated: &crowdstrike.PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("CAUTIOUS"),
//				},
//				SensorAntiMalware: &crowdstrike.PreventionPolicyWindowsSensorAntiMalwareArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("CAUTIOUS"),
//				},
//				SensorAntiMalwareUserInitiated: &crowdstrike.PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs{
//					Detection:  pulumi.String("MODERATE"),
//					Prevention: pulumi.String("CAUTIOUS"),
//				},
//				ExtendedUserModeData: &crowdstrike.PreventionPolicyWindowsExtendedUserModeDataArgs{
//					Detection: pulumi.String("MODERATE"),
//				},
//				UsbInsertionTriggeredScan:                 pulumi.Bool(true),
//				ApplicationExploitationActivity:           pulumi.Bool(true),
//				AdditionalUserModeData:                    pulumi.Bool(true),
//				NotifyEndUsers:                            pulumi.Bool(true),
//				AdvancedRemediation:                       pulumi.Bool(true),
//				BackupDeletion:                            pulumi.Bool(true),
//				BiosDeepVisibility:                        pulumi.Bool(true),
//				ChopperWebshell:                           pulumi.Bool(true),
//				CodeInjection:                             pulumi.Bool(true),
//				CredentialDumping:                         pulumi.Bool(true),
//				Cryptowall:                                pulumi.Bool(true),
//				CustomBlocking:                            pulumi.Bool(true),
//				DetectOnWrite:                             pulumi.Bool(true),
//				DriveByDownload:                           pulumi.Bool(true),
//				DriverLoadPrevention:                      pulumi.Bool(true),
//				InterpreterOnly:                           pulumi.Bool(true),
//				EngineFullVisibility:                      pulumi.Bool(true),
//				EnhancedExploitationVisibility:            pulumi.Bool(true),
//				EnhancedDllLoadVisibility:                 pulumi.Bool(true),
//				EnhancedMlForLargerFiles:                  pulumi.Bool(true),
//				FileEncryption:                            pulumi.Bool(true),
//				FileSystemAccess:                          pulumi.Bool(true),
//				ForceAslr:                                 pulumi.Bool(true),
//				ForceDep:                                  pulumi.Bool(true),
//				HeapSprayPreallocation:                    pulumi.Bool(true),
//				NullPageAllocation:                        pulumi.Bool(true),
//				SehOverwriteProtection:                    pulumi.Bool(true),
//				HardwareEnhancedExploitDetection:          pulumi.Bool(true),
//				HttpDetections:                            pulumi.Bool(true),
//				RedactHttpDetectionDetails:                pulumi.Bool(true),
//				IntelligenceSourcedThreats:                pulumi.Bool(true),
//				JavascriptViaRundll32:                     pulumi.Bool(true),
//				Locky:                                     pulumi.Bool(true),
//				MemoryScanning:                            pulumi.Bool(true),
//				MemoryScanningScanWithCpu:                 pulumi.Bool(true),
//				MicrosoftOfficeFileSuspiciousMacroRemoval: pulumi.Bool(true),
//				OnWriteScriptFileVisibility:               pulumi.Bool(true),
//				PreventSuspiciousProcesses:                pulumi.Bool(true),
//				QuarantineAndSecurityCenterRegistration:   pulumi.Bool(true),
//				QuarantineOnRemovableMedia:                pulumi.Bool(true),
//				QuarantineOnWrite:                         pulumi.Bool(true),
//				ScriptBasedExecutionMonitoring:            pulumi.Bool(true),
//				SensorTamperingProtection:                 pulumi.Bool(true),
//				SuspiciousRegistryOperations:              pulumi.Bool(true),
//				SuspiciousScriptsAndCommands:              pulumi.Bool(true),
//				UploadUnknownExecutables:                  pulumi.Bool(true),
//				UploadUnknownDetectionRelatedExecutables:  pulumi.Bool(true),
//				VolumeShadowCopyAudit:                     pulumi.Bool(true),
//				VolumeShadowCopyProtect:                   pulumi.Bool(true),
//				VulnerableDriverProtection:                pulumi.Bool(true),
//				WindowsLogonBypassStickyKeys:              pulumi.Bool(true),
//				FileSystemContainment:                     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("preventionPolicyWindows", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// prevention policy can be imported by specifying the policy id.
//
// ```sh
// $ pulumi import crowdstrike:index/preventionPolicyWindows:PreventionPolicyWindows example 7fb858a949034a0cbca175f660f1e769
// ```
type PreventionPolicyWindows struct {
	pulumi.CustomResourceState

	// Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
	AdditionalUserModeData pulumi.BoolOutput `pulumi:"additionalUserModeData"`
	// Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
	AdvancedRemediation pulumi.BoolOutput `pulumi:"advancedRemediation"`
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
	AdwareAndPup PreventionPolicyWindowsAdwareAndPupOutput `pulumi:"adwareAndPup"`
	// Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
	ApplicationExploitationActivity pulumi.BoolOutput `pulumi:"applicationExploitationActivity"`
	// Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
	BackupDeletion pulumi.BoolOutput `pulumi:"backupDeletion"`
	// Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
	BiosDeepVisibility pulumi.BoolOutput `pulumi:"biosDeepVisibility"`
	// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
	ChopperWebshell pulumi.BoolOutput `pulumi:"chopperWebshell"`
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware PreventionPolicyWindowsCloudAntiMalwareOutput `pulumi:"cloudAntiMalware"`
	// Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
	CloudAntiMalwareMicrosoftOfficeFiles PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesOutput `pulumi:"cloudAntiMalwareMicrosoftOfficeFiles"`
	// For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
	CloudAntiMalwareUserInitiated PreventionPolicyWindowsCloudAntiMalwareUserInitiatedOutput `pulumi:"cloudAntiMalwareUserInitiated"`
	// Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
	CodeInjection pulumi.BoolOutput `pulumi:"codeInjection"`
	// Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
	CredentialDumping pulumi.BoolOutput `pulumi:"credentialDumping"`
	// Whether to enable the setting. A process associated with Cryptowall was blocked.
	Cryptowall pulumi.BoolOutput `pulumi:"cryptowall"`
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking pulumi.BoolOutput `pulumi:"customBlocking"`
	// Description of the prevention policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
	DetectOnWrite pulumi.BoolOutput `pulumi:"detectOnWrite"`
	// Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
	DriveByDownload pulumi.BoolOutput `pulumi:"driveByDownload"`
	// Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
	DriverLoadPrevention pulumi.BoolOutput `pulumi:"driverLoadPrevention"`
	// Enable the prevention policy.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreterOnly to be enabled.
	EngineFullVisibility pulumi.BoolOutput `pulumi:"engineFullVisibility"`
	// Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
	EnhancedDllLoadVisibility pulumi.BoolOutput `pulumi:"enhancedDllLoadVisibility"`
	// Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
	EnhancedExploitationVisibility pulumi.BoolOutput `pulumi:"enhancedExploitationVisibility"`
	// Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
	EnhancedMlForLargerFiles pulumi.BoolOutput `pulumi:"enhancedMlForLargerFiles"`
	// Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
	ExtendedUserModeData PreventionPolicyWindowsExtendedUserModeDataOutput `pulumi:"extendedUserModeData"`
	// Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
	FileEncryption pulumi.BoolOutput `pulumi:"fileEncryption"`
	// Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
	FileSystemAccess pulumi.BoolOutput `pulumi:"fileSystemAccess"`
	// Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
	FileSystemContainment pulumi.BoolOutput `pulumi:"fileSystemContainment"`
	// Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	ForceAslr pulumi.BoolOutput `pulumi:"forceAslr"`
	// Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
	ForceDep pulumi.BoolOutput `pulumi:"forceDep"`
	// Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
	HardwareEnhancedExploitDetection pulumi.BoolOutput `pulumi:"hardwareEnhancedExploitDetection"`
	// Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	HeapSprayPreallocation pulumi.BoolOutput `pulumi:"heapSprayPreallocation"`
	// Host Group ids to attach to the prevention policy.
	HostGroups pulumi.StringArrayOutput `pulumi:"hostGroups"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
	HttpDetections pulumi.BoolOutput `pulumi:"httpDetections"`
	// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
	IntelligenceSourcedThreats pulumi.BoolOutput `pulumi:"intelligenceSourcedThreats"`
	// Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
	InterpreterOnly pulumi.BoolOutput `pulumi:"interpreterOnly"`
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups pulumi.StringArrayOutput `pulumi:"ioaRuleGroups"`
	// Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
	JavascriptViaRundll32 pulumi.BoolOutput   `pulumi:"javascriptViaRundll32"`
	LastUpdated           pulumi.StringOutput `pulumi:"lastUpdated"`
	// Whether to enable the setting. A process determined to be associated with Locky was blocked.
	Locky pulumi.BoolOutput `pulumi:"locky"`
	// Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
	MemoryScanning pulumi.BoolOutput `pulumi:"memoryScanning"`
	// Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
	MemoryScanningScanWithCpu pulumi.BoolOutput `pulumi:"memoryScanningScanWithCpu"`
	// Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
	MicrosoftOfficeFileSuspiciousMacroRemoval pulumi.BoolOutput `pulumi:"microsoftOfficeFileSuspiciousMacroRemoval"`
	// Name of the prevention policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
	NotifyEndUsers pulumi.BoolOutput `pulumi:"notifyEndUsers"`
	// Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	NullPageAllocation pulumi.BoolOutput `pulumi:"nullPageAllocation"`
	// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
	OnWriteScriptFileVisibility pulumi.BoolOutput `pulumi:"onWriteScriptFileVisibility"`
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses pulumi.BoolOutput `pulumi:"preventSuspiciousProcesses"`
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
	QuarantineAndSecurityCenterRegistration pulumi.BoolOutput `pulumi:"quarantineAndSecurityCenterRegistration"`
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
	QuarantineOnRemovableMedia pulumi.BoolOutput `pulumi:"quarantineOnRemovableMedia"`
	// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
	QuarantineOnWrite pulumi.BoolOutput `pulumi:"quarantineOnWrite"`
	// Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
	RedactHttpDetectionDetails pulumi.BoolOutput `pulumi:"redactHttpDetectionDetails"`
	// Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine & Security Center Registration toggle to be enabled.
	ScriptBasedExecutionMonitoring pulumi.BoolOutput `pulumi:"scriptBasedExecutionMonitoring"`
	// Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	SehOverwriteProtection pulumi.BoolOutput `pulumi:"sehOverwriteProtection"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware PreventionPolicyWindowsSensorAntiMalwareOutput `pulumi:"sensorAntiMalware"`
	// For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
	SensorAntiMalwareUserInitiated PreventionPolicyWindowsSensorAntiMalwareUserInitiatedOutput `pulumi:"sensorAntiMalwareUserInitiated"`
	// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
	SensorTamperingProtection pulumi.BoolOutput `pulumi:"sensorTamperingProtection"`
	// Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
	SuspiciousRegistryOperations pulumi.BoolOutput `pulumi:"suspiciousRegistryOperations"`
	// Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
	SuspiciousScriptsAndCommands pulumi.BoolOutput `pulumi:"suspiciousScriptsAndCommands"`
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables pulumi.BoolOutput `pulumi:"uploadUnknownDetectionRelatedExecutables"`
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables pulumi.BoolOutput `pulumi:"uploadUnknownExecutables"`
	// Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
	UsbInsertionTriggeredScan pulumi.BoolOutput `pulumi:"usbInsertionTriggeredScan"`
	// Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
	VolumeShadowCopyAudit pulumi.BoolOutput `pulumi:"volumeShadowCopyAudit"`
	// Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
	VolumeShadowCopyProtect pulumi.BoolOutput `pulumi:"volumeShadowCopyProtect"`
	// Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
	VulnerableDriverProtection pulumi.BoolOutput `pulumi:"vulnerableDriverProtection"`
	// Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
	WindowsLogonBypassStickyKeys pulumi.BoolOutput `pulumi:"windowsLogonBypassStickyKeys"`
}

// NewPreventionPolicyWindows registers a new resource with the given unique name, arguments, and options.
func NewPreventionPolicyWindows(ctx *pulumi.Context,
	name string, args *PreventionPolicyWindowsArgs, opts ...pulumi.ResourceOption) (*PreventionPolicyWindows, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostGroups == nil {
		return nil, errors.New("invalid value for required argument 'HostGroups'")
	}
	if args.IoaRuleGroups == nil {
		return nil, errors.New("invalid value for required argument 'IoaRuleGroups'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PreventionPolicyWindows
	err := ctx.RegisterResource("crowdstrike:index/preventionPolicyWindows:PreventionPolicyWindows", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPreventionPolicyWindows gets an existing PreventionPolicyWindows resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPreventionPolicyWindows(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PreventionPolicyWindowsState, opts ...pulumi.ResourceOption) (*PreventionPolicyWindows, error) {
	var resource PreventionPolicyWindows
	err := ctx.ReadResource("crowdstrike:index/preventionPolicyWindows:PreventionPolicyWindows", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PreventionPolicyWindows resources.
type preventionPolicyWindowsState struct {
	// Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
	AdditionalUserModeData *bool `pulumi:"additionalUserModeData"`
	// Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
	AdvancedRemediation *bool `pulumi:"advancedRemediation"`
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
	AdwareAndPup *PreventionPolicyWindowsAdwareAndPup `pulumi:"adwareAndPup"`
	// Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
	ApplicationExploitationActivity *bool `pulumi:"applicationExploitationActivity"`
	// Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
	BackupDeletion *bool `pulumi:"backupDeletion"`
	// Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
	BiosDeepVisibility *bool `pulumi:"biosDeepVisibility"`
	// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
	ChopperWebshell *bool `pulumi:"chopperWebshell"`
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware *PreventionPolicyWindowsCloudAntiMalware `pulumi:"cloudAntiMalware"`
	// Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
	CloudAntiMalwareMicrosoftOfficeFiles *PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFiles `pulumi:"cloudAntiMalwareMicrosoftOfficeFiles"`
	// For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
	CloudAntiMalwareUserInitiated *PreventionPolicyWindowsCloudAntiMalwareUserInitiated `pulumi:"cloudAntiMalwareUserInitiated"`
	// Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
	CodeInjection *bool `pulumi:"codeInjection"`
	// Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
	CredentialDumping *bool `pulumi:"credentialDumping"`
	// Whether to enable the setting. A process associated with Cryptowall was blocked.
	Cryptowall *bool `pulumi:"cryptowall"`
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking *bool `pulumi:"customBlocking"`
	// Description of the prevention policy.
	Description *string `pulumi:"description"`
	// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
	DetectOnWrite *bool `pulumi:"detectOnWrite"`
	// Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
	DriveByDownload *bool `pulumi:"driveByDownload"`
	// Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
	DriverLoadPrevention *bool `pulumi:"driverLoadPrevention"`
	// Enable the prevention policy.
	Enabled *bool `pulumi:"enabled"`
	// Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreterOnly to be enabled.
	EngineFullVisibility *bool `pulumi:"engineFullVisibility"`
	// Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
	EnhancedDllLoadVisibility *bool `pulumi:"enhancedDllLoadVisibility"`
	// Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
	EnhancedExploitationVisibility *bool `pulumi:"enhancedExploitationVisibility"`
	// Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
	EnhancedMlForLargerFiles *bool `pulumi:"enhancedMlForLargerFiles"`
	// Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
	ExtendedUserModeData *PreventionPolicyWindowsExtendedUserModeData `pulumi:"extendedUserModeData"`
	// Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
	FileEncryption *bool `pulumi:"fileEncryption"`
	// Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
	FileSystemAccess *bool `pulumi:"fileSystemAccess"`
	// Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
	FileSystemContainment *bool `pulumi:"fileSystemContainment"`
	// Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	ForceAslr *bool `pulumi:"forceAslr"`
	// Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
	ForceDep *bool `pulumi:"forceDep"`
	// Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
	HardwareEnhancedExploitDetection *bool `pulumi:"hardwareEnhancedExploitDetection"`
	// Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	HeapSprayPreallocation *bool `pulumi:"heapSprayPreallocation"`
	// Host Group ids to attach to the prevention policy.
	HostGroups []string `pulumi:"hostGroups"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
	HttpDetections *bool `pulumi:"httpDetections"`
	// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
	IntelligenceSourcedThreats *bool `pulumi:"intelligenceSourcedThreats"`
	// Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
	InterpreterOnly *bool `pulumi:"interpreterOnly"`
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups []string `pulumi:"ioaRuleGroups"`
	// Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
	JavascriptViaRundll32 *bool   `pulumi:"javascriptViaRundll32"`
	LastUpdated           *string `pulumi:"lastUpdated"`
	// Whether to enable the setting. A process determined to be associated with Locky was blocked.
	Locky *bool `pulumi:"locky"`
	// Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
	MemoryScanning *bool `pulumi:"memoryScanning"`
	// Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
	MemoryScanningScanWithCpu *bool `pulumi:"memoryScanningScanWithCpu"`
	// Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
	MicrosoftOfficeFileSuspiciousMacroRemoval *bool `pulumi:"microsoftOfficeFileSuspiciousMacroRemoval"`
	// Name of the prevention policy.
	Name *string `pulumi:"name"`
	// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
	NotifyEndUsers *bool `pulumi:"notifyEndUsers"`
	// Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	NullPageAllocation *bool `pulumi:"nullPageAllocation"`
	// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
	OnWriteScriptFileVisibility *bool `pulumi:"onWriteScriptFileVisibility"`
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses *bool `pulumi:"preventSuspiciousProcesses"`
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
	QuarantineAndSecurityCenterRegistration *bool `pulumi:"quarantineAndSecurityCenterRegistration"`
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
	QuarantineOnRemovableMedia *bool `pulumi:"quarantineOnRemovableMedia"`
	// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
	QuarantineOnWrite *bool `pulumi:"quarantineOnWrite"`
	// Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
	RedactHttpDetectionDetails *bool `pulumi:"redactHttpDetectionDetails"`
	// Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine & Security Center Registration toggle to be enabled.
	ScriptBasedExecutionMonitoring *bool `pulumi:"scriptBasedExecutionMonitoring"`
	// Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	SehOverwriteProtection *bool `pulumi:"sehOverwriteProtection"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware *PreventionPolicyWindowsSensorAntiMalware `pulumi:"sensorAntiMalware"`
	// For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
	SensorAntiMalwareUserInitiated *PreventionPolicyWindowsSensorAntiMalwareUserInitiated `pulumi:"sensorAntiMalwareUserInitiated"`
	// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
	SensorTamperingProtection *bool `pulumi:"sensorTamperingProtection"`
	// Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
	SuspiciousRegistryOperations *bool `pulumi:"suspiciousRegistryOperations"`
	// Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
	SuspiciousScriptsAndCommands *bool `pulumi:"suspiciousScriptsAndCommands"`
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables *bool `pulumi:"uploadUnknownDetectionRelatedExecutables"`
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables *bool `pulumi:"uploadUnknownExecutables"`
	// Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
	UsbInsertionTriggeredScan *bool `pulumi:"usbInsertionTriggeredScan"`
	// Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
	VolumeShadowCopyAudit *bool `pulumi:"volumeShadowCopyAudit"`
	// Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
	VolumeShadowCopyProtect *bool `pulumi:"volumeShadowCopyProtect"`
	// Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
	VulnerableDriverProtection *bool `pulumi:"vulnerableDriverProtection"`
	// Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
	WindowsLogonBypassStickyKeys *bool `pulumi:"windowsLogonBypassStickyKeys"`
}

type PreventionPolicyWindowsState struct {
	// Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
	AdditionalUserModeData pulumi.BoolPtrInput
	// Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
	AdvancedRemediation pulumi.BoolPtrInput
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
	AdwareAndPup PreventionPolicyWindowsAdwareAndPupPtrInput
	// Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
	ApplicationExploitationActivity pulumi.BoolPtrInput
	// Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
	BackupDeletion pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
	BiosDeepVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
	ChopperWebshell pulumi.BoolPtrInput
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware PreventionPolicyWindowsCloudAntiMalwarePtrInput
	// Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
	CloudAntiMalwareMicrosoftOfficeFiles PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesPtrInput
	// For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
	CloudAntiMalwareUserInitiated PreventionPolicyWindowsCloudAntiMalwareUserInitiatedPtrInput
	// Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
	CodeInjection pulumi.BoolPtrInput
	// Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
	CredentialDumping pulumi.BoolPtrInput
	// Whether to enable the setting. A process associated with Cryptowall was blocked.
	Cryptowall pulumi.BoolPtrInput
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking pulumi.BoolPtrInput
	// Description of the prevention policy.
	Description pulumi.StringPtrInput
	// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
	DetectOnWrite pulumi.BoolPtrInput
	// Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
	DriveByDownload pulumi.BoolPtrInput
	// Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
	DriverLoadPrevention pulumi.BoolPtrInput
	// Enable the prevention policy.
	Enabled pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreterOnly to be enabled.
	EngineFullVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
	EnhancedDllLoadVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
	EnhancedExploitationVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
	EnhancedMlForLargerFiles pulumi.BoolPtrInput
	// Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
	ExtendedUserModeData PreventionPolicyWindowsExtendedUserModeDataPtrInput
	// Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
	FileEncryption pulumi.BoolPtrInput
	// Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
	FileSystemAccess pulumi.BoolPtrInput
	// Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
	FileSystemContainment pulumi.BoolPtrInput
	// Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	ForceAslr pulumi.BoolPtrInput
	// Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
	ForceDep pulumi.BoolPtrInput
	// Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
	HardwareEnhancedExploitDetection pulumi.BoolPtrInput
	// Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	HeapSprayPreallocation pulumi.BoolPtrInput
	// Host Group ids to attach to the prevention policy.
	HostGroups pulumi.StringArrayInput
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
	HttpDetections pulumi.BoolPtrInput
	// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
	IntelligenceSourcedThreats pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
	InterpreterOnly pulumi.BoolPtrInput
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups pulumi.StringArrayInput
	// Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
	JavascriptViaRundll32 pulumi.BoolPtrInput
	LastUpdated           pulumi.StringPtrInput
	// Whether to enable the setting. A process determined to be associated with Locky was blocked.
	Locky pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
	MemoryScanning pulumi.BoolPtrInput
	// Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
	MemoryScanningScanWithCpu pulumi.BoolPtrInput
	// Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
	MicrosoftOfficeFileSuspiciousMacroRemoval pulumi.BoolPtrInput
	// Name of the prevention policy.
	Name pulumi.StringPtrInput
	// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
	NotifyEndUsers pulumi.BoolPtrInput
	// Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	NullPageAllocation pulumi.BoolPtrInput
	// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
	OnWriteScriptFileVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses pulumi.BoolPtrInput
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
	QuarantineAndSecurityCenterRegistration pulumi.BoolPtrInput
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
	QuarantineOnRemovableMedia pulumi.BoolPtrInput
	// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
	QuarantineOnWrite pulumi.BoolPtrInput
	// Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
	RedactHttpDetectionDetails pulumi.BoolPtrInput
	// Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine & Security Center Registration toggle to be enabled.
	ScriptBasedExecutionMonitoring pulumi.BoolPtrInput
	// Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	SehOverwriteProtection pulumi.BoolPtrInput
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware PreventionPolicyWindowsSensorAntiMalwarePtrInput
	// For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
	SensorAntiMalwareUserInitiated PreventionPolicyWindowsSensorAntiMalwareUserInitiatedPtrInput
	// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
	SensorTamperingProtection pulumi.BoolPtrInput
	// Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
	SuspiciousRegistryOperations pulumi.BoolPtrInput
	// Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
	SuspiciousScriptsAndCommands pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables pulumi.BoolPtrInput
	// Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
	UsbInsertionTriggeredScan pulumi.BoolPtrInput
	// Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
	VolumeShadowCopyAudit pulumi.BoolPtrInput
	// Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
	VolumeShadowCopyProtect pulumi.BoolPtrInput
	// Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
	VulnerableDriverProtection pulumi.BoolPtrInput
	// Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
	WindowsLogonBypassStickyKeys pulumi.BoolPtrInput
}

func (PreventionPolicyWindowsState) ElementType() reflect.Type {
	return reflect.TypeOf((*preventionPolicyWindowsState)(nil)).Elem()
}

type preventionPolicyWindowsArgs struct {
	// Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
	AdditionalUserModeData *bool `pulumi:"additionalUserModeData"`
	// Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
	AdvancedRemediation *bool `pulumi:"advancedRemediation"`
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
	AdwareAndPup *PreventionPolicyWindowsAdwareAndPup `pulumi:"adwareAndPup"`
	// Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
	ApplicationExploitationActivity *bool `pulumi:"applicationExploitationActivity"`
	// Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
	BackupDeletion *bool `pulumi:"backupDeletion"`
	// Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
	BiosDeepVisibility *bool `pulumi:"biosDeepVisibility"`
	// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
	ChopperWebshell *bool `pulumi:"chopperWebshell"`
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware *PreventionPolicyWindowsCloudAntiMalware `pulumi:"cloudAntiMalware"`
	// Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
	CloudAntiMalwareMicrosoftOfficeFiles *PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFiles `pulumi:"cloudAntiMalwareMicrosoftOfficeFiles"`
	// For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
	CloudAntiMalwareUserInitiated *PreventionPolicyWindowsCloudAntiMalwareUserInitiated `pulumi:"cloudAntiMalwareUserInitiated"`
	// Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
	CodeInjection *bool `pulumi:"codeInjection"`
	// Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
	CredentialDumping *bool `pulumi:"credentialDumping"`
	// Whether to enable the setting. A process associated with Cryptowall was blocked.
	Cryptowall *bool `pulumi:"cryptowall"`
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking *bool `pulumi:"customBlocking"`
	// Description of the prevention policy.
	Description *string `pulumi:"description"`
	// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
	DetectOnWrite *bool `pulumi:"detectOnWrite"`
	// Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
	DriveByDownload *bool `pulumi:"driveByDownload"`
	// Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
	DriverLoadPrevention *bool `pulumi:"driverLoadPrevention"`
	// Enable the prevention policy.
	Enabled *bool `pulumi:"enabled"`
	// Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreterOnly to be enabled.
	EngineFullVisibility *bool `pulumi:"engineFullVisibility"`
	// Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
	EnhancedDllLoadVisibility *bool `pulumi:"enhancedDllLoadVisibility"`
	// Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
	EnhancedExploitationVisibility *bool `pulumi:"enhancedExploitationVisibility"`
	// Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
	EnhancedMlForLargerFiles *bool `pulumi:"enhancedMlForLargerFiles"`
	// Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
	ExtendedUserModeData *PreventionPolicyWindowsExtendedUserModeData `pulumi:"extendedUserModeData"`
	// Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
	FileEncryption *bool `pulumi:"fileEncryption"`
	// Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
	FileSystemAccess *bool `pulumi:"fileSystemAccess"`
	// Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
	FileSystemContainment *bool `pulumi:"fileSystemContainment"`
	// Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	ForceAslr *bool `pulumi:"forceAslr"`
	// Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
	ForceDep *bool `pulumi:"forceDep"`
	// Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
	HardwareEnhancedExploitDetection *bool `pulumi:"hardwareEnhancedExploitDetection"`
	// Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	HeapSprayPreallocation *bool `pulumi:"heapSprayPreallocation"`
	// Host Group ids to attach to the prevention policy.
	HostGroups []string `pulumi:"hostGroups"`
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
	HttpDetections *bool `pulumi:"httpDetections"`
	// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
	IntelligenceSourcedThreats *bool `pulumi:"intelligenceSourcedThreats"`
	// Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
	InterpreterOnly *bool `pulumi:"interpreterOnly"`
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups []string `pulumi:"ioaRuleGroups"`
	// Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
	JavascriptViaRundll32 *bool `pulumi:"javascriptViaRundll32"`
	// Whether to enable the setting. A process determined to be associated with Locky was blocked.
	Locky *bool `pulumi:"locky"`
	// Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
	MemoryScanning *bool `pulumi:"memoryScanning"`
	// Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
	MemoryScanningScanWithCpu *bool `pulumi:"memoryScanningScanWithCpu"`
	// Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
	MicrosoftOfficeFileSuspiciousMacroRemoval *bool `pulumi:"microsoftOfficeFileSuspiciousMacroRemoval"`
	// Name of the prevention policy.
	Name *string `pulumi:"name"`
	// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
	NotifyEndUsers *bool `pulumi:"notifyEndUsers"`
	// Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	NullPageAllocation *bool `pulumi:"nullPageAllocation"`
	// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
	OnWriteScriptFileVisibility *bool `pulumi:"onWriteScriptFileVisibility"`
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses *bool `pulumi:"preventSuspiciousProcesses"`
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
	QuarantineAndSecurityCenterRegistration *bool `pulumi:"quarantineAndSecurityCenterRegistration"`
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
	QuarantineOnRemovableMedia *bool `pulumi:"quarantineOnRemovableMedia"`
	// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
	QuarantineOnWrite *bool `pulumi:"quarantineOnWrite"`
	// Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
	RedactHttpDetectionDetails *bool `pulumi:"redactHttpDetectionDetails"`
	// Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine & Security Center Registration toggle to be enabled.
	ScriptBasedExecutionMonitoring *bool `pulumi:"scriptBasedExecutionMonitoring"`
	// Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	SehOverwriteProtection *bool `pulumi:"sehOverwriteProtection"`
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware *PreventionPolicyWindowsSensorAntiMalware `pulumi:"sensorAntiMalware"`
	// For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
	SensorAntiMalwareUserInitiated *PreventionPolicyWindowsSensorAntiMalwareUserInitiated `pulumi:"sensorAntiMalwareUserInitiated"`
	// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
	SensorTamperingProtection *bool `pulumi:"sensorTamperingProtection"`
	// Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
	SuspiciousRegistryOperations *bool `pulumi:"suspiciousRegistryOperations"`
	// Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
	SuspiciousScriptsAndCommands *bool `pulumi:"suspiciousScriptsAndCommands"`
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables *bool `pulumi:"uploadUnknownDetectionRelatedExecutables"`
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables *bool `pulumi:"uploadUnknownExecutables"`
	// Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
	UsbInsertionTriggeredScan *bool `pulumi:"usbInsertionTriggeredScan"`
	// Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
	VolumeShadowCopyAudit *bool `pulumi:"volumeShadowCopyAudit"`
	// Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
	VolumeShadowCopyProtect *bool `pulumi:"volumeShadowCopyProtect"`
	// Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
	VulnerableDriverProtection *bool `pulumi:"vulnerableDriverProtection"`
	// Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
	WindowsLogonBypassStickyKeys *bool `pulumi:"windowsLogonBypassStickyKeys"`
}

// The set of arguments for constructing a PreventionPolicyWindows resource.
type PreventionPolicyWindowsArgs struct {
	// Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
	AdditionalUserModeData pulumi.BoolPtrInput
	// Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
	AdvancedRemediation pulumi.BoolPtrInput
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
	AdwareAndPup PreventionPolicyWindowsAdwareAndPupPtrInput
	// Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
	ApplicationExploitationActivity pulumi.BoolPtrInput
	// Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
	BackupDeletion pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
	BiosDeepVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
	ChopperWebshell pulumi.BoolPtrInput
	// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
	CloudAntiMalware PreventionPolicyWindowsCloudAntiMalwarePtrInput
	// Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
	CloudAntiMalwareMicrosoftOfficeFiles PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesPtrInput
	// For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
	CloudAntiMalwareUserInitiated PreventionPolicyWindowsCloudAntiMalwareUserInitiatedPtrInput
	// Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
	CodeInjection pulumi.BoolPtrInput
	// Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
	CredentialDumping pulumi.BoolPtrInput
	// Whether to enable the setting. A process associated with Cryptowall was blocked.
	Cryptowall pulumi.BoolPtrInput
	// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
	CustomBlocking pulumi.BoolPtrInput
	// Description of the prevention policy.
	Description pulumi.StringPtrInput
	// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
	DetectOnWrite pulumi.BoolPtrInput
	// Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
	DriveByDownload pulumi.BoolPtrInput
	// Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
	DriverLoadPrevention pulumi.BoolPtrInput
	// Enable the prevention policy.
	Enabled pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreterOnly to be enabled.
	EngineFullVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
	EnhancedDllLoadVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
	EnhancedExploitationVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
	EnhancedMlForLargerFiles pulumi.BoolPtrInput
	// Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
	ExtendedUserModeData PreventionPolicyWindowsExtendedUserModeDataPtrInput
	// Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
	FileEncryption pulumi.BoolPtrInput
	// Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
	FileSystemAccess pulumi.BoolPtrInput
	// Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
	FileSystemContainment pulumi.BoolPtrInput
	// Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	ForceAslr pulumi.BoolPtrInput
	// Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
	ForceDep pulumi.BoolPtrInput
	// Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
	HardwareEnhancedExploitDetection pulumi.BoolPtrInput
	// Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	HeapSprayPreallocation pulumi.BoolPtrInput
	// Host Group ids to attach to the prevention policy.
	HostGroups pulumi.StringArrayInput
	// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
	HttpDetections pulumi.BoolPtrInput
	// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
	IntelligenceSourcedThreats pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
	InterpreterOnly pulumi.BoolPtrInput
	// IOA Rule Group to attach to the prevention policy.
	IoaRuleGroups pulumi.StringArrayInput
	// Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
	JavascriptViaRundll32 pulumi.BoolPtrInput
	// Whether to enable the setting. A process determined to be associated with Locky was blocked.
	Locky pulumi.BoolPtrInput
	// Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
	MemoryScanning pulumi.BoolPtrInput
	// Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
	MemoryScanningScanWithCpu pulumi.BoolPtrInput
	// Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
	MicrosoftOfficeFileSuspiciousMacroRemoval pulumi.BoolPtrInput
	// Name of the prevention policy.
	Name pulumi.StringPtrInput
	// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
	NotifyEndUsers pulumi.BoolPtrInput
	// Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	NullPageAllocation pulumi.BoolPtrInput
	// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
	OnWriteScriptFileVisibility pulumi.BoolPtrInput
	// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
	PreventSuspiciousProcesses pulumi.BoolPtrInput
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
	QuarantineAndSecurityCenterRegistration pulumi.BoolPtrInput
	// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
	QuarantineOnRemovableMedia pulumi.BoolPtrInput
	// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
	QuarantineOnWrite pulumi.BoolPtrInput
	// Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
	RedactHttpDetectionDetails pulumi.BoolPtrInput
	// Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine & Security Center Registration toggle to be enabled.
	ScriptBasedExecutionMonitoring pulumi.BoolPtrInput
	// Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
	SehOverwriteProtection pulumi.BoolPtrInput
	// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
	SensorAntiMalware PreventionPolicyWindowsSensorAntiMalwarePtrInput
	// For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
	SensorAntiMalwareUserInitiated PreventionPolicyWindowsSensorAntiMalwareUserInitiatedPtrInput
	// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
	SensorTamperingProtection pulumi.BoolPtrInput
	// Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
	SuspiciousRegistryOperations pulumi.BoolPtrInput
	// Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
	SuspiciousScriptsAndCommands pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
	UploadUnknownDetectionRelatedExecutables pulumi.BoolPtrInput
	// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
	UploadUnknownExecutables pulumi.BoolPtrInput
	// Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
	UsbInsertionTriggeredScan pulumi.BoolPtrInput
	// Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
	VolumeShadowCopyAudit pulumi.BoolPtrInput
	// Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
	VolumeShadowCopyProtect pulumi.BoolPtrInput
	// Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
	VulnerableDriverProtection pulumi.BoolPtrInput
	// Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
	WindowsLogonBypassStickyKeys pulumi.BoolPtrInput
}

func (PreventionPolicyWindowsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*preventionPolicyWindowsArgs)(nil)).Elem()
}

type PreventionPolicyWindowsInput interface {
	pulumi.Input

	ToPreventionPolicyWindowsOutput() PreventionPolicyWindowsOutput
	ToPreventionPolicyWindowsOutputWithContext(ctx context.Context) PreventionPolicyWindowsOutput
}

func (*PreventionPolicyWindows) ElementType() reflect.Type {
	return reflect.TypeOf((**PreventionPolicyWindows)(nil)).Elem()
}

func (i *PreventionPolicyWindows) ToPreventionPolicyWindowsOutput() PreventionPolicyWindowsOutput {
	return i.ToPreventionPolicyWindowsOutputWithContext(context.Background())
}

func (i *PreventionPolicyWindows) ToPreventionPolicyWindowsOutputWithContext(ctx context.Context) PreventionPolicyWindowsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionPolicyWindowsOutput)
}

// PreventionPolicyWindowsArrayInput is an input type that accepts PreventionPolicyWindowsArray and PreventionPolicyWindowsArrayOutput values.
// You can construct a concrete instance of `PreventionPolicyWindowsArrayInput` via:
//
//	PreventionPolicyWindowsArray{ PreventionPolicyWindowsArgs{...} }
type PreventionPolicyWindowsArrayInput interface {
	pulumi.Input

	ToPreventionPolicyWindowsArrayOutput() PreventionPolicyWindowsArrayOutput
	ToPreventionPolicyWindowsArrayOutputWithContext(context.Context) PreventionPolicyWindowsArrayOutput
}

type PreventionPolicyWindowsArray []PreventionPolicyWindowsInput

func (PreventionPolicyWindowsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreventionPolicyWindows)(nil)).Elem()
}

func (i PreventionPolicyWindowsArray) ToPreventionPolicyWindowsArrayOutput() PreventionPolicyWindowsArrayOutput {
	return i.ToPreventionPolicyWindowsArrayOutputWithContext(context.Background())
}

func (i PreventionPolicyWindowsArray) ToPreventionPolicyWindowsArrayOutputWithContext(ctx context.Context) PreventionPolicyWindowsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionPolicyWindowsArrayOutput)
}

// PreventionPolicyWindowsMapInput is an input type that accepts PreventionPolicyWindowsMap and PreventionPolicyWindowsMapOutput values.
// You can construct a concrete instance of `PreventionPolicyWindowsMapInput` via:
//
//	PreventionPolicyWindowsMap{ "key": PreventionPolicyWindowsArgs{...} }
type PreventionPolicyWindowsMapInput interface {
	pulumi.Input

	ToPreventionPolicyWindowsMapOutput() PreventionPolicyWindowsMapOutput
	ToPreventionPolicyWindowsMapOutputWithContext(context.Context) PreventionPolicyWindowsMapOutput
}

type PreventionPolicyWindowsMap map[string]PreventionPolicyWindowsInput

func (PreventionPolicyWindowsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreventionPolicyWindows)(nil)).Elem()
}

func (i PreventionPolicyWindowsMap) ToPreventionPolicyWindowsMapOutput() PreventionPolicyWindowsMapOutput {
	return i.ToPreventionPolicyWindowsMapOutputWithContext(context.Background())
}

func (i PreventionPolicyWindowsMap) ToPreventionPolicyWindowsMapOutputWithContext(ctx context.Context) PreventionPolicyWindowsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreventionPolicyWindowsMapOutput)
}

type PreventionPolicyWindowsOutput struct{ *pulumi.OutputState }

func (PreventionPolicyWindowsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreventionPolicyWindows)(nil)).Elem()
}

func (o PreventionPolicyWindowsOutput) ToPreventionPolicyWindowsOutput() PreventionPolicyWindowsOutput {
	return o
}

func (o PreventionPolicyWindowsOutput) ToPreventionPolicyWindowsOutputWithContext(ctx context.Context) PreventionPolicyWindowsOutput {
	return o
}

// Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
func (o PreventionPolicyWindowsOutput) AdditionalUserModeData() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.AdditionalUserModeData }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
func (o PreventionPolicyWindowsOutput) AdvancedRemediation() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.AdvancedRemediation }).(pulumi.BoolOutput)
}

// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
func (o PreventionPolicyWindowsOutput) AdwareAndPup() PreventionPolicyWindowsAdwareAndPupOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) PreventionPolicyWindowsAdwareAndPupOutput { return v.AdwareAndPup }).(PreventionPolicyWindowsAdwareAndPupOutput)
}

// Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
func (o PreventionPolicyWindowsOutput) ApplicationExploitationActivity() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.ApplicationExploitationActivity }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
func (o PreventionPolicyWindowsOutput) BackupDeletion() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.BackupDeletion }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
func (o PreventionPolicyWindowsOutput) BiosDeepVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.BiosDeepVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
func (o PreventionPolicyWindowsOutput) ChopperWebshell() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.ChopperWebshell }).(pulumi.BoolOutput)
}

// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
func (o PreventionPolicyWindowsOutput) CloudAntiMalware() PreventionPolicyWindowsCloudAntiMalwareOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) PreventionPolicyWindowsCloudAntiMalwareOutput {
		return v.CloudAntiMalware
	}).(PreventionPolicyWindowsCloudAntiMalwareOutput)
}

// Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
func (o PreventionPolicyWindowsOutput) CloudAntiMalwareMicrosoftOfficeFiles() PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesOutput {
		return v.CloudAntiMalwareMicrosoftOfficeFiles
	}).(PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesOutput)
}

// For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
func (o PreventionPolicyWindowsOutput) CloudAntiMalwareUserInitiated() PreventionPolicyWindowsCloudAntiMalwareUserInitiatedOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) PreventionPolicyWindowsCloudAntiMalwareUserInitiatedOutput {
		return v.CloudAntiMalwareUserInitiated
	}).(PreventionPolicyWindowsCloudAntiMalwareUserInitiatedOutput)
}

// Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
func (o PreventionPolicyWindowsOutput) CodeInjection() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.CodeInjection }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
func (o PreventionPolicyWindowsOutput) CredentialDumping() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.CredentialDumping }).(pulumi.BoolOutput)
}

// Whether to enable the setting. A process associated with Cryptowall was blocked.
func (o PreventionPolicyWindowsOutput) Cryptowall() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.Cryptowall }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
func (o PreventionPolicyWindowsOutput) CustomBlocking() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.CustomBlocking }).(pulumi.BoolOutput)
}

// Description of the prevention policy.
func (o PreventionPolicyWindowsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
func (o PreventionPolicyWindowsOutput) DetectOnWrite() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.DetectOnWrite }).(pulumi.BoolOutput)
}

// Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
func (o PreventionPolicyWindowsOutput) DriveByDownload() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.DriveByDownload }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
func (o PreventionPolicyWindowsOutput) DriverLoadPrevention() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.DriverLoadPrevention }).(pulumi.BoolOutput)
}

// Enable the prevention policy.
func (o PreventionPolicyWindowsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreterOnly to be enabled.
func (o PreventionPolicyWindowsOutput) EngineFullVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.EngineFullVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
func (o PreventionPolicyWindowsOutput) EnhancedDllLoadVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.EnhancedDllLoadVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
func (o PreventionPolicyWindowsOutput) EnhancedExploitationVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.EnhancedExploitationVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
func (o PreventionPolicyWindowsOutput) EnhancedMlForLargerFiles() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.EnhancedMlForLargerFiles }).(pulumi.BoolOutput)
}

// Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
func (o PreventionPolicyWindowsOutput) ExtendedUserModeData() PreventionPolicyWindowsExtendedUserModeDataOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) PreventionPolicyWindowsExtendedUserModeDataOutput {
		return v.ExtendedUserModeData
	}).(PreventionPolicyWindowsExtendedUserModeDataOutput)
}

// Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
func (o PreventionPolicyWindowsOutput) FileEncryption() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.FileEncryption }).(pulumi.BoolOutput)
}

// Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
func (o PreventionPolicyWindowsOutput) FileSystemAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.FileSystemAccess }).(pulumi.BoolOutput)
}

// Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
func (o PreventionPolicyWindowsOutput) FileSystemContainment() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.FileSystemContainment }).(pulumi.BoolOutput)
}

// Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
func (o PreventionPolicyWindowsOutput) ForceAslr() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.ForceAslr }).(pulumi.BoolOutput)
}

// Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
func (o PreventionPolicyWindowsOutput) ForceDep() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.ForceDep }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
func (o PreventionPolicyWindowsOutput) HardwareEnhancedExploitDetection() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.HardwareEnhancedExploitDetection }).(pulumi.BoolOutput)
}

// Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
func (o PreventionPolicyWindowsOutput) HeapSprayPreallocation() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.HeapSprayPreallocation }).(pulumi.BoolOutput)
}

// Host Group ids to attach to the prevention policy.
func (o PreventionPolicyWindowsOutput) HostGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.StringArrayOutput { return v.HostGroups }).(pulumi.StringArrayOutput)
}

// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
func (o PreventionPolicyWindowsOutput) HttpDetections() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.HttpDetections }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
func (o PreventionPolicyWindowsOutput) IntelligenceSourcedThreats() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.IntelligenceSourcedThreats }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
func (o PreventionPolicyWindowsOutput) InterpreterOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.InterpreterOnly }).(pulumi.BoolOutput)
}

// IOA Rule Group to attach to the prevention policy.
func (o PreventionPolicyWindowsOutput) IoaRuleGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.StringArrayOutput { return v.IoaRuleGroups }).(pulumi.StringArrayOutput)
}

// Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
func (o PreventionPolicyWindowsOutput) JavascriptViaRundll32() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.JavascriptViaRundll32 }).(pulumi.BoolOutput)
}

func (o PreventionPolicyWindowsOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// Whether to enable the setting. A process determined to be associated with Locky was blocked.
func (o PreventionPolicyWindowsOutput) Locky() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.Locky }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
func (o PreventionPolicyWindowsOutput) MemoryScanning() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.MemoryScanning }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
func (o PreventionPolicyWindowsOutput) MemoryScanningScanWithCpu() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.MemoryScanningScanWithCpu }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
func (o PreventionPolicyWindowsOutput) MicrosoftOfficeFileSuspiciousMacroRemoval() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.MicrosoftOfficeFileSuspiciousMacroRemoval }).(pulumi.BoolOutput)
}

// Name of the prevention policy.
func (o PreventionPolicyWindowsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
func (o PreventionPolicyWindowsOutput) NotifyEndUsers() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.NotifyEndUsers }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
func (o PreventionPolicyWindowsOutput) NullPageAllocation() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.NullPageAllocation }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
func (o PreventionPolicyWindowsOutput) OnWriteScriptFileVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.OnWriteScriptFileVisibility }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
func (o PreventionPolicyWindowsOutput) PreventSuspiciousProcesses() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.PreventSuspiciousProcesses }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
func (o PreventionPolicyWindowsOutput) QuarantineAndSecurityCenterRegistration() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.QuarantineAndSecurityCenterRegistration }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
func (o PreventionPolicyWindowsOutput) QuarantineOnRemovableMedia() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.QuarantineOnRemovableMedia }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
func (o PreventionPolicyWindowsOutput) QuarantineOnWrite() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.QuarantineOnWrite }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
func (o PreventionPolicyWindowsOutput) RedactHttpDetectionDetails() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.RedactHttpDetectionDetails }).(pulumi.BoolOutput)
}

// Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine & Security Center Registration toggle to be enabled.
func (o PreventionPolicyWindowsOutput) ScriptBasedExecutionMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.ScriptBasedExecutionMonitoring }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
func (o PreventionPolicyWindowsOutput) SehOverwriteProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.SehOverwriteProtection }).(pulumi.BoolOutput)
}

// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
func (o PreventionPolicyWindowsOutput) SensorAntiMalware() PreventionPolicyWindowsSensorAntiMalwareOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) PreventionPolicyWindowsSensorAntiMalwareOutput {
		return v.SensorAntiMalware
	}).(PreventionPolicyWindowsSensorAntiMalwareOutput)
}

// For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
func (o PreventionPolicyWindowsOutput) SensorAntiMalwareUserInitiated() PreventionPolicyWindowsSensorAntiMalwareUserInitiatedOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) PreventionPolicyWindowsSensorAntiMalwareUserInitiatedOutput {
		return v.SensorAntiMalwareUserInitiated
	}).(PreventionPolicyWindowsSensorAntiMalwareUserInitiatedOutput)
}

// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
func (o PreventionPolicyWindowsOutput) SensorTamperingProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.SensorTamperingProtection }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
func (o PreventionPolicyWindowsOutput) SuspiciousRegistryOperations() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.SuspiciousRegistryOperations }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
func (o PreventionPolicyWindowsOutput) SuspiciousScriptsAndCommands() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.SuspiciousScriptsAndCommands }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
func (o PreventionPolicyWindowsOutput) UploadUnknownDetectionRelatedExecutables() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.UploadUnknownDetectionRelatedExecutables }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
func (o PreventionPolicyWindowsOutput) UploadUnknownExecutables() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.UploadUnknownExecutables }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
func (o PreventionPolicyWindowsOutput) UsbInsertionTriggeredScan() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.UsbInsertionTriggeredScan }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
func (o PreventionPolicyWindowsOutput) VolumeShadowCopyAudit() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.VolumeShadowCopyAudit }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
func (o PreventionPolicyWindowsOutput) VolumeShadowCopyProtect() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.VolumeShadowCopyProtect }).(pulumi.BoolOutput)
}

// Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
func (o PreventionPolicyWindowsOutput) VulnerableDriverProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.VulnerableDriverProtection }).(pulumi.BoolOutput)
}

// Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
func (o PreventionPolicyWindowsOutput) WindowsLogonBypassStickyKeys() pulumi.BoolOutput {
	return o.ApplyT(func(v *PreventionPolicyWindows) pulumi.BoolOutput { return v.WindowsLogonBypassStickyKeys }).(pulumi.BoolOutput)
}

type PreventionPolicyWindowsArrayOutput struct{ *pulumi.OutputState }

func (PreventionPolicyWindowsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PreventionPolicyWindows)(nil)).Elem()
}

func (o PreventionPolicyWindowsArrayOutput) ToPreventionPolicyWindowsArrayOutput() PreventionPolicyWindowsArrayOutput {
	return o
}

func (o PreventionPolicyWindowsArrayOutput) ToPreventionPolicyWindowsArrayOutputWithContext(ctx context.Context) PreventionPolicyWindowsArrayOutput {
	return o
}

func (o PreventionPolicyWindowsArrayOutput) Index(i pulumi.IntInput) PreventionPolicyWindowsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PreventionPolicyWindows {
		return vs[0].([]*PreventionPolicyWindows)[vs[1].(int)]
	}).(PreventionPolicyWindowsOutput)
}

type PreventionPolicyWindowsMapOutput struct{ *pulumi.OutputState }

func (PreventionPolicyWindowsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PreventionPolicyWindows)(nil)).Elem()
}

func (o PreventionPolicyWindowsMapOutput) ToPreventionPolicyWindowsMapOutput() PreventionPolicyWindowsMapOutput {
	return o
}

func (o PreventionPolicyWindowsMapOutput) ToPreventionPolicyWindowsMapOutputWithContext(ctx context.Context) PreventionPolicyWindowsMapOutput {
	return o
}

func (o PreventionPolicyWindowsMapOutput) MapIndex(k pulumi.StringInput) PreventionPolicyWindowsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PreventionPolicyWindows {
		return vs[0].(map[string]*PreventionPolicyWindows)[vs[1].(string)]
	}).(PreventionPolicyWindowsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionPolicyWindowsInput)(nil)).Elem(), &PreventionPolicyWindows{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionPolicyWindowsArrayInput)(nil)).Elem(), PreventionPolicyWindowsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreventionPolicyWindowsMapInput)(nil)).Elem(), PreventionPolicyWindowsMap{})
	pulumi.RegisterOutputType(PreventionPolicyWindowsOutput{})
	pulumi.RegisterOutputType(PreventionPolicyWindowsArrayOutput{})
	pulumi.RegisterOutputType(PreventionPolicyWindowsMapOutput{})
}
