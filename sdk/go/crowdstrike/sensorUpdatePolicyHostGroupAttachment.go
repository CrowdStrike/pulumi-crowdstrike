// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package crowdstrike

import (
	"context"
	"reflect"

	"errors"
	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows managing the host groups attached to a sensor update policy. This resource takes exclusive ownership over the host groups assigned to a sensor update policy. If you want to fully create or manage a sensor update policy please use the `sensorUpdatePolicy` resource.
//
// ## API Scopes
//
// The following API scopes are required:
//
// - Sensor update policies | Read & Write
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := crowdstrike.NewSensorUpdatePolicyHostGroupAttachment(ctx, "example", &crowdstrike.SensorUpdatePolicyHostGroupAttachmentArgs{
//				IdProperty: pulumi.String("34ef8e65eb1b4642861e389da3f7e82f"),
//				HostGroups: pulumi.StringArray{
//					pulumi.String("ff1ca3nfr7899j1abf61c0448db28be5"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("sensorUpdatePolicyHostGroupAttachment", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Sensor Update Policy Host Group Attachment can be imported by specifying the id.
//
// ```sh
// $ pulumi import crowdstrike:index/sensorUpdatePolicyHostGroupAttachment:SensorUpdatePolicyHostGroupAttachment example 7fb858a949034a0cbca175f660f1e769
// ```
type SensorUpdatePolicyHostGroupAttachment struct {
	pulumi.CustomResourceState

	// Host Group ids to attach to the sensor update policy.
	HostGroups pulumi.StringArrayOutput `pulumi:"hostGroups"`
	// The sensor update policy id you want to attach to.
	IdProperty  pulumi.StringOutput `pulumi:"idProperty"`
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
}

// NewSensorUpdatePolicyHostGroupAttachment registers a new resource with the given unique name, arguments, and options.
func NewSensorUpdatePolicyHostGroupAttachment(ctx *pulumi.Context,
	name string, args *SensorUpdatePolicyHostGroupAttachmentArgs, opts ...pulumi.ResourceOption) (*SensorUpdatePolicyHostGroupAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdProperty == nil {
		return nil, errors.New("invalid value for required argument 'IdProperty'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SensorUpdatePolicyHostGroupAttachment
	err := ctx.RegisterResource("crowdstrike:index/sensorUpdatePolicyHostGroupAttachment:SensorUpdatePolicyHostGroupAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensorUpdatePolicyHostGroupAttachment gets an existing SensorUpdatePolicyHostGroupAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensorUpdatePolicyHostGroupAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensorUpdatePolicyHostGroupAttachmentState, opts ...pulumi.ResourceOption) (*SensorUpdatePolicyHostGroupAttachment, error) {
	var resource SensorUpdatePolicyHostGroupAttachment
	err := ctx.ReadResource("crowdstrike:index/sensorUpdatePolicyHostGroupAttachment:SensorUpdatePolicyHostGroupAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SensorUpdatePolicyHostGroupAttachment resources.
type sensorUpdatePolicyHostGroupAttachmentState struct {
	// Host Group ids to attach to the sensor update policy.
	HostGroups []string `pulumi:"hostGroups"`
	// The sensor update policy id you want to attach to.
	IdProperty  *string `pulumi:"idProperty"`
	LastUpdated *string `pulumi:"lastUpdated"`
}

type SensorUpdatePolicyHostGroupAttachmentState struct {
	// Host Group ids to attach to the sensor update policy.
	HostGroups pulumi.StringArrayInput
	// The sensor update policy id you want to attach to.
	IdProperty  pulumi.StringPtrInput
	LastUpdated pulumi.StringPtrInput
}

func (SensorUpdatePolicyHostGroupAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorUpdatePolicyHostGroupAttachmentState)(nil)).Elem()
}

type sensorUpdatePolicyHostGroupAttachmentArgs struct {
	// Host Group ids to attach to the sensor update policy.
	HostGroups []string `pulumi:"hostGroups"`
	// The sensor update policy id you want to attach to.
	IdProperty string `pulumi:"idProperty"`
}

// The set of arguments for constructing a SensorUpdatePolicyHostGroupAttachment resource.
type SensorUpdatePolicyHostGroupAttachmentArgs struct {
	// Host Group ids to attach to the sensor update policy.
	HostGroups pulumi.StringArrayInput
	// The sensor update policy id you want to attach to.
	IdProperty pulumi.StringInput
}

func (SensorUpdatePolicyHostGroupAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorUpdatePolicyHostGroupAttachmentArgs)(nil)).Elem()
}

type SensorUpdatePolicyHostGroupAttachmentInput interface {
	pulumi.Input

	ToSensorUpdatePolicyHostGroupAttachmentOutput() SensorUpdatePolicyHostGroupAttachmentOutput
	ToSensorUpdatePolicyHostGroupAttachmentOutputWithContext(ctx context.Context) SensorUpdatePolicyHostGroupAttachmentOutput
}

func (*SensorUpdatePolicyHostGroupAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorUpdatePolicyHostGroupAttachment)(nil)).Elem()
}

func (i *SensorUpdatePolicyHostGroupAttachment) ToSensorUpdatePolicyHostGroupAttachmentOutput() SensorUpdatePolicyHostGroupAttachmentOutput {
	return i.ToSensorUpdatePolicyHostGroupAttachmentOutputWithContext(context.Background())
}

func (i *SensorUpdatePolicyHostGroupAttachment) ToSensorUpdatePolicyHostGroupAttachmentOutputWithContext(ctx context.Context) SensorUpdatePolicyHostGroupAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorUpdatePolicyHostGroupAttachmentOutput)
}

// SensorUpdatePolicyHostGroupAttachmentArrayInput is an input type that accepts SensorUpdatePolicyHostGroupAttachmentArray and SensorUpdatePolicyHostGroupAttachmentArrayOutput values.
// You can construct a concrete instance of `SensorUpdatePolicyHostGroupAttachmentArrayInput` via:
//
//	SensorUpdatePolicyHostGroupAttachmentArray{ SensorUpdatePolicyHostGroupAttachmentArgs{...} }
type SensorUpdatePolicyHostGroupAttachmentArrayInput interface {
	pulumi.Input

	ToSensorUpdatePolicyHostGroupAttachmentArrayOutput() SensorUpdatePolicyHostGroupAttachmentArrayOutput
	ToSensorUpdatePolicyHostGroupAttachmentArrayOutputWithContext(context.Context) SensorUpdatePolicyHostGroupAttachmentArrayOutput
}

type SensorUpdatePolicyHostGroupAttachmentArray []SensorUpdatePolicyHostGroupAttachmentInput

func (SensorUpdatePolicyHostGroupAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorUpdatePolicyHostGroupAttachment)(nil)).Elem()
}

func (i SensorUpdatePolicyHostGroupAttachmentArray) ToSensorUpdatePolicyHostGroupAttachmentArrayOutput() SensorUpdatePolicyHostGroupAttachmentArrayOutput {
	return i.ToSensorUpdatePolicyHostGroupAttachmentArrayOutputWithContext(context.Background())
}

func (i SensorUpdatePolicyHostGroupAttachmentArray) ToSensorUpdatePolicyHostGroupAttachmentArrayOutputWithContext(ctx context.Context) SensorUpdatePolicyHostGroupAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorUpdatePolicyHostGroupAttachmentArrayOutput)
}

// SensorUpdatePolicyHostGroupAttachmentMapInput is an input type that accepts SensorUpdatePolicyHostGroupAttachmentMap and SensorUpdatePolicyHostGroupAttachmentMapOutput values.
// You can construct a concrete instance of `SensorUpdatePolicyHostGroupAttachmentMapInput` via:
//
//	SensorUpdatePolicyHostGroupAttachmentMap{ "key": SensorUpdatePolicyHostGroupAttachmentArgs{...} }
type SensorUpdatePolicyHostGroupAttachmentMapInput interface {
	pulumi.Input

	ToSensorUpdatePolicyHostGroupAttachmentMapOutput() SensorUpdatePolicyHostGroupAttachmentMapOutput
	ToSensorUpdatePolicyHostGroupAttachmentMapOutputWithContext(context.Context) SensorUpdatePolicyHostGroupAttachmentMapOutput
}

type SensorUpdatePolicyHostGroupAttachmentMap map[string]SensorUpdatePolicyHostGroupAttachmentInput

func (SensorUpdatePolicyHostGroupAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorUpdatePolicyHostGroupAttachment)(nil)).Elem()
}

func (i SensorUpdatePolicyHostGroupAttachmentMap) ToSensorUpdatePolicyHostGroupAttachmentMapOutput() SensorUpdatePolicyHostGroupAttachmentMapOutput {
	return i.ToSensorUpdatePolicyHostGroupAttachmentMapOutputWithContext(context.Background())
}

func (i SensorUpdatePolicyHostGroupAttachmentMap) ToSensorUpdatePolicyHostGroupAttachmentMapOutputWithContext(ctx context.Context) SensorUpdatePolicyHostGroupAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorUpdatePolicyHostGroupAttachmentMapOutput)
}

type SensorUpdatePolicyHostGroupAttachmentOutput struct{ *pulumi.OutputState }

func (SensorUpdatePolicyHostGroupAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorUpdatePolicyHostGroupAttachment)(nil)).Elem()
}

func (o SensorUpdatePolicyHostGroupAttachmentOutput) ToSensorUpdatePolicyHostGroupAttachmentOutput() SensorUpdatePolicyHostGroupAttachmentOutput {
	return o
}

func (o SensorUpdatePolicyHostGroupAttachmentOutput) ToSensorUpdatePolicyHostGroupAttachmentOutputWithContext(ctx context.Context) SensorUpdatePolicyHostGroupAttachmentOutput {
	return o
}

// Host Group ids to attach to the sensor update policy.
func (o SensorUpdatePolicyHostGroupAttachmentOutput) HostGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensorUpdatePolicyHostGroupAttachment) pulumi.StringArrayOutput { return v.HostGroups }).(pulumi.StringArrayOutput)
}

// The sensor update policy id you want to attach to.
func (o SensorUpdatePolicyHostGroupAttachmentOutput) IdProperty() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorUpdatePolicyHostGroupAttachment) pulumi.StringOutput { return v.IdProperty }).(pulumi.StringOutput)
}

func (o SensorUpdatePolicyHostGroupAttachmentOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorUpdatePolicyHostGroupAttachment) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

type SensorUpdatePolicyHostGroupAttachmentArrayOutput struct{ *pulumi.OutputState }

func (SensorUpdatePolicyHostGroupAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorUpdatePolicyHostGroupAttachment)(nil)).Elem()
}

func (o SensorUpdatePolicyHostGroupAttachmentArrayOutput) ToSensorUpdatePolicyHostGroupAttachmentArrayOutput() SensorUpdatePolicyHostGroupAttachmentArrayOutput {
	return o
}

func (o SensorUpdatePolicyHostGroupAttachmentArrayOutput) ToSensorUpdatePolicyHostGroupAttachmentArrayOutputWithContext(ctx context.Context) SensorUpdatePolicyHostGroupAttachmentArrayOutput {
	return o
}

func (o SensorUpdatePolicyHostGroupAttachmentArrayOutput) Index(i pulumi.IntInput) SensorUpdatePolicyHostGroupAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SensorUpdatePolicyHostGroupAttachment {
		return vs[0].([]*SensorUpdatePolicyHostGroupAttachment)[vs[1].(int)]
	}).(SensorUpdatePolicyHostGroupAttachmentOutput)
}

type SensorUpdatePolicyHostGroupAttachmentMapOutput struct{ *pulumi.OutputState }

func (SensorUpdatePolicyHostGroupAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorUpdatePolicyHostGroupAttachment)(nil)).Elem()
}

func (o SensorUpdatePolicyHostGroupAttachmentMapOutput) ToSensorUpdatePolicyHostGroupAttachmentMapOutput() SensorUpdatePolicyHostGroupAttachmentMapOutput {
	return o
}

func (o SensorUpdatePolicyHostGroupAttachmentMapOutput) ToSensorUpdatePolicyHostGroupAttachmentMapOutputWithContext(ctx context.Context) SensorUpdatePolicyHostGroupAttachmentMapOutput {
	return o
}

func (o SensorUpdatePolicyHostGroupAttachmentMapOutput) MapIndex(k pulumi.StringInput) SensorUpdatePolicyHostGroupAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SensorUpdatePolicyHostGroupAttachment {
		return vs[0].(map[string]*SensorUpdatePolicyHostGroupAttachment)[vs[1].(string)]
	}).(SensorUpdatePolicyHostGroupAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensorUpdatePolicyHostGroupAttachmentInput)(nil)).Elem(), &SensorUpdatePolicyHostGroupAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorUpdatePolicyHostGroupAttachmentArrayInput)(nil)).Elem(), SensorUpdatePolicyHostGroupAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorUpdatePolicyHostGroupAttachmentMapInput)(nil)).Elem(), SensorUpdatePolicyHostGroupAttachmentMap{})
	pulumi.RegisterOutputType(SensorUpdatePolicyHostGroupAttachmentOutput{})
	pulumi.RegisterOutputType(SensorUpdatePolicyHostGroupAttachmentArrayOutput{})
	pulumi.RegisterOutputType(SensorUpdatePolicyHostGroupAttachmentMapOutput{})
}
