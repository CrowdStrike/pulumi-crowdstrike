// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package crowdstrike

import (
	"context"
	"reflect"

	"errors"
	"github.com/crowdstrike/pulumi-crowdstrike/sdk/go/crowdstrike/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows management of sensor update policies in the CrowdStrike Falcon platform. Sensor update policies allow you to control the update process across a set of hosts.
//
// ## API Scopes
//
// The following API scopes are required:
//
// - Sensor update policies | Read & Write
//
// ## Import
//
// prevention policy can be imported by specifying the policy id.
//
// ```sh
// $ pulumi import crowdstrike:index/sensorUpdatePolicy:SensorUpdatePolicy example 7fb858a949034a0cbca175f660f1e769
// ```
type SensorUpdatePolicy struct {
	pulumi.CustomResourceState

	// Sensor build to use for the sensor update policy.
	Build pulumi.StringOutput `pulumi:"build"`
	// Sensor arm64 build to use for the sensor update policy (Linux only). Required if platformName is Linux.
	BuildArm64 pulumi.StringPtrOutput `pulumi:"buildArm64"`
	// Description of the sensor update policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enable the sensor update policy.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Host Group ids to attach to the sensor update policy.
	HostGroups  pulumi.StringArrayOutput `pulumi:"hostGroups"`
	LastUpdated pulumi.StringOutput      `pulumi:"lastUpdated"`
	// Name of the sensor update policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// Platform for the sensor update policy to manage. (Windows, Mac, Linux)
	PlatformName pulumi.StringOutput `pulumi:"platformName"`
	// Prohibit sensor updates during a set of time blocks.
	Schedule SensorUpdatePolicyScheduleOutput `pulumi:"schedule"`
	// Enable uninstall protection. Windows and Mac only.
	UninstallProtection pulumi.BoolOutput `pulumi:"uninstallProtection"`
}

// NewSensorUpdatePolicy registers a new resource with the given unique name, arguments, and options.
func NewSensorUpdatePolicy(ctx *pulumi.Context,
	name string, args *SensorUpdatePolicyArgs, opts ...pulumi.ResourceOption) (*SensorUpdatePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Build == nil {
		return nil, errors.New("invalid value for required argument 'Build'")
	}
	if args.PlatformName == nil {
		return nil, errors.New("invalid value for required argument 'PlatformName'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SensorUpdatePolicy
	err := ctx.RegisterResource("crowdstrike:index/sensorUpdatePolicy:SensorUpdatePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensorUpdatePolicy gets an existing SensorUpdatePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensorUpdatePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensorUpdatePolicyState, opts ...pulumi.ResourceOption) (*SensorUpdatePolicy, error) {
	var resource SensorUpdatePolicy
	err := ctx.ReadResource("crowdstrike:index/sensorUpdatePolicy:SensorUpdatePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SensorUpdatePolicy resources.
type sensorUpdatePolicyState struct {
	// Sensor build to use for the sensor update policy.
	Build *string `pulumi:"build"`
	// Sensor arm64 build to use for the sensor update policy (Linux only). Required if platformName is Linux.
	BuildArm64 *string `pulumi:"buildArm64"`
	// Description of the sensor update policy.
	Description *string `pulumi:"description"`
	// Enable the sensor update policy.
	Enabled *bool `pulumi:"enabled"`
	// Host Group ids to attach to the sensor update policy.
	HostGroups  []string `pulumi:"hostGroups"`
	LastUpdated *string  `pulumi:"lastUpdated"`
	// Name of the sensor update policy.
	Name *string `pulumi:"name"`
	// Platform for the sensor update policy to manage. (Windows, Mac, Linux)
	PlatformName *string `pulumi:"platformName"`
	// Prohibit sensor updates during a set of time blocks.
	Schedule *SensorUpdatePolicySchedule `pulumi:"schedule"`
	// Enable uninstall protection. Windows and Mac only.
	UninstallProtection *bool `pulumi:"uninstallProtection"`
}

type SensorUpdatePolicyState struct {
	// Sensor build to use for the sensor update policy.
	Build pulumi.StringPtrInput
	// Sensor arm64 build to use for the sensor update policy (Linux only). Required if platformName is Linux.
	BuildArm64 pulumi.StringPtrInput
	// Description of the sensor update policy.
	Description pulumi.StringPtrInput
	// Enable the sensor update policy.
	Enabled pulumi.BoolPtrInput
	// Host Group ids to attach to the sensor update policy.
	HostGroups  pulumi.StringArrayInput
	LastUpdated pulumi.StringPtrInput
	// Name of the sensor update policy.
	Name pulumi.StringPtrInput
	// Platform for the sensor update policy to manage. (Windows, Mac, Linux)
	PlatformName pulumi.StringPtrInput
	// Prohibit sensor updates during a set of time blocks.
	Schedule SensorUpdatePolicySchedulePtrInput
	// Enable uninstall protection. Windows and Mac only.
	UninstallProtection pulumi.BoolPtrInput
}

func (SensorUpdatePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorUpdatePolicyState)(nil)).Elem()
}

type sensorUpdatePolicyArgs struct {
	// Sensor build to use for the sensor update policy.
	Build string `pulumi:"build"`
	// Sensor arm64 build to use for the sensor update policy (Linux only). Required if platformName is Linux.
	BuildArm64 *string `pulumi:"buildArm64"`
	// Description of the sensor update policy.
	Description *string `pulumi:"description"`
	// Enable the sensor update policy.
	Enabled *bool `pulumi:"enabled"`
	// Host Group ids to attach to the sensor update policy.
	HostGroups []string `pulumi:"hostGroups"`
	// Name of the sensor update policy.
	Name *string `pulumi:"name"`
	// Platform for the sensor update policy to manage. (Windows, Mac, Linux)
	PlatformName string `pulumi:"platformName"`
	// Prohibit sensor updates during a set of time blocks.
	Schedule SensorUpdatePolicySchedule `pulumi:"schedule"`
	// Enable uninstall protection. Windows and Mac only.
	UninstallProtection *bool `pulumi:"uninstallProtection"`
}

// The set of arguments for constructing a SensorUpdatePolicy resource.
type SensorUpdatePolicyArgs struct {
	// Sensor build to use for the sensor update policy.
	Build pulumi.StringInput
	// Sensor arm64 build to use for the sensor update policy (Linux only). Required if platformName is Linux.
	BuildArm64 pulumi.StringPtrInput
	// Description of the sensor update policy.
	Description pulumi.StringPtrInput
	// Enable the sensor update policy.
	Enabled pulumi.BoolPtrInput
	// Host Group ids to attach to the sensor update policy.
	HostGroups pulumi.StringArrayInput
	// Name of the sensor update policy.
	Name pulumi.StringPtrInput
	// Platform for the sensor update policy to manage. (Windows, Mac, Linux)
	PlatformName pulumi.StringInput
	// Prohibit sensor updates during a set of time blocks.
	Schedule SensorUpdatePolicyScheduleInput
	// Enable uninstall protection. Windows and Mac only.
	UninstallProtection pulumi.BoolPtrInput
}

func (SensorUpdatePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorUpdatePolicyArgs)(nil)).Elem()
}

type SensorUpdatePolicyInput interface {
	pulumi.Input

	ToSensorUpdatePolicyOutput() SensorUpdatePolicyOutput
	ToSensorUpdatePolicyOutputWithContext(ctx context.Context) SensorUpdatePolicyOutput
}

func (*SensorUpdatePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorUpdatePolicy)(nil)).Elem()
}

func (i *SensorUpdatePolicy) ToSensorUpdatePolicyOutput() SensorUpdatePolicyOutput {
	return i.ToSensorUpdatePolicyOutputWithContext(context.Background())
}

func (i *SensorUpdatePolicy) ToSensorUpdatePolicyOutputWithContext(ctx context.Context) SensorUpdatePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorUpdatePolicyOutput)
}

// SensorUpdatePolicyArrayInput is an input type that accepts SensorUpdatePolicyArray and SensorUpdatePolicyArrayOutput values.
// You can construct a concrete instance of `SensorUpdatePolicyArrayInput` via:
//
//	SensorUpdatePolicyArray{ SensorUpdatePolicyArgs{...} }
type SensorUpdatePolicyArrayInput interface {
	pulumi.Input

	ToSensorUpdatePolicyArrayOutput() SensorUpdatePolicyArrayOutput
	ToSensorUpdatePolicyArrayOutputWithContext(context.Context) SensorUpdatePolicyArrayOutput
}

type SensorUpdatePolicyArray []SensorUpdatePolicyInput

func (SensorUpdatePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorUpdatePolicy)(nil)).Elem()
}

func (i SensorUpdatePolicyArray) ToSensorUpdatePolicyArrayOutput() SensorUpdatePolicyArrayOutput {
	return i.ToSensorUpdatePolicyArrayOutputWithContext(context.Background())
}

func (i SensorUpdatePolicyArray) ToSensorUpdatePolicyArrayOutputWithContext(ctx context.Context) SensorUpdatePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorUpdatePolicyArrayOutput)
}

// SensorUpdatePolicyMapInput is an input type that accepts SensorUpdatePolicyMap and SensorUpdatePolicyMapOutput values.
// You can construct a concrete instance of `SensorUpdatePolicyMapInput` via:
//
//	SensorUpdatePolicyMap{ "key": SensorUpdatePolicyArgs{...} }
type SensorUpdatePolicyMapInput interface {
	pulumi.Input

	ToSensorUpdatePolicyMapOutput() SensorUpdatePolicyMapOutput
	ToSensorUpdatePolicyMapOutputWithContext(context.Context) SensorUpdatePolicyMapOutput
}

type SensorUpdatePolicyMap map[string]SensorUpdatePolicyInput

func (SensorUpdatePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorUpdatePolicy)(nil)).Elem()
}

func (i SensorUpdatePolicyMap) ToSensorUpdatePolicyMapOutput() SensorUpdatePolicyMapOutput {
	return i.ToSensorUpdatePolicyMapOutputWithContext(context.Background())
}

func (i SensorUpdatePolicyMap) ToSensorUpdatePolicyMapOutputWithContext(ctx context.Context) SensorUpdatePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorUpdatePolicyMapOutput)
}

type SensorUpdatePolicyOutput struct{ *pulumi.OutputState }

func (SensorUpdatePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorUpdatePolicy)(nil)).Elem()
}

func (o SensorUpdatePolicyOutput) ToSensorUpdatePolicyOutput() SensorUpdatePolicyOutput {
	return o
}

func (o SensorUpdatePolicyOutput) ToSensorUpdatePolicyOutputWithContext(ctx context.Context) SensorUpdatePolicyOutput {
	return o
}

// Sensor build to use for the sensor update policy.
func (o SensorUpdatePolicyOutput) Build() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorUpdatePolicy) pulumi.StringOutput { return v.Build }).(pulumi.StringOutput)
}

// Sensor arm64 build to use for the sensor update policy (Linux only). Required if platformName is Linux.
func (o SensorUpdatePolicyOutput) BuildArm64() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SensorUpdatePolicy) pulumi.StringPtrOutput { return v.BuildArm64 }).(pulumi.StringPtrOutput)
}

// Description of the sensor update policy.
func (o SensorUpdatePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SensorUpdatePolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enable the sensor update policy.
func (o SensorUpdatePolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SensorUpdatePolicy) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Host Group ids to attach to the sensor update policy.
func (o SensorUpdatePolicyOutput) HostGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensorUpdatePolicy) pulumi.StringArrayOutput { return v.HostGroups }).(pulumi.StringArrayOutput)
}

func (o SensorUpdatePolicyOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorUpdatePolicy) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// Name of the sensor update policy.
func (o SensorUpdatePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorUpdatePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Platform for the sensor update policy to manage. (Windows, Mac, Linux)
func (o SensorUpdatePolicyOutput) PlatformName() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorUpdatePolicy) pulumi.StringOutput { return v.PlatformName }).(pulumi.StringOutput)
}

// Prohibit sensor updates during a set of time blocks.
func (o SensorUpdatePolicyOutput) Schedule() SensorUpdatePolicyScheduleOutput {
	return o.ApplyT(func(v *SensorUpdatePolicy) SensorUpdatePolicyScheduleOutput { return v.Schedule }).(SensorUpdatePolicyScheduleOutput)
}

// Enable uninstall protection. Windows and Mac only.
func (o SensorUpdatePolicyOutput) UninstallProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *SensorUpdatePolicy) pulumi.BoolOutput { return v.UninstallProtection }).(pulumi.BoolOutput)
}

type SensorUpdatePolicyArrayOutput struct{ *pulumi.OutputState }

func (SensorUpdatePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorUpdatePolicy)(nil)).Elem()
}

func (o SensorUpdatePolicyArrayOutput) ToSensorUpdatePolicyArrayOutput() SensorUpdatePolicyArrayOutput {
	return o
}

func (o SensorUpdatePolicyArrayOutput) ToSensorUpdatePolicyArrayOutputWithContext(ctx context.Context) SensorUpdatePolicyArrayOutput {
	return o
}

func (o SensorUpdatePolicyArrayOutput) Index(i pulumi.IntInput) SensorUpdatePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SensorUpdatePolicy {
		return vs[0].([]*SensorUpdatePolicy)[vs[1].(int)]
	}).(SensorUpdatePolicyOutput)
}

type SensorUpdatePolicyMapOutput struct{ *pulumi.OutputState }

func (SensorUpdatePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorUpdatePolicy)(nil)).Elem()
}

func (o SensorUpdatePolicyMapOutput) ToSensorUpdatePolicyMapOutput() SensorUpdatePolicyMapOutput {
	return o
}

func (o SensorUpdatePolicyMapOutput) ToSensorUpdatePolicyMapOutputWithContext(ctx context.Context) SensorUpdatePolicyMapOutput {
	return o
}

func (o SensorUpdatePolicyMapOutput) MapIndex(k pulumi.StringInput) SensorUpdatePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SensorUpdatePolicy {
		return vs[0].(map[string]*SensorUpdatePolicy)[vs[1].(string)]
	}).(SensorUpdatePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensorUpdatePolicyInput)(nil)).Elem(), &SensorUpdatePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorUpdatePolicyArrayInput)(nil)).Elem(), SensorUpdatePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorUpdatePolicyMapInput)(nil)).Elem(), SensorUpdatePolicyMap{})
	pulumi.RegisterOutputType(SensorUpdatePolicyOutput{})
	pulumi.RegisterOutputType(SensorUpdatePolicyArrayOutput{})
	pulumi.RegisterOutputType(SensorUpdatePolicyMapOutput{})
}
