// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CrowdStrike.Crowdstrike
{
    /// <summary>
    /// This resource allows management of a FileVantage policy. A FileVantage policy is a collection of file integrity rules and rule groups that you can apply to host groups.
    /// 
    /// ## API Scopes
    /// 
    /// The following API scopes are required:
    /// 
    /// - Falcon FileVantage | Read &amp; Write
    /// 
    /// ## Import
    /// 
    /// filvantage policy can be imported by specifying the policy id.
    /// 
    /// ```sh
    /// $ pulumi import crowdstrike:index/filevantagePolicy:FilevantagePolicy example 7fb858a949034a0cbca175f660f1e769
    /// ```
    /// </summary>
    [CrowdstrikeResourceType("crowdstrike:index/filevantagePolicy:FilevantagePolicy")]
    public partial class FilevantagePolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the filevantage policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable the filevantage policy.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Host Group ids to attach to the filevantage policy.
        /// </summary>
        [Output("hostGroups")]
        public Output<ImmutableArray<string>> HostGroups { get; private set; } = null!;

        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// Name of the filevantage policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Platform for the filevantage policy to manage. (Windows, Mac, Linux)
        /// </summary>
        [Output("platformName")]
        public Output<string> PlatformName { get; private set; } = null!;

        /// <summary>
        /// Rule Group ids to attach to the filevantage policy. Precedence is based on the order of the list. Rule groups must be the same type as the policy.
        /// </summary>
        [Output("ruleGroups")]
        public Output<ImmutableArray<string>> RuleGroups { get; private set; } = null!;

        /// <summary>
        /// Scheduled exclusions for the filevantage policy.
        /// </summary>
        [Output("scheduledExclusions")]
        public Output<ImmutableArray<Outputs.FilevantagePolicyScheduledExclusion>> ScheduledExclusions { get; private set; } = null!;


        /// <summary>
        /// Create a FilevantagePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FilevantagePolicy(string name, FilevantagePolicyArgs args, CustomResourceOptions? options = null)
            : base("crowdstrike:index/filevantagePolicy:FilevantagePolicy", name, args ?? new FilevantagePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FilevantagePolicy(string name, Input<string> id, FilevantagePolicyState? state = null, CustomResourceOptions? options = null)
            : base("crowdstrike:index/filevantagePolicy:FilevantagePolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/crowdstrike/pulumi-crowdstrike",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FilevantagePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FilevantagePolicy Get(string name, Input<string> id, FilevantagePolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new FilevantagePolicy(name, id, state, options);
        }
    }

    public sealed class FilevantagePolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the filevantage policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable the filevantage policy.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("hostGroups")]
        private InputList<string>? _hostGroups;

        /// <summary>
        /// Host Group ids to attach to the filevantage policy.
        /// </summary>
        public InputList<string> HostGroups
        {
            get => _hostGroups ?? (_hostGroups = new InputList<string>());
            set => _hostGroups = value;
        }

        /// <summary>
        /// Name of the filevantage policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Platform for the filevantage policy to manage. (Windows, Mac, Linux)
        /// </summary>
        [Input("platformName", required: true)]
        public Input<string> PlatformName { get; set; } = null!;

        [Input("ruleGroups")]
        private InputList<string>? _ruleGroups;

        /// <summary>
        /// Rule Group ids to attach to the filevantage policy. Precedence is based on the order of the list. Rule groups must be the same type as the policy.
        /// </summary>
        public InputList<string> RuleGroups
        {
            get => _ruleGroups ?? (_ruleGroups = new InputList<string>());
            set => _ruleGroups = value;
        }

        [Input("scheduledExclusions")]
        private InputList<Inputs.FilevantagePolicyScheduledExclusionArgs>? _scheduledExclusions;

        /// <summary>
        /// Scheduled exclusions for the filevantage policy.
        /// </summary>
        public InputList<Inputs.FilevantagePolicyScheduledExclusionArgs> ScheduledExclusions
        {
            get => _scheduledExclusions ?? (_scheduledExclusions = new InputList<Inputs.FilevantagePolicyScheduledExclusionArgs>());
            set => _scheduledExclusions = value;
        }

        public FilevantagePolicyArgs()
        {
        }
        public static new FilevantagePolicyArgs Empty => new FilevantagePolicyArgs();
    }

    public sealed class FilevantagePolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the filevantage policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable the filevantage policy.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("hostGroups")]
        private InputList<string>? _hostGroups;

        /// <summary>
        /// Host Group ids to attach to the filevantage policy.
        /// </summary>
        public InputList<string> HostGroups
        {
            get => _hostGroups ?? (_hostGroups = new InputList<string>());
            set => _hostGroups = value;
        }

        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        /// <summary>
        /// Name of the filevantage policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Platform for the filevantage policy to manage. (Windows, Mac, Linux)
        /// </summary>
        [Input("platformName")]
        public Input<string>? PlatformName { get; set; }

        [Input("ruleGroups")]
        private InputList<string>? _ruleGroups;

        /// <summary>
        /// Rule Group ids to attach to the filevantage policy. Precedence is based on the order of the list. Rule groups must be the same type as the policy.
        /// </summary>
        public InputList<string> RuleGroups
        {
            get => _ruleGroups ?? (_ruleGroups = new InputList<string>());
            set => _ruleGroups = value;
        }

        [Input("scheduledExclusions")]
        private InputList<Inputs.FilevantagePolicyScheduledExclusionGetArgs>? _scheduledExclusions;

        /// <summary>
        /// Scheduled exclusions for the filevantage policy.
        /// </summary>
        public InputList<Inputs.FilevantagePolicyScheduledExclusionGetArgs> ScheduledExclusions
        {
            get => _scheduledExclusions ?? (_scheduledExclusions = new InputList<Inputs.FilevantagePolicyScheduledExclusionGetArgs>());
            set => _scheduledExclusions = value;
        }

        public FilevantagePolicyState()
        {
        }
        public static new FilevantagePolicyState Empty => new FilevantagePolicyState();
    }
}
