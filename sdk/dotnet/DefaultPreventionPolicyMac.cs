// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CrowdStrike.Crowdstrike
{
    /// <summary>
    /// This resource allows you to manage the default prevention policy for Mac hosts. Prevention policies allow you to manage what activity will trigger detections and preventions on your hosts.
    /// 
    /// ## API Scopes
    /// 
    /// The following API scopes are required:
    /// 
    /// - Prevention policies | Read &amp; Write
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Crowdstrike = CrowdStrike.Crowdstrike;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Crowdstrike.DefaultPreventionPolicyMac("default", new()
    ///     {
    ///         Description = "managed by terraform",
    ///         IoaRuleGroups = new[] {},
    ///         CloudAdwareAndPup = new Crowdstrike.Inputs.DefaultPreventionPolicyMacCloudAdwareAndPupArgs
    ///         {
    ///             Detection = "MODERATE",
    ///             Prevention = "CAUTIOUS",
    ///         },
    ///         CloudAntiMalware = new Crowdstrike.Inputs.DefaultPreventionPolicyMacCloudAntiMalwareArgs
    ///         {
    ///             Detection = "MODERATE",
    ///             Prevention = "CAUTIOUS",
    ///         },
    ///         SensorAntiMalware = new Crowdstrike.Inputs.DefaultPreventionPolicyMacSensorAntiMalwareArgs
    ///         {
    ///             Detection = "MODERATE",
    ///             Prevention = "CAUTIOUS",
    ///         },
    ///         SensorAdwareAndPup = new Crowdstrike.Inputs.DefaultPreventionPolicyMacSensorAdwareAndPupArgs
    ///         {
    ///             Detection = "MODERATE",
    ///             Prevention = "CAUTIOUS",
    ///         },
    ///         NotifyEndUsers = true,
    ///         CustomBlocking = true,
    ///         DetectOnWrite = true,
    ///         IntelligenceSourcedThreats = true,
    ///         PreventSuspiciousProcesses = true,
    ///         Quarantine = true,
    ///         QuarantineOnWrite = true,
    ///         ScriptBasedExecutionMonitoring = true,
    ///         SensorTamperingProtection = true,
    ///         UploadUnknownExecutables = true,
    ///         UploadUnknownDetectionRelatedExecutables = true,
    ///         XpcomShell = true,
    ///         KcPasswordDecoded = true,
    ///         HashCollector = true,
    ///         EmpyreBackdoor = true,
    ///         ChopperWebshell = true,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["defaultPreventionPolicyMac"] = @default,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The windows default prevention policy can be imported by specifying the id.
    /// 
    /// ```sh
    /// $ pulumi import crowdstrike:index/defaultPreventionPolicyMac:DefaultPreventionPolicyMac default 7fb858a949034a0cbca175f660f1e769
    /// ```
    /// </summary>
    [CrowdstrikeResourceType("crowdstrike:index/defaultPreventionPolicyMac:DefaultPreventionPolicyMac")]
    public partial class DefaultPreventionPolicyMac : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        /// </summary>
        [Output("chopperWebshell")]
        public Output<bool> ChopperWebshell { get; private set; } = null!;

        /// <summary>
        /// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        /// </summary>
        [Output("cloudAdwareAndPup")]
        public Output<Outputs.DefaultPreventionPolicyMacCloudAdwareAndPup> CloudAdwareAndPup { get; private set; } = null!;

        /// <summary>
        /// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        /// </summary>
        [Output("cloudAntiMalware")]
        public Output<Outputs.DefaultPreventionPolicyMacCloudAntiMalware> CloudAntiMalware { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        /// </summary>
        [Output("customBlocking")]
        public Output<bool> CustomBlocking { get; private set; } = null!;

        /// <summary>
        /// Description of the prevention policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        /// </summary>
        [Output("detectOnWrite")]
        public Output<bool> DetectOnWrite { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
        /// </summary>
        [Output("empyreBackdoor")]
        public Output<bool> EmpyreBackdoor { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
        /// </summary>
        [Output("hashCollector")]
        public Output<bool> HashCollector { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        /// </summary>
        [Output("intelligenceSourcedThreats")]
        public Output<bool> IntelligenceSourcedThreats { get; private set; } = null!;

        /// <summary>
        /// IOA Rule Group to attach to the prevention policy.
        /// </summary>
        [Output("ioaRuleGroups")]
        public Output<ImmutableArray<string>> IoaRuleGroups { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
        /// </summary>
        [Output("kcPasswordDecoded")]
        public Output<bool> KcPasswordDecoded { get; private set; } = null!;

        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
        /// </summary>
        [Output("notifyEndUsers")]
        public Output<bool> NotifyEndUsers { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        /// </summary>
        [Output("preventSuspiciousProcesses")]
        public Output<bool> PreventSuspiciousProcesses { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        /// </summary>
        [Output("quarantine")]
        public Output<bool> Quarantine { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        /// </summary>
        [Output("quarantineOnWrite")]
        public Output<bool> QuarantineOnWrite { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        /// </summary>
        [Output("scriptBasedExecutionMonitoring")]
        public Output<bool> ScriptBasedExecutionMonitoring { get; private set; } = null!;

        /// <summary>
        /// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
        /// </summary>
        [Output("sensorAdwareAndPup")]
        public Output<Outputs.DefaultPreventionPolicyMacSensorAdwareAndPup> SensorAdwareAndPup { get; private set; } = null!;

        /// <summary>
        /// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        /// </summary>
        [Output("sensorAntiMalware")]
        public Output<Outputs.DefaultPreventionPolicyMacSensorAntiMalware> SensorAntiMalware { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        /// </summary>
        [Output("sensorTamperingProtection")]
        public Output<bool> SensorTamperingProtection { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        /// </summary>
        [Output("uploadUnknownDetectionRelatedExecutables")]
        public Output<bool> UploadUnknownDetectionRelatedExecutables { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        /// </summary>
        [Output("uploadUnknownExecutables")]
        public Output<bool> UploadUnknownExecutables { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. The execution of an XPCOM shell was blocked.
        /// </summary>
        [Output("xpcomShell")]
        public Output<bool> XpcomShell { get; private set; } = null!;


        /// <summary>
        /// Create a DefaultPreventionPolicyMac resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DefaultPreventionPolicyMac(string name, DefaultPreventionPolicyMacArgs args, CustomResourceOptions? options = null)
            : base("crowdstrike:index/defaultPreventionPolicyMac:DefaultPreventionPolicyMac", name, args ?? new DefaultPreventionPolicyMacArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DefaultPreventionPolicyMac(string name, Input<string> id, DefaultPreventionPolicyMacState? state = null, CustomResourceOptions? options = null)
            : base("crowdstrike:index/defaultPreventionPolicyMac:DefaultPreventionPolicyMac", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/crowdstrike/pulumi-crowdstrike",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DefaultPreventionPolicyMac resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DefaultPreventionPolicyMac Get(string name, Input<string> id, DefaultPreventionPolicyMacState? state = null, CustomResourceOptions? options = null)
        {
            return new DefaultPreventionPolicyMac(name, id, state, options);
        }
    }

    public sealed class DefaultPreventionPolicyMacArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        /// </summary>
        [Input("chopperWebshell")]
        public Input<bool>? ChopperWebshell { get; set; }

        /// <summary>
        /// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        /// </summary>
        [Input("cloudAdwareAndPup")]
        public Input<Inputs.DefaultPreventionPolicyMacCloudAdwareAndPupArgs>? CloudAdwareAndPup { get; set; }

        /// <summary>
        /// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        /// </summary>
        [Input("cloudAntiMalware")]
        public Input<Inputs.DefaultPreventionPolicyMacCloudAntiMalwareArgs>? CloudAntiMalware { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        /// </summary>
        [Input("customBlocking")]
        public Input<bool>? CustomBlocking { get; set; }

        /// <summary>
        /// Description of the prevention policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        /// </summary>
        [Input("detectOnWrite")]
        public Input<bool>? DetectOnWrite { get; set; }

        /// <summary>
        /// Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
        /// </summary>
        [Input("empyreBackdoor")]
        public Input<bool>? EmpyreBackdoor { get; set; }

        /// <summary>
        /// Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
        /// </summary>
        [Input("hashCollector")]
        public Input<bool>? HashCollector { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        /// </summary>
        [Input("intelligenceSourcedThreats")]
        public Input<bool>? IntelligenceSourcedThreats { get; set; }

        [Input("ioaRuleGroups", required: true)]
        private InputList<string>? _ioaRuleGroups;

        /// <summary>
        /// IOA Rule Group to attach to the prevention policy.
        /// </summary>
        public InputList<string> IoaRuleGroups
        {
            get => _ioaRuleGroups ?? (_ioaRuleGroups = new InputList<string>());
            set => _ioaRuleGroups = value;
        }

        /// <summary>
        /// Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
        /// </summary>
        [Input("kcPasswordDecoded")]
        public Input<bool>? KcPasswordDecoded { get; set; }

        /// <summary>
        /// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
        /// </summary>
        [Input("notifyEndUsers")]
        public Input<bool>? NotifyEndUsers { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        /// </summary>
        [Input("preventSuspiciousProcesses")]
        public Input<bool>? PreventSuspiciousProcesses { get; set; }

        /// <summary>
        /// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        /// </summary>
        [Input("quarantine")]
        public Input<bool>? Quarantine { get; set; }

        /// <summary>
        /// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        /// </summary>
        [Input("quarantineOnWrite")]
        public Input<bool>? QuarantineOnWrite { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        /// </summary>
        [Input("scriptBasedExecutionMonitoring")]
        public Input<bool>? ScriptBasedExecutionMonitoring { get; set; }

        /// <summary>
        /// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
        /// </summary>
        [Input("sensorAdwareAndPup")]
        public Input<Inputs.DefaultPreventionPolicyMacSensorAdwareAndPupArgs>? SensorAdwareAndPup { get; set; }

        /// <summary>
        /// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        /// </summary>
        [Input("sensorAntiMalware")]
        public Input<Inputs.DefaultPreventionPolicyMacSensorAntiMalwareArgs>? SensorAntiMalware { get; set; }

        /// <summary>
        /// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        /// </summary>
        [Input("sensorTamperingProtection")]
        public Input<bool>? SensorTamperingProtection { get; set; }

        /// <summary>
        /// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        /// </summary>
        [Input("uploadUnknownDetectionRelatedExecutables")]
        public Input<bool>? UploadUnknownDetectionRelatedExecutables { get; set; }

        /// <summary>
        /// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        /// </summary>
        [Input("uploadUnknownExecutables")]
        public Input<bool>? UploadUnknownExecutables { get; set; }

        /// <summary>
        /// Whether to enable the setting. The execution of an XPCOM shell was blocked.
        /// </summary>
        [Input("xpcomShell")]
        public Input<bool>? XpcomShell { get; set; }

        public DefaultPreventionPolicyMacArgs()
        {
        }
        public static new DefaultPreventionPolicyMacArgs Empty => new DefaultPreventionPolicyMacArgs();
    }

    public sealed class DefaultPreventionPolicyMacState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        /// </summary>
        [Input("chopperWebshell")]
        public Input<bool>? ChopperWebshell { get; set; }

        /// <summary>
        /// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        /// </summary>
        [Input("cloudAdwareAndPup")]
        public Input<Inputs.DefaultPreventionPolicyMacCloudAdwareAndPupGetArgs>? CloudAdwareAndPup { get; set; }

        /// <summary>
        /// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        /// </summary>
        [Input("cloudAntiMalware")]
        public Input<Inputs.DefaultPreventionPolicyMacCloudAntiMalwareGetArgs>? CloudAntiMalware { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        /// </summary>
        [Input("customBlocking")]
        public Input<bool>? CustomBlocking { get; set; }

        /// <summary>
        /// Description of the prevention policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        /// </summary>
        [Input("detectOnWrite")]
        public Input<bool>? DetectOnWrite { get; set; }

        /// <summary>
        /// Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
        /// </summary>
        [Input("empyreBackdoor")]
        public Input<bool>? EmpyreBackdoor { get; set; }

        /// <summary>
        /// Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
        /// </summary>
        [Input("hashCollector")]
        public Input<bool>? HashCollector { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        /// </summary>
        [Input("intelligenceSourcedThreats")]
        public Input<bool>? IntelligenceSourcedThreats { get; set; }

        [Input("ioaRuleGroups")]
        private InputList<string>? _ioaRuleGroups;

        /// <summary>
        /// IOA Rule Group to attach to the prevention policy.
        /// </summary>
        public InputList<string> IoaRuleGroups
        {
            get => _ioaRuleGroups ?? (_ioaRuleGroups = new InputList<string>());
            set => _ioaRuleGroups = value;
        }

        /// <summary>
        /// Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
        /// </summary>
        [Input("kcPasswordDecoded")]
        public Input<bool>? KcPasswordDecoded { get; set; }

        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        /// <summary>
        /// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
        /// </summary>
        [Input("notifyEndUsers")]
        public Input<bool>? NotifyEndUsers { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        /// </summary>
        [Input("preventSuspiciousProcesses")]
        public Input<bool>? PreventSuspiciousProcesses { get; set; }

        /// <summary>
        /// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        /// </summary>
        [Input("quarantine")]
        public Input<bool>? Quarantine { get; set; }

        /// <summary>
        /// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        /// </summary>
        [Input("quarantineOnWrite")]
        public Input<bool>? QuarantineOnWrite { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        /// </summary>
        [Input("scriptBasedExecutionMonitoring")]
        public Input<bool>? ScriptBasedExecutionMonitoring { get; set; }

        /// <summary>
        /// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
        /// </summary>
        [Input("sensorAdwareAndPup")]
        public Input<Inputs.DefaultPreventionPolicyMacSensorAdwareAndPupGetArgs>? SensorAdwareAndPup { get; set; }

        /// <summary>
        /// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        /// </summary>
        [Input("sensorAntiMalware")]
        public Input<Inputs.DefaultPreventionPolicyMacSensorAntiMalwareGetArgs>? SensorAntiMalware { get; set; }

        /// <summary>
        /// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        /// </summary>
        [Input("sensorTamperingProtection")]
        public Input<bool>? SensorTamperingProtection { get; set; }

        /// <summary>
        /// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        /// </summary>
        [Input("uploadUnknownDetectionRelatedExecutables")]
        public Input<bool>? UploadUnknownDetectionRelatedExecutables { get; set; }

        /// <summary>
        /// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        /// </summary>
        [Input("uploadUnknownExecutables")]
        public Input<bool>? UploadUnknownExecutables { get; set; }

        /// <summary>
        /// Whether to enable the setting. The execution of an XPCOM shell was blocked.
        /// </summary>
        [Input("xpcomShell")]
        public Input<bool>? XpcomShell { get; set; }

        public DefaultPreventionPolicyMacState()
        {
        }
        public static new DefaultPreventionPolicyMacState Empty => new DefaultPreventionPolicyMacState();
    }
}
