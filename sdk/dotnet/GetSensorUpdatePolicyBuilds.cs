// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CrowdStrike.Crowdstrike
{
    public static class GetSensorUpdatePolicyBuilds
    {
        /// <summary>
        /// This data source provides information about the latest sensor builds for each platform.
        /// 
        /// ## API Scopes
        /// 
        /// The following API scopes are required:
        /// 
        /// - Sensor update policies | Write
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Crowdstrike = Pulumi.Crowdstrike;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var builds = Crowdstrike.GetSensorUpdatePolicyBuilds.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["latestWindowsBuild"] = builds.Apply(getSensorUpdatePolicyBuildsResult =&gt; getSensorUpdatePolicyBuildsResult.Windows?.Latest),
        ///         ["n1LinuxBuild"] = builds.Apply(getSensorUpdatePolicyBuildsResult =&gt; getSensorUpdatePolicyBuildsResult.Linux?.N1),
        ///         ["n2MacBuild"] = builds.Apply(getSensorUpdatePolicyBuildsResult =&gt; getSensorUpdatePolicyBuildsResult.Mac?.N2),
        ///         ["latestLinuxArm64Build"] = builds.Apply(getSensorUpdatePolicyBuildsResult =&gt; getSensorUpdatePolicyBuildsResult.LinuxArm64?.Latest),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetSensorUpdatePolicyBuildsResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSensorUpdatePolicyBuildsResult>("crowdstrike:index/getSensorUpdatePolicyBuilds:getSensorUpdatePolicyBuilds", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// This data source provides information about the latest sensor builds for each platform.
        /// 
        /// ## API Scopes
        /// 
        /// The following API scopes are required:
        /// 
        /// - Sensor update policies | Write
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Crowdstrike = Pulumi.Crowdstrike;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var builds = Crowdstrike.GetSensorUpdatePolicyBuilds.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["latestWindowsBuild"] = builds.Apply(getSensorUpdatePolicyBuildsResult =&gt; getSensorUpdatePolicyBuildsResult.Windows?.Latest),
        ///         ["n1LinuxBuild"] = builds.Apply(getSensorUpdatePolicyBuildsResult =&gt; getSensorUpdatePolicyBuildsResult.Linux?.N1),
        ///         ["n2MacBuild"] = builds.Apply(getSensorUpdatePolicyBuildsResult =&gt; getSensorUpdatePolicyBuildsResult.Mac?.N2),
        ///         ["latestLinuxArm64Build"] = builds.Apply(getSensorUpdatePolicyBuildsResult =&gt; getSensorUpdatePolicyBuildsResult.LinuxArm64?.Latest),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSensorUpdatePolicyBuildsResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSensorUpdatePolicyBuildsResult>("crowdstrike:index/getSensorUpdatePolicyBuilds:getSensorUpdatePolicyBuilds", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// This data source provides information about the latest sensor builds for each platform.
        /// 
        /// ## API Scopes
        /// 
        /// The following API scopes are required:
        /// 
        /// - Sensor update policies | Write
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Crowdstrike = Pulumi.Crowdstrike;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var builds = Crowdstrike.GetSensorUpdatePolicyBuilds.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["latestWindowsBuild"] = builds.Apply(getSensorUpdatePolicyBuildsResult =&gt; getSensorUpdatePolicyBuildsResult.Windows?.Latest),
        ///         ["n1LinuxBuild"] = builds.Apply(getSensorUpdatePolicyBuildsResult =&gt; getSensorUpdatePolicyBuildsResult.Linux?.N1),
        ///         ["n2MacBuild"] = builds.Apply(getSensorUpdatePolicyBuildsResult =&gt; getSensorUpdatePolicyBuildsResult.Mac?.N2),
        ///         ["latestLinuxArm64Build"] = builds.Apply(getSensorUpdatePolicyBuildsResult =&gt; getSensorUpdatePolicyBuildsResult.LinuxArm64?.Latest),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSensorUpdatePolicyBuildsResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSensorUpdatePolicyBuildsResult>("crowdstrike:index/getSensorUpdatePolicyBuilds:getSensorUpdatePolicyBuilds", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetSensorUpdatePolicyBuildsResult
    {
        /// <summary>
        /// Placeholder identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Builds for the Linux platform.
        /// </summary>
        public readonly Outputs.GetSensorUpdatePolicyBuildsLinuxResult Linux;
        /// <summary>
        /// Builds for the Linux platform (arm64).
        /// </summary>
        public readonly Outputs.GetSensorUpdatePolicyBuildsLinuxArm64Result LinuxArm64;
        /// <summary>
        /// Builds for the Mac platform.
        /// </summary>
        public readonly Outputs.GetSensorUpdatePolicyBuildsMacResult Mac;
        /// <summary>
        /// Builds for the Windows platform.
        /// </summary>
        public readonly Outputs.GetSensorUpdatePolicyBuildsWindowsResult Windows;

        [OutputConstructor]
        private GetSensorUpdatePolicyBuildsResult(
            string id,

            Outputs.GetSensorUpdatePolicyBuildsLinuxResult linux,

            Outputs.GetSensorUpdatePolicyBuildsLinuxArm64Result linuxArm64,

            Outputs.GetSensorUpdatePolicyBuildsMacResult mac,

            Outputs.GetSensorUpdatePolicyBuildsWindowsResult windows)
        {
            Id = id;
            Linux = linux;
            LinuxArm64 = linuxArm64;
            Mac = mac;
            Windows = windows;
        }
    }
}
