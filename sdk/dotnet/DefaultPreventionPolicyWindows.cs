// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CrowdStrike.Crowdstrike
{
    /// <summary>
    /// This resource allows you to manage the default prevention policy for Windows hosts. Prevention policies allow you to manage what activity will trigger detections and preventions on your hosts.
    /// 
    /// ## API Scopes
    /// 
    /// The following API scopes are required:
    /// 
    /// - Prevention policies | Read &amp; Write
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Crowdstrike = CrowdStrike.Crowdstrike;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Crowdstrike.DefaultPreventionPolicyWindows("default", new()
    ///     {
    ///         Description = "managed by terraform",
    ///         IoaRuleGroups = new[] {},
    ///         AdwareAndPup = new Crowdstrike.Inputs.DefaultPreventionPolicyWindowsAdwareAndPupArgs
    ///         {
    ///             Detection = "MODERATE",
    ///             Prevention = "CAUTIOUS",
    ///         },
    ///         CloudAntiMalwareMicrosoftOfficeFiles = new Crowdstrike.Inputs.DefaultPreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs
    ///         {
    ///             Detection = "MODERATE",
    ///             Prevention = "DISABLED",
    ///         },
    ///         CloudAntiMalware = new Crowdstrike.Inputs.DefaultPreventionPolicyWindowsCloudAntiMalwareArgs
    ///         {
    ///             Detection = "MODERATE",
    ///             Prevention = "CAUTIOUS",
    ///         },
    ///         CloudAntiMalwareUserInitiated = new Crowdstrike.Inputs.DefaultPreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs
    ///         {
    ///             Detection = "MODERATE",
    ///             Prevention = "CAUTIOUS",
    ///         },
    ///         SensorAntiMalware = new Crowdstrike.Inputs.DefaultPreventionPolicyWindowsSensorAntiMalwareArgs
    ///         {
    ///             Detection = "MODERATE",
    ///             Prevention = "CAUTIOUS",
    ///         },
    ///         SensorAntiMalwareUserInitiated = new Crowdstrike.Inputs.DefaultPreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs
    ///         {
    ///             Detection = "MODERATE",
    ///             Prevention = "CAUTIOUS",
    ///         },
    ///         ExtendedUserModeData = new Crowdstrike.Inputs.DefaultPreventionPolicyWindowsExtendedUserModeDataArgs
    ///         {
    ///             Detection = "MODERATE",
    ///         },
    ///         UsbInsertionTriggeredScan = true,
    ///         ApplicationExploitationActivity = true,
    ///         AdditionalUserModeData = true,
    ///         NotifyEndUsers = true,
    ///         AdvancedRemediation = true,
    ///         BackupDeletion = true,
    ///         BiosDeepVisibility = true,
    ///         ChopperWebshell = true,
    ///         CodeInjection = true,
    ///         CredentialDumping = true,
    ///         Cryptowall = true,
    ///         CustomBlocking = true,
    ///         DetectOnWrite = true,
    ///         DriveByDownload = true,
    ///         DriverLoadPrevention = true,
    ///         InterpreterOnly = true,
    ///         EngineFullVisibility = true,
    ///         EnhancedExploitationVisibility = true,
    ///         EnhancedDllLoadVisibility = true,
    ///         EnhancedMlForLargerFiles = true,
    ///         FileEncryption = true,
    ///         FileSystemAccess = true,
    ///         ForceAslr = true,
    ///         ForceDep = true,
    ///         HeapSprayPreallocation = true,
    ///         NullPageAllocation = true,
    ///         SehOverwriteProtection = true,
    ///         HardwareEnhancedExploitDetection = true,
    ///         HttpDetections = true,
    ///         RedactHttpDetectionDetails = true,
    ///         IntelligenceSourcedThreats = true,
    ///         JavascriptViaRundll32 = true,
    ///         Locky = true,
    ///         MemoryScanning = true,
    ///         MemoryScanningScanWithCpu = true,
    ///         MicrosoftOfficeFileSuspiciousMacroRemoval = true,
    ///         OnWriteScriptFileVisibility = true,
    ///         PreventSuspiciousProcesses = true,
    ///         QuarantineAndSecurityCenterRegistration = true,
    ///         QuarantineOnRemovableMedia = true,
    ///         QuarantineOnWrite = true,
    ///         ScriptBasedExecutionMonitoring = true,
    ///         SensorTamperingProtection = true,
    ///         SuspiciousRegistryOperations = true,
    ///         SuspiciousScriptsAndCommands = true,
    ///         UploadUnknownExecutables = true,
    ///         UploadUnknownDetectionRelatedExecutables = true,
    ///         VolumeShadowCopyAudit = true,
    ///         VolumeShadowCopyProtect = true,
    ///         VulnerableDriverProtection = true,
    ///         WindowsLogonBypassStickyKeys = true,
    ///         FileSystemContainment = true,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["defaultPreventionPolicyWindows"] = @default,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The linux default prevention policy can be imported by specifying the id.
    /// 
    /// ```sh
    /// $ pulumi import crowdstrike:index/defaultPreventionPolicyWindows:DefaultPreventionPolicyWindows default 7fb858a949034a0cbca175f660f1e769
    /// ```
    /// </summary>
    [CrowdstrikeResourceType("crowdstrike:index/defaultPreventionPolicyWindows:DefaultPreventionPolicyWindows")]
    public partial class DefaultPreventionPolicyWindows : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        /// </summary>
        [Output("additionalUserModeData")]
        public Output<bool> AdditionalUserModeData { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
        /// </summary>
        [Output("advancedRemediation")]
        public Output<bool> AdvancedRemediation { get; private set; } = null!;

        /// <summary>
        /// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        /// </summary>
        [Output("adwareAndPup")]
        public Output<Outputs.DefaultPreventionPolicyWindowsAdwareAndPup> AdwareAndPup { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
        /// </summary>
        [Output("applicationExploitationActivity")]
        public Output<bool> ApplicationExploitationActivity { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
        /// </summary>
        [Output("backupDeletion")]
        public Output<bool> BackupDeletion { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
        /// </summary>
        [Output("biosDeepVisibility")]
        public Output<bool> BiosDeepVisibility { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        /// </summary>
        [Output("chopperWebshell")]
        public Output<bool> ChopperWebshell { get; private set; } = null!;

        /// <summary>
        /// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        /// </summary>
        [Output("cloudAntiMalware")]
        public Output<Outputs.DefaultPreventionPolicyWindowsCloudAntiMalware> CloudAntiMalware { get; private set; } = null!;

        /// <summary>
        /// Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        /// </summary>
        [Output("cloudAntiMalwareMicrosoftOfficeFiles")]
        public Output<Outputs.DefaultPreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFiles> CloudAntiMalwareMicrosoftOfficeFiles { get; private set; } = null!;

        /// <summary>
        /// For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
        /// </summary>
        [Output("cloudAntiMalwareUserInitiated")]
        public Output<Outputs.DefaultPreventionPolicyWindowsCloudAntiMalwareUserInitiated> CloudAntiMalwareUserInitiated { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Output("codeInjection")]
        public Output<bool> CodeInjection { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Output("credentialDumping")]
        public Output<bool> CredentialDumping { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. A process associated with Cryptowall was blocked.
        /// </summary>
        [Output("cryptowall")]
        public Output<bool> Cryptowall { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        /// </summary>
        [Output("customBlocking")]
        public Output<bool> CustomBlocking { get; private set; } = null!;

        /// <summary>
        /// Description of the prevention policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        /// </summary>
        [Output("detectOnWrite")]
        public Output<bool> DetectOnWrite { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
        /// </summary>
        [Output("driveByDownload")]
        public Output<bool> DriveByDownload { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
        /// </summary>
        [Output("driverLoadPrevention")]
        public Output<bool> DriverLoadPrevention { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreter_only to be enabled.
        /// </summary>
        [Output("engineFullVisibility")]
        public Output<bool> EngineFullVisibility { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
        /// </summary>
        [Output("enhancedDllLoadVisibility")]
        public Output<bool> EnhancedDllLoadVisibility { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
        /// </summary>
        [Output("enhancedExploitationVisibility")]
        public Output<bool> EnhancedExploitationVisibility { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
        /// </summary>
        [Output("enhancedMlForLargerFiles")]
        public Output<bool> EnhancedMlForLargerFiles { get; private set; } = null!;

        /// <summary>
        /// Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        /// </summary>
        [Output("extendedUserModeData")]
        public Output<Outputs.DefaultPreventionPolicyWindowsExtendedUserModeData> ExtendedUserModeData { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
        /// </summary>
        [Output("fileEncryption")]
        public Output<bool> FileEncryption { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
        /// </summary>
        [Output("fileSystemAccess")]
        public Output<bool> FileSystemAccess { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
        /// </summary>
        [Output("fileSystemContainment")]
        public Output<bool> FileSystemContainment { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Output("forceAslr")]
        public Output<bool> ForceAslr { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Output("forceDep")]
        public Output<bool> ForceDep { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
        /// </summary>
        [Output("hardwareEnhancedExploitDetection")]
        public Output<bool> HardwareEnhancedExploitDetection { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Output("heapSprayPreallocation")]
        public Output<bool> HeapSprayPreallocation { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
        /// </summary>
        [Output("httpDetections")]
        public Output<bool> HttpDetections { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        /// </summary>
        [Output("intelligenceSourcedThreats")]
        public Output<bool> IntelligenceSourcedThreats { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
        /// </summary>
        [Output("interpreterOnly")]
        public Output<bool> InterpreterOnly { get; private set; } = null!;

        /// <summary>
        /// IOA Rule Group to attach to the prevention policy.
        /// </summary>
        [Output("ioaRuleGroups")]
        public Output<ImmutableArray<string>> IoaRuleGroups { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
        /// </summary>
        [Output("javascriptViaRundll32")]
        public Output<bool> JavascriptViaRundll32 { get; private set; } = null!;

        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. A process determined to be associated with Locky was blocked.
        /// </summary>
        [Output("locky")]
        public Output<bool> Locky { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
        /// </summary>
        [Output("memoryScanning")]
        public Output<bool> MemoryScanning { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
        /// </summary>
        [Output("memoryScanningScanWithCpu")]
        public Output<bool> MemoryScanningScanWithCpu { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        /// </summary>
        [Output("microsoftOfficeFileSuspiciousMacroRemoval")]
        public Output<bool> MicrosoftOfficeFileSuspiciousMacroRemoval { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
        /// </summary>
        [Output("notifyEndUsers")]
        public Output<bool> NotifyEndUsers { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Output("nullPageAllocation")]
        public Output<bool> NullPageAllocation { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        /// </summary>
        [Output("onWriteScriptFileVisibility")]
        public Output<bool> OnWriteScriptFileVisibility { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        /// </summary>
        [Output("preventSuspiciousProcesses")]
        public Output<bool> PreventSuspiciousProcesses { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
        /// </summary>
        [Output("quarantineAndSecurityCenterRegistration")]
        public Output<bool> QuarantineAndSecurityCenterRegistration { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
        /// </summary>
        [Output("quarantineOnRemovableMedia")]
        public Output<bool> QuarantineOnRemovableMedia { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        /// </summary>
        [Output("quarantineOnWrite")]
        public Output<bool> QuarantineOnWrite { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
        /// </summary>
        [Output("redactHttpDetectionDetails")]
        public Output<bool> RedactHttpDetectionDetails { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine &amp; Security Center Registration toggle to be enabled.
        /// </summary>
        [Output("scriptBasedExecutionMonitoring")]
        public Output<bool> ScriptBasedExecutionMonitoring { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Output("sehOverwriteProtection")]
        public Output<bool> SehOverwriteProtection { get; private set; } = null!;

        /// <summary>
        /// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        /// </summary>
        [Output("sensorAntiMalware")]
        public Output<Outputs.DefaultPreventionPolicyWindowsSensorAntiMalware> SensorAntiMalware { get; private set; } = null!;

        /// <summary>
        /// For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
        /// </summary>
        [Output("sensorAntiMalwareUserInitiated")]
        public Output<Outputs.DefaultPreventionPolicyWindowsSensorAntiMalwareUserInitiated> SensorAntiMalwareUserInitiated { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        /// </summary>
        [Output("sensorTamperingProtection")]
        public Output<bool> SensorTamperingProtection { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
        /// </summary>
        [Output("suspiciousRegistryOperations")]
        public Output<bool> SuspiciousRegistryOperations { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
        /// </summary>
        [Output("suspiciousScriptsAndCommands")]
        public Output<bool> SuspiciousScriptsAndCommands { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        /// </summary>
        [Output("uploadUnknownDetectionRelatedExecutables")]
        public Output<bool> UploadUnknownDetectionRelatedExecutables { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        /// </summary>
        [Output("uploadUnknownExecutables")]
        public Output<bool> UploadUnknownExecutables { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
        /// </summary>
        [Output("usbInsertionTriggeredScan")]
        public Output<bool> UsbInsertionTriggeredScan { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
        /// </summary>
        [Output("volumeShadowCopyAudit")]
        public Output<bool> VolumeShadowCopyAudit { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
        /// </summary>
        [Output("volumeShadowCopyProtect")]
        public Output<bool> VolumeShadowCopyProtect { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
        /// </summary>
        [Output("vulnerableDriverProtection")]
        public Output<bool> VulnerableDriverProtection { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
        /// </summary>
        [Output("windowsLogonBypassStickyKeys")]
        public Output<bool> WindowsLogonBypassStickyKeys { get; private set; } = null!;


        /// <summary>
        /// Create a DefaultPreventionPolicyWindows resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DefaultPreventionPolicyWindows(string name, DefaultPreventionPolicyWindowsArgs args, CustomResourceOptions? options = null)
            : base("crowdstrike:index/defaultPreventionPolicyWindows:DefaultPreventionPolicyWindows", name, args ?? new DefaultPreventionPolicyWindowsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DefaultPreventionPolicyWindows(string name, Input<string> id, DefaultPreventionPolicyWindowsState? state = null, CustomResourceOptions? options = null)
            : base("crowdstrike:index/defaultPreventionPolicyWindows:DefaultPreventionPolicyWindows", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/crowdstrike/pulumi-crowdstrike",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DefaultPreventionPolicyWindows resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DefaultPreventionPolicyWindows Get(string name, Input<string> id, DefaultPreventionPolicyWindowsState? state = null, CustomResourceOptions? options = null)
        {
            return new DefaultPreventionPolicyWindows(name, id, state, options);
        }
    }

    public sealed class DefaultPreventionPolicyWindowsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        /// </summary>
        [Input("additionalUserModeData")]
        public Input<bool>? AdditionalUserModeData { get; set; }

        /// <summary>
        /// Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
        /// </summary>
        [Input("advancedRemediation")]
        public Input<bool>? AdvancedRemediation { get; set; }

        /// <summary>
        /// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        /// </summary>
        [Input("adwareAndPup")]
        public Input<Inputs.DefaultPreventionPolicyWindowsAdwareAndPupArgs>? AdwareAndPup { get; set; }

        /// <summary>
        /// Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
        /// </summary>
        [Input("applicationExploitationActivity")]
        public Input<bool>? ApplicationExploitationActivity { get; set; }

        /// <summary>
        /// Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
        /// </summary>
        [Input("backupDeletion")]
        public Input<bool>? BackupDeletion { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
        /// </summary>
        [Input("biosDeepVisibility")]
        public Input<bool>? BiosDeepVisibility { get; set; }

        /// <summary>
        /// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        /// </summary>
        [Input("chopperWebshell")]
        public Input<bool>? ChopperWebshell { get; set; }

        /// <summary>
        /// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        /// </summary>
        [Input("cloudAntiMalware")]
        public Input<Inputs.DefaultPreventionPolicyWindowsCloudAntiMalwareArgs>? CloudAntiMalware { get; set; }

        /// <summary>
        /// Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        /// </summary>
        [Input("cloudAntiMalwareMicrosoftOfficeFiles")]
        public Input<Inputs.DefaultPreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs>? CloudAntiMalwareMicrosoftOfficeFiles { get; set; }

        /// <summary>
        /// For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
        /// </summary>
        [Input("cloudAntiMalwareUserInitiated")]
        public Input<Inputs.DefaultPreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs>? CloudAntiMalwareUserInitiated { get; set; }

        /// <summary>
        /// Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("codeInjection")]
        public Input<bool>? CodeInjection { get; set; }

        /// <summary>
        /// Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("credentialDumping")]
        public Input<bool>? CredentialDumping { get; set; }

        /// <summary>
        /// Whether to enable the setting. A process associated with Cryptowall was blocked.
        /// </summary>
        [Input("cryptowall")]
        public Input<bool>? Cryptowall { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        /// </summary>
        [Input("customBlocking")]
        public Input<bool>? CustomBlocking { get; set; }

        /// <summary>
        /// Description of the prevention policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        /// </summary>
        [Input("detectOnWrite")]
        public Input<bool>? DetectOnWrite { get; set; }

        /// <summary>
        /// Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
        /// </summary>
        [Input("driveByDownload")]
        public Input<bool>? DriveByDownload { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
        /// </summary>
        [Input("driverLoadPrevention")]
        public Input<bool>? DriverLoadPrevention { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreter_only to be enabled.
        /// </summary>
        [Input("engineFullVisibility")]
        public Input<bool>? EngineFullVisibility { get; set; }

        /// <summary>
        /// Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
        /// </summary>
        [Input("enhancedDllLoadVisibility")]
        public Input<bool>? EnhancedDllLoadVisibility { get; set; }

        /// <summary>
        /// Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
        /// </summary>
        [Input("enhancedExploitationVisibility")]
        public Input<bool>? EnhancedExploitationVisibility { get; set; }

        /// <summary>
        /// Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
        /// </summary>
        [Input("enhancedMlForLargerFiles")]
        public Input<bool>? EnhancedMlForLargerFiles { get; set; }

        /// <summary>
        /// Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        /// </summary>
        [Input("extendedUserModeData")]
        public Input<Inputs.DefaultPreventionPolicyWindowsExtendedUserModeDataArgs>? ExtendedUserModeData { get; set; }

        /// <summary>
        /// Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
        /// </summary>
        [Input("fileEncryption")]
        public Input<bool>? FileEncryption { get; set; }

        /// <summary>
        /// Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
        /// </summary>
        [Input("fileSystemAccess")]
        public Input<bool>? FileSystemAccess { get; set; }

        /// <summary>
        /// Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
        /// </summary>
        [Input("fileSystemContainment")]
        public Input<bool>? FileSystemContainment { get; set; }

        /// <summary>
        /// Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("forceAslr")]
        public Input<bool>? ForceAslr { get; set; }

        /// <summary>
        /// Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("forceDep")]
        public Input<bool>? ForceDep { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
        /// </summary>
        [Input("hardwareEnhancedExploitDetection")]
        public Input<bool>? HardwareEnhancedExploitDetection { get; set; }

        /// <summary>
        /// Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("heapSprayPreallocation")]
        public Input<bool>? HeapSprayPreallocation { get; set; }

        /// <summary>
        /// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
        /// </summary>
        [Input("httpDetections")]
        public Input<bool>? HttpDetections { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        /// </summary>
        [Input("intelligenceSourcedThreats")]
        public Input<bool>? IntelligenceSourcedThreats { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
        /// </summary>
        [Input("interpreterOnly")]
        public Input<bool>? InterpreterOnly { get; set; }

        [Input("ioaRuleGroups", required: true)]
        private InputList<string>? _ioaRuleGroups;

        /// <summary>
        /// IOA Rule Group to attach to the prevention policy.
        /// </summary>
        public InputList<string> IoaRuleGroups
        {
            get => _ioaRuleGroups ?? (_ioaRuleGroups = new InputList<string>());
            set => _ioaRuleGroups = value;
        }

        /// <summary>
        /// Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
        /// </summary>
        [Input("javascriptViaRundll32")]
        public Input<bool>? JavascriptViaRundll32 { get; set; }

        /// <summary>
        /// Whether to enable the setting. A process determined to be associated with Locky was blocked.
        /// </summary>
        [Input("locky")]
        public Input<bool>? Locky { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
        /// </summary>
        [Input("memoryScanning")]
        public Input<bool>? MemoryScanning { get; set; }

        /// <summary>
        /// Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
        /// </summary>
        [Input("memoryScanningScanWithCpu")]
        public Input<bool>? MemoryScanningScanWithCpu { get; set; }

        /// <summary>
        /// Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        /// </summary>
        [Input("microsoftOfficeFileSuspiciousMacroRemoval")]
        public Input<bool>? MicrosoftOfficeFileSuspiciousMacroRemoval { get; set; }

        /// <summary>
        /// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
        /// </summary>
        [Input("notifyEndUsers")]
        public Input<bool>? NotifyEndUsers { get; set; }

        /// <summary>
        /// Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("nullPageAllocation")]
        public Input<bool>? NullPageAllocation { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        /// </summary>
        [Input("onWriteScriptFileVisibility")]
        public Input<bool>? OnWriteScriptFileVisibility { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        /// </summary>
        [Input("preventSuspiciousProcesses")]
        public Input<bool>? PreventSuspiciousProcesses { get; set; }

        /// <summary>
        /// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
        /// </summary>
        [Input("quarantineAndSecurityCenterRegistration")]
        public Input<bool>? QuarantineAndSecurityCenterRegistration { get; set; }

        /// <summary>
        /// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
        /// </summary>
        [Input("quarantineOnRemovableMedia")]
        public Input<bool>? QuarantineOnRemovableMedia { get; set; }

        /// <summary>
        /// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        /// </summary>
        [Input("quarantineOnWrite")]
        public Input<bool>? QuarantineOnWrite { get; set; }

        /// <summary>
        /// Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
        /// </summary>
        [Input("redactHttpDetectionDetails")]
        public Input<bool>? RedactHttpDetectionDetails { get; set; }

        /// <summary>
        /// Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine &amp; Security Center Registration toggle to be enabled.
        /// </summary>
        [Input("scriptBasedExecutionMonitoring")]
        public Input<bool>? ScriptBasedExecutionMonitoring { get; set; }

        /// <summary>
        /// Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("sehOverwriteProtection")]
        public Input<bool>? SehOverwriteProtection { get; set; }

        /// <summary>
        /// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        /// </summary>
        [Input("sensorAntiMalware")]
        public Input<Inputs.DefaultPreventionPolicyWindowsSensorAntiMalwareArgs>? SensorAntiMalware { get; set; }

        /// <summary>
        /// For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
        /// </summary>
        [Input("sensorAntiMalwareUserInitiated")]
        public Input<Inputs.DefaultPreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs>? SensorAntiMalwareUserInitiated { get; set; }

        /// <summary>
        /// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        /// </summary>
        [Input("sensorTamperingProtection")]
        public Input<bool>? SensorTamperingProtection { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
        /// </summary>
        [Input("suspiciousRegistryOperations")]
        public Input<bool>? SuspiciousRegistryOperations { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
        /// </summary>
        [Input("suspiciousScriptsAndCommands")]
        public Input<bool>? SuspiciousScriptsAndCommands { get; set; }

        /// <summary>
        /// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        /// </summary>
        [Input("uploadUnknownDetectionRelatedExecutables")]
        public Input<bool>? UploadUnknownDetectionRelatedExecutables { get; set; }

        /// <summary>
        /// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        /// </summary>
        [Input("uploadUnknownExecutables")]
        public Input<bool>? UploadUnknownExecutables { get; set; }

        /// <summary>
        /// Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
        /// </summary>
        [Input("usbInsertionTriggeredScan")]
        public Input<bool>? UsbInsertionTriggeredScan { get; set; }

        /// <summary>
        /// Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
        /// </summary>
        [Input("volumeShadowCopyAudit")]
        public Input<bool>? VolumeShadowCopyAudit { get; set; }

        /// <summary>
        /// Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
        /// </summary>
        [Input("volumeShadowCopyProtect")]
        public Input<bool>? VolumeShadowCopyProtect { get; set; }

        /// <summary>
        /// Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
        /// </summary>
        [Input("vulnerableDriverProtection")]
        public Input<bool>? VulnerableDriverProtection { get; set; }

        /// <summary>
        /// Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
        /// </summary>
        [Input("windowsLogonBypassStickyKeys")]
        public Input<bool>? WindowsLogonBypassStickyKeys { get; set; }

        public DefaultPreventionPolicyWindowsArgs()
        {
        }
        public static new DefaultPreventionPolicyWindowsArgs Empty => new DefaultPreventionPolicyWindowsArgs();
    }

    public sealed class DefaultPreventionPolicyWindowsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        /// </summary>
        [Input("additionalUserModeData")]
        public Input<bool>? AdditionalUserModeData { get; set; }

        /// <summary>
        /// Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
        /// </summary>
        [Input("advancedRemediation")]
        public Input<bool>? AdvancedRemediation { get; set; }

        /// <summary>
        /// Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        /// </summary>
        [Input("adwareAndPup")]
        public Input<Inputs.DefaultPreventionPolicyWindowsAdwareAndPupGetArgs>? AdwareAndPup { get; set; }

        /// <summary>
        /// Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
        /// </summary>
        [Input("applicationExploitationActivity")]
        public Input<bool>? ApplicationExploitationActivity { get; set; }

        /// <summary>
        /// Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
        /// </summary>
        [Input("backupDeletion")]
        public Input<bool>? BackupDeletion { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
        /// </summary>
        [Input("biosDeepVisibility")]
        public Input<bool>? BiosDeepVisibility { get; set; }

        /// <summary>
        /// Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        /// </summary>
        [Input("chopperWebshell")]
        public Input<bool>? ChopperWebshell { get; set; }

        /// <summary>
        /// Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        /// </summary>
        [Input("cloudAntiMalware")]
        public Input<Inputs.DefaultPreventionPolicyWindowsCloudAntiMalwareGetArgs>? CloudAntiMalware { get; set; }

        /// <summary>
        /// Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        /// </summary>
        [Input("cloudAntiMalwareMicrosoftOfficeFiles")]
        public Input<Inputs.DefaultPreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesGetArgs>? CloudAntiMalwareMicrosoftOfficeFiles { get; set; }

        /// <summary>
        /// For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
        /// </summary>
        [Input("cloudAntiMalwareUserInitiated")]
        public Input<Inputs.DefaultPreventionPolicyWindowsCloudAntiMalwareUserInitiatedGetArgs>? CloudAntiMalwareUserInitiated { get; set; }

        /// <summary>
        /// Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("codeInjection")]
        public Input<bool>? CodeInjection { get; set; }

        /// <summary>
        /// Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("credentialDumping")]
        public Input<bool>? CredentialDumping { get; set; }

        /// <summary>
        /// Whether to enable the setting. A process associated with Cryptowall was blocked.
        /// </summary>
        [Input("cryptowall")]
        public Input<bool>? Cryptowall { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        /// </summary>
        [Input("customBlocking")]
        public Input<bool>? CustomBlocking { get; set; }

        /// <summary>
        /// Description of the prevention policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        /// </summary>
        [Input("detectOnWrite")]
        public Input<bool>? DetectOnWrite { get; set; }

        /// <summary>
        /// Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
        /// </summary>
        [Input("driveByDownload")]
        public Input<bool>? DriveByDownload { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
        /// </summary>
        [Input("driverLoadPrevention")]
        public Input<bool>? DriverLoadPrevention { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreter_only to be enabled.
        /// </summary>
        [Input("engineFullVisibility")]
        public Input<bool>? EngineFullVisibility { get; set; }

        /// <summary>
        /// Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
        /// </summary>
        [Input("enhancedDllLoadVisibility")]
        public Input<bool>? EnhancedDllLoadVisibility { get; set; }

        /// <summary>
        /// Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
        /// </summary>
        [Input("enhancedExploitationVisibility")]
        public Input<bool>? EnhancedExploitationVisibility { get; set; }

        /// <summary>
        /// Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
        /// </summary>
        [Input("enhancedMlForLargerFiles")]
        public Input<bool>? EnhancedMlForLargerFiles { get; set; }

        /// <summary>
        /// Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        /// </summary>
        [Input("extendedUserModeData")]
        public Input<Inputs.DefaultPreventionPolicyWindowsExtendedUserModeDataGetArgs>? ExtendedUserModeData { get; set; }

        /// <summary>
        /// Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
        /// </summary>
        [Input("fileEncryption")]
        public Input<bool>? FileEncryption { get; set; }

        /// <summary>
        /// Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
        /// </summary>
        [Input("fileSystemAccess")]
        public Input<bool>? FileSystemAccess { get; set; }

        /// <summary>
        /// Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
        /// </summary>
        [Input("fileSystemContainment")]
        public Input<bool>? FileSystemContainment { get; set; }

        /// <summary>
        /// Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("forceAslr")]
        public Input<bool>? ForceAslr { get; set; }

        /// <summary>
        /// Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("forceDep")]
        public Input<bool>? ForceDep { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
        /// </summary>
        [Input("hardwareEnhancedExploitDetection")]
        public Input<bool>? HardwareEnhancedExploitDetection { get; set; }

        /// <summary>
        /// Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("heapSprayPreallocation")]
        public Input<bool>? HeapSprayPreallocation { get; set; }

        /// <summary>
        /// Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
        /// </summary>
        [Input("httpDetections")]
        public Input<bool>? HttpDetections { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        /// </summary>
        [Input("intelligenceSourcedThreats")]
        public Input<bool>? IntelligenceSourcedThreats { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
        /// </summary>
        [Input("interpreterOnly")]
        public Input<bool>? InterpreterOnly { get; set; }

        [Input("ioaRuleGroups")]
        private InputList<string>? _ioaRuleGroups;

        /// <summary>
        /// IOA Rule Group to attach to the prevention policy.
        /// </summary>
        public InputList<string> IoaRuleGroups
        {
            get => _ioaRuleGroups ?? (_ioaRuleGroups = new InputList<string>());
            set => _ioaRuleGroups = value;
        }

        /// <summary>
        /// Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
        /// </summary>
        [Input("javascriptViaRundll32")]
        public Input<bool>? JavascriptViaRundll32 { get; set; }

        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        /// <summary>
        /// Whether to enable the setting. A process determined to be associated with Locky was blocked.
        /// </summary>
        [Input("locky")]
        public Input<bool>? Locky { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
        /// </summary>
        [Input("memoryScanning")]
        public Input<bool>? MemoryScanning { get; set; }

        /// <summary>
        /// Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
        /// </summary>
        [Input("memoryScanningScanWithCpu")]
        public Input<bool>? MemoryScanningScanWithCpu { get; set; }

        /// <summary>
        /// Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        /// </summary>
        [Input("microsoftOfficeFileSuspiciousMacroRemoval")]
        public Input<bool>? MicrosoftOfficeFileSuspiciousMacroRemoval { get; set; }

        /// <summary>
        /// Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
        /// </summary>
        [Input("notifyEndUsers")]
        public Input<bool>? NotifyEndUsers { get; set; }

        /// <summary>
        /// Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("nullPageAllocation")]
        public Input<bool>? NullPageAllocation { get; set; }

        /// <summary>
        /// Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        /// </summary>
        [Input("onWriteScriptFileVisibility")]
        public Input<bool>? OnWriteScriptFileVisibility { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        /// </summary>
        [Input("preventSuspiciousProcesses")]
        public Input<bool>? PreventSuspiciousProcesses { get; set; }

        /// <summary>
        /// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
        /// </summary>
        [Input("quarantineAndSecurityCenterRegistration")]
        public Input<bool>? QuarantineAndSecurityCenterRegistration { get; set; }

        /// <summary>
        /// Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
        /// </summary>
        [Input("quarantineOnRemovableMedia")]
        public Input<bool>? QuarantineOnRemovableMedia { get; set; }

        /// <summary>
        /// Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        /// </summary>
        [Input("quarantineOnWrite")]
        public Input<bool>? QuarantineOnWrite { get; set; }

        /// <summary>
        /// Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
        /// </summary>
        [Input("redactHttpDetectionDetails")]
        public Input<bool>? RedactHttpDetectionDetails { get; set; }

        /// <summary>
        /// Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine &amp; Security Center Registration toggle to be enabled.
        /// </summary>
        [Input("scriptBasedExecutionMonitoring")]
        public Input<bool>? ScriptBasedExecutionMonitoring { get; set; }

        /// <summary>
        /// Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        /// </summary>
        [Input("sehOverwriteProtection")]
        public Input<bool>? SehOverwriteProtection { get; set; }

        /// <summary>
        /// For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        /// </summary>
        [Input("sensorAntiMalware")]
        public Input<Inputs.DefaultPreventionPolicyWindowsSensorAntiMalwareGetArgs>? SensorAntiMalware { get; set; }

        /// <summary>
        /// For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
        /// </summary>
        [Input("sensorAntiMalwareUserInitiated")]
        public Input<Inputs.DefaultPreventionPolicyWindowsSensorAntiMalwareUserInitiatedGetArgs>? SensorAntiMalwareUserInitiated { get; set; }

        /// <summary>
        /// Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        /// </summary>
        [Input("sensorTamperingProtection")]
        public Input<bool>? SensorTamperingProtection { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
        /// </summary>
        [Input("suspiciousRegistryOperations")]
        public Input<bool>? SuspiciousRegistryOperations { get; set; }

        /// <summary>
        /// Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
        /// </summary>
        [Input("suspiciousScriptsAndCommands")]
        public Input<bool>? SuspiciousScriptsAndCommands { get; set; }

        /// <summary>
        /// Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        /// </summary>
        [Input("uploadUnknownDetectionRelatedExecutables")]
        public Input<bool>? UploadUnknownDetectionRelatedExecutables { get; set; }

        /// <summary>
        /// Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        /// </summary>
        [Input("uploadUnknownExecutables")]
        public Input<bool>? UploadUnknownExecutables { get; set; }

        /// <summary>
        /// Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
        /// </summary>
        [Input("usbInsertionTriggeredScan")]
        public Input<bool>? UsbInsertionTriggeredScan { get; set; }

        /// <summary>
        /// Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
        /// </summary>
        [Input("volumeShadowCopyAudit")]
        public Input<bool>? VolumeShadowCopyAudit { get; set; }

        /// <summary>
        /// Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
        /// </summary>
        [Input("volumeShadowCopyProtect")]
        public Input<bool>? VolumeShadowCopyProtect { get; set; }

        /// <summary>
        /// Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
        /// </summary>
        [Input("vulnerableDriverProtection")]
        public Input<bool>? VulnerableDriverProtection { get; set; }

        /// <summary>
        /// Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
        /// </summary>
        [Input("windowsLogonBypassStickyKeys")]
        public Input<bool>? WindowsLogonBypassStickyKeys { get; set; }

        public DefaultPreventionPolicyWindowsState()
        {
        }
        public static new DefaultPreventionPolicyWindowsState Empty => new DefaultPreventionPolicyWindowsState();
    }
}
