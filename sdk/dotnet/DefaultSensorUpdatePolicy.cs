// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CrowdStrike.Crowdstrike
{
    /// <summary>
    /// This resource allows management of the default sensor update policy in the CrowdStrike Falcon platform.
    /// 
    /// ## API Scopes
    /// 
    /// The following API scopes are required:
    /// 
    /// - Sensor update policies | Read &amp; Write
    /// 
    /// ## Import
    /// 
    /// A default sensor update policy can be imported by specifying the policy id.
    /// 
    /// ```sh
    /// $ pulumi import crowdstrike:index/defaultSensorUpdatePolicy:DefaultSensorUpdatePolicy default 7fb858a949034a0cbca175f660f1e769
    /// ```
    /// </summary>
    [CrowdstrikeResourceType("crowdstrike:index/defaultSensorUpdatePolicy:DefaultSensorUpdatePolicy")]
    public partial class DefaultSensorUpdatePolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Sensor build to use for the default sensor update policy.
        /// </summary>
        [Output("build")]
        public Output<string> Build { get; private set; } = null!;

        /// <summary>
        /// Sensor arm64 build to use for the default sensor update policy (Linux only). Required if platform_name is Linux.
        /// </summary>
        [Output("buildArm64")]
        public Output<string?> BuildArm64 { get; private set; } = null!;

        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// Chooses which default sensor update policy to manage. (Windows, Mac, Linux)
        /// </summary>
        [Output("platformName")]
        public Output<string> PlatformName { get; private set; } = null!;

        /// <summary>
        /// Prohibit sensor updates during a set of time blocks.
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.DefaultSensorUpdatePolicySchedule> Schedule { get; private set; } = null!;

        /// <summary>
        /// Enable uninstall protection. Windows and Mac only.
        /// </summary>
        [Output("uninstallProtection")]
        public Output<bool> UninstallProtection { get; private set; } = null!;


        /// <summary>
        /// Create a DefaultSensorUpdatePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DefaultSensorUpdatePolicy(string name, DefaultSensorUpdatePolicyArgs args, CustomResourceOptions? options = null)
            : base("crowdstrike:index/defaultSensorUpdatePolicy:DefaultSensorUpdatePolicy", name, args ?? new DefaultSensorUpdatePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DefaultSensorUpdatePolicy(string name, Input<string> id, DefaultSensorUpdatePolicyState? state = null, CustomResourceOptions? options = null)
            : base("crowdstrike:index/defaultSensorUpdatePolicy:DefaultSensorUpdatePolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/crowdstrike/pulumi-crowdstrike",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DefaultSensorUpdatePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DefaultSensorUpdatePolicy Get(string name, Input<string> id, DefaultSensorUpdatePolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new DefaultSensorUpdatePolicy(name, id, state, options);
        }
    }

    public sealed class DefaultSensorUpdatePolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sensor build to use for the default sensor update policy.
        /// </summary>
        [Input("build", required: true)]
        public Input<string> Build { get; set; } = null!;

        /// <summary>
        /// Sensor arm64 build to use for the default sensor update policy (Linux only). Required if platform_name is Linux.
        /// </summary>
        [Input("buildArm64")]
        public Input<string>? BuildArm64 { get; set; }

        /// <summary>
        /// Chooses which default sensor update policy to manage. (Windows, Mac, Linux)
        /// </summary>
        [Input("platformName", required: true)]
        public Input<string> PlatformName { get; set; } = null!;

        /// <summary>
        /// Prohibit sensor updates during a set of time blocks.
        /// </summary>
        [Input("schedule", required: true)]
        public Input<Inputs.DefaultSensorUpdatePolicyScheduleArgs> Schedule { get; set; } = null!;

        /// <summary>
        /// Enable uninstall protection. Windows and Mac only.
        /// </summary>
        [Input("uninstallProtection")]
        public Input<bool>? UninstallProtection { get; set; }

        public DefaultSensorUpdatePolicyArgs()
        {
        }
        public static new DefaultSensorUpdatePolicyArgs Empty => new DefaultSensorUpdatePolicyArgs();
    }

    public sealed class DefaultSensorUpdatePolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sensor build to use for the default sensor update policy.
        /// </summary>
        [Input("build")]
        public Input<string>? Build { get; set; }

        /// <summary>
        /// Sensor arm64 build to use for the default sensor update policy (Linux only). Required if platform_name is Linux.
        /// </summary>
        [Input("buildArm64")]
        public Input<string>? BuildArm64 { get; set; }

        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        /// <summary>
        /// Chooses which default sensor update policy to manage. (Windows, Mac, Linux)
        /// </summary>
        [Input("platformName")]
        public Input<string>? PlatformName { get; set; }

        /// <summary>
        /// Prohibit sensor updates during a set of time blocks.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.DefaultSensorUpdatePolicyScheduleGetArgs>? Schedule { get; set; }

        /// <summary>
        /// Enable uninstall protection. Windows and Mac only.
        /// </summary>
        [Input("uninstallProtection")]
        public Input<bool>? UninstallProtection { get; set; }

        public DefaultSensorUpdatePolicyState()
        {
        }
        public static new DefaultSensorUpdatePolicyState Empty => new DefaultSensorUpdatePolicyState();
    }
}
