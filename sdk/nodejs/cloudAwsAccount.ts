// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource allows management of an AWS account in Falcon.
 *
 * ## API Scopes
 *
 * The following API scopes are required:
 *
 * - Cloud security AWS registration | Read & Write
 * - CSPM registration | Read & Write
 *
 * ## Import
 *
 * A previously registered cloud aws account can be imported by account id.
 *
 * ```sh
 * $ pulumi import crowdstrike:index/cloudAwsAccount:CloudAwsAccount account 12345678910
 * ```
 */
export class CloudAwsAccount extends pulumi.CustomResource {
    /**
     * Get an existing CloudAwsAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudAwsAccountState, opts?: pulumi.CustomResourceOptions): CloudAwsAccount {
        return new CloudAwsAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'crowdstrike:index/cloudAwsAccount:CloudAwsAccount';

    /**
     * Returns true if the given object is an instance of CloudAwsAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudAwsAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudAwsAccount.__pulumiType;
    }

    /**
     * The AWS Account ID
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * The AWS account type. Value is 'commercial' for Commercial cloud accounts. For GovCloud environments, value can be either 'commercial' or 'gov' depending on the account type
     */
    public readonly accountType!: pulumi.Output<string>;
    public readonly assetInventory!: pulumi.Output<outputs.CloudAwsAccountAssetInventory>;
    /**
     * The name of the CloudTrail S3 bucket used for real-time visibility
     */
    public /*out*/ readonly cloudtrailBucketName!: pulumi.Output<string>;
    public readonly deploymentMethod!: pulumi.Output<string>;
    public readonly dspm!: pulumi.Output<outputs.CloudAwsAccountDspm>;
    /**
     * The ARN of the IAM role to be used by CrowdStrike Data Security Posture Management
     */
    public /*out*/ readonly dspmRoleArn!: pulumi.Output<string>;
    /**
     * The name of the IAM role to be used by CrowdStrike Data Security Posture Management
     */
    public /*out*/ readonly dspmRoleName!: pulumi.Output<string>;
    /**
     * The ARN of the Amazon EventBridge used by CrowdStrike to forward messages
     */
    public /*out*/ readonly eventbusArn!: pulumi.Output<string>;
    /**
     * The name of the Amazon EventBridge used by CrowdStrike to forward messages
     */
    public /*out*/ readonly eventbusName!: pulumi.Output<string>;
    /**
     * The external ID used to assume the AWS IAM role
     */
    public /*out*/ readonly externalId!: pulumi.Output<string>;
    /**
     * The ARN of the AWS IAM role used to access this AWS account
     */
    public /*out*/ readonly iamRoleArn!: pulumi.Output<string>;
    /**
     * The name of the AWS IAM role used to access this AWS account
     */
    public /*out*/ readonly iamRoleName!: pulumi.Output<string>;
    public readonly idp!: pulumi.Output<outputs.CloudAwsAccountIdp>;
    /**
     * The ARN of the intermediate role used to assume the AWS IAM role
     */
    public /*out*/ readonly intermediateRoleArn!: pulumi.Output<string>;
    /**
     * Indicates whether this is the management account (formerly known as the root account) of an AWS Organization
     */
    public /*out*/ readonly isOrganizationManagementAccount!: pulumi.Output<boolean>;
    /**
     * The AWS Organization ID (starts with `o-`). When specified, accounts within the organization will be registered. If `targetOus` is empty, all accounts in the organization will be registered. The `accountId` must be the organization's management account ID.
     */
    public readonly organizationId!: pulumi.Output<string>;
    public readonly realtimeVisibility!: pulumi.Output<outputs.CloudAwsAccountRealtimeVisibility>;
    public readonly sensorManagement!: pulumi.Output<outputs.CloudAwsAccountSensorManagement>;
    /**
     * The list of target Organizational Units
     */
    public readonly targetOuses!: pulumi.Output<string[]>;

    /**
     * Create a CloudAwsAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudAwsAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudAwsAccountArgs | CloudAwsAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudAwsAccountState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["accountType"] = state ? state.accountType : undefined;
            resourceInputs["assetInventory"] = state ? state.assetInventory : undefined;
            resourceInputs["cloudtrailBucketName"] = state ? state.cloudtrailBucketName : undefined;
            resourceInputs["deploymentMethod"] = state ? state.deploymentMethod : undefined;
            resourceInputs["dspm"] = state ? state.dspm : undefined;
            resourceInputs["dspmRoleArn"] = state ? state.dspmRoleArn : undefined;
            resourceInputs["dspmRoleName"] = state ? state.dspmRoleName : undefined;
            resourceInputs["eventbusArn"] = state ? state.eventbusArn : undefined;
            resourceInputs["eventbusName"] = state ? state.eventbusName : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["iamRoleArn"] = state ? state.iamRoleArn : undefined;
            resourceInputs["iamRoleName"] = state ? state.iamRoleName : undefined;
            resourceInputs["idp"] = state ? state.idp : undefined;
            resourceInputs["intermediateRoleArn"] = state ? state.intermediateRoleArn : undefined;
            resourceInputs["isOrganizationManagementAccount"] = state ? state.isOrganizationManagementAccount : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["realtimeVisibility"] = state ? state.realtimeVisibility : undefined;
            resourceInputs["sensorManagement"] = state ? state.sensorManagement : undefined;
            resourceInputs["targetOuses"] = state ? state.targetOuses : undefined;
        } else {
            const args = argsOrState as CloudAwsAccountArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["accountType"] = args ? args.accountType : undefined;
            resourceInputs["assetInventory"] = args ? args.assetInventory : undefined;
            resourceInputs["deploymentMethod"] = args ? args.deploymentMethod : undefined;
            resourceInputs["dspm"] = args ? args.dspm : undefined;
            resourceInputs["idp"] = args ? args.idp : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["realtimeVisibility"] = args ? args.realtimeVisibility : undefined;
            resourceInputs["sensorManagement"] = args ? args.sensorManagement : undefined;
            resourceInputs["targetOuses"] = args ? args.targetOuses : undefined;
            resourceInputs["cloudtrailBucketName"] = undefined /*out*/;
            resourceInputs["dspmRoleArn"] = undefined /*out*/;
            resourceInputs["dspmRoleName"] = undefined /*out*/;
            resourceInputs["eventbusArn"] = undefined /*out*/;
            resourceInputs["eventbusName"] = undefined /*out*/;
            resourceInputs["externalId"] = undefined /*out*/;
            resourceInputs["iamRoleArn"] = undefined /*out*/;
            resourceInputs["iamRoleName"] = undefined /*out*/;
            resourceInputs["intermediateRoleArn"] = undefined /*out*/;
            resourceInputs["isOrganizationManagementAccount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudAwsAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudAwsAccount resources.
 */
export interface CloudAwsAccountState {
    /**
     * The AWS Account ID
     */
    accountId?: pulumi.Input<string>;
    /**
     * The AWS account type. Value is 'commercial' for Commercial cloud accounts. For GovCloud environments, value can be either 'commercial' or 'gov' depending on the account type
     */
    accountType?: pulumi.Input<string>;
    assetInventory?: pulumi.Input<inputs.CloudAwsAccountAssetInventory>;
    /**
     * The name of the CloudTrail S3 bucket used for real-time visibility
     */
    cloudtrailBucketName?: pulumi.Input<string>;
    deploymentMethod?: pulumi.Input<string>;
    dspm?: pulumi.Input<inputs.CloudAwsAccountDspm>;
    /**
     * The ARN of the IAM role to be used by CrowdStrike Data Security Posture Management
     */
    dspmRoleArn?: pulumi.Input<string>;
    /**
     * The name of the IAM role to be used by CrowdStrike Data Security Posture Management
     */
    dspmRoleName?: pulumi.Input<string>;
    /**
     * The ARN of the Amazon EventBridge used by CrowdStrike to forward messages
     */
    eventbusArn?: pulumi.Input<string>;
    /**
     * The name of the Amazon EventBridge used by CrowdStrike to forward messages
     */
    eventbusName?: pulumi.Input<string>;
    /**
     * The external ID used to assume the AWS IAM role
     */
    externalId?: pulumi.Input<string>;
    /**
     * The ARN of the AWS IAM role used to access this AWS account
     */
    iamRoleArn?: pulumi.Input<string>;
    /**
     * The name of the AWS IAM role used to access this AWS account
     */
    iamRoleName?: pulumi.Input<string>;
    idp?: pulumi.Input<inputs.CloudAwsAccountIdp>;
    /**
     * The ARN of the intermediate role used to assume the AWS IAM role
     */
    intermediateRoleArn?: pulumi.Input<string>;
    /**
     * Indicates whether this is the management account (formerly known as the root account) of an AWS Organization
     */
    isOrganizationManagementAccount?: pulumi.Input<boolean>;
    /**
     * The AWS Organization ID (starts with `o-`). When specified, accounts within the organization will be registered. If `targetOus` is empty, all accounts in the organization will be registered. The `accountId` must be the organization's management account ID.
     */
    organizationId?: pulumi.Input<string>;
    realtimeVisibility?: pulumi.Input<inputs.CloudAwsAccountRealtimeVisibility>;
    sensorManagement?: pulumi.Input<inputs.CloudAwsAccountSensorManagement>;
    /**
     * The list of target Organizational Units
     */
    targetOuses?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CloudAwsAccount resource.
 */
export interface CloudAwsAccountArgs {
    /**
     * The AWS Account ID
     */
    accountId: pulumi.Input<string>;
    /**
     * The AWS account type. Value is 'commercial' for Commercial cloud accounts. For GovCloud environments, value can be either 'commercial' or 'gov' depending on the account type
     */
    accountType?: pulumi.Input<string>;
    assetInventory?: pulumi.Input<inputs.CloudAwsAccountAssetInventory>;
    deploymentMethod?: pulumi.Input<string>;
    dspm?: pulumi.Input<inputs.CloudAwsAccountDspm>;
    idp?: pulumi.Input<inputs.CloudAwsAccountIdp>;
    /**
     * The AWS Organization ID (starts with `o-`). When specified, accounts within the organization will be registered. If `targetOus` is empty, all accounts in the organization will be registered. The `accountId` must be the organization's management account ID.
     */
    organizationId?: pulumi.Input<string>;
    realtimeVisibility?: pulumi.Input<inputs.CloudAwsAccountRealtimeVisibility>;
    sensorManagement?: pulumi.Input<inputs.CloudAwsAccountSensorManagement>;
    /**
     * The list of target Organizational Units
     */
    targetOuses?: pulumi.Input<pulumi.Input<string>[]>;
}
