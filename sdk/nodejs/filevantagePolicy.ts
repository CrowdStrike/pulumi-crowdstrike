// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource allows management of a FileVantage policy. A FileVantage policy is a collection of file integrity rules and rule groups that you can apply to host groups.
 *
 * ## API Scopes
 *
 * The following API scopes are required:
 *
 * - Falcon FileVantage | Read & Write
 *
 * ## Import
 *
 * filvantage policy can be imported by specifying the policy id.
 *
 * ```sh
 * $ pulumi import crowdstrike:index/filevantagePolicy:FilevantagePolicy example 7fb858a949034a0cbca175f660f1e769
 * ```
 */
export class FilevantagePolicy extends pulumi.CustomResource {
    /**
     * Get an existing FilevantagePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FilevantagePolicyState, opts?: pulumi.CustomResourceOptions): FilevantagePolicy {
        return new FilevantagePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'crowdstrike:index/filevantagePolicy:FilevantagePolicy';

    /**
     * Returns true if the given object is an instance of FilevantagePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FilevantagePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FilevantagePolicy.__pulumiType;
    }

    /**
     * Description of the filevantage policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enable the filevantage policy.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Host Group ids to attach to the filevantage policy.
     */
    public readonly hostGroups!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Name of the filevantage policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Platform for the filevantage policy to manage. (Windows, Mac, Linux)
     */
    public readonly platformName!: pulumi.Output<string>;
    /**
     * Rule Group ids to attach to the filevantage policy. Precedence is based on the order of the list. Rule groups must be the same type as the policy.
     */
    public readonly ruleGroups!: pulumi.Output<string[] | undefined>;
    /**
     * Scheduled exclusions for the filevantage policy.
     */
    public readonly scheduledExclusions!: pulumi.Output<outputs.FilevantagePolicyScheduledExclusion[] | undefined>;

    /**
     * Create a FilevantagePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FilevantagePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FilevantagePolicyArgs | FilevantagePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FilevantagePolicyState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["hostGroups"] = state ? state.hostGroups : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platformName"] = state ? state.platformName : undefined;
            resourceInputs["ruleGroups"] = state ? state.ruleGroups : undefined;
            resourceInputs["scheduledExclusions"] = state ? state.scheduledExclusions : undefined;
        } else {
            const args = argsOrState as FilevantagePolicyArgs | undefined;
            if ((!args || args.platformName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'platformName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["hostGroups"] = args ? args.hostGroups : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platformName"] = args ? args.platformName : undefined;
            resourceInputs["ruleGroups"] = args ? args.ruleGroups : undefined;
            resourceInputs["scheduledExclusions"] = args ? args.scheduledExclusions : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FilevantagePolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FilevantagePolicy resources.
 */
export interface FilevantagePolicyState {
    /**
     * Description of the filevantage policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable the filevantage policy.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Host Group ids to attach to the filevantage policy.
     */
    hostGroups?: pulumi.Input<pulumi.Input<string>[]>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Name of the filevantage policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Platform for the filevantage policy to manage. (Windows, Mac, Linux)
     */
    platformName?: pulumi.Input<string>;
    /**
     * Rule Group ids to attach to the filevantage policy. Precedence is based on the order of the list. Rule groups must be the same type as the policy.
     */
    ruleGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Scheduled exclusions for the filevantage policy.
     */
    scheduledExclusions?: pulumi.Input<pulumi.Input<inputs.FilevantagePolicyScheduledExclusion>[]>;
}

/**
 * The set of arguments for constructing a FilevantagePolicy resource.
 */
export interface FilevantagePolicyArgs {
    /**
     * Description of the filevantage policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable the filevantage policy.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Host Group ids to attach to the filevantage policy.
     */
    hostGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the filevantage policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Platform for the filevantage policy to manage. (Windows, Mac, Linux)
     */
    platformName: pulumi.Input<string>;
    /**
     * Rule Group ids to attach to the filevantage policy. Precedence is based on the order of the list. Rule groups must be the same type as the policy.
     */
    ruleGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Scheduled exclusions for the filevantage policy.
     */
    scheduledExclusions?: pulumi.Input<pulumi.Input<inputs.FilevantagePolicyScheduledExclusion>[]>;
}
