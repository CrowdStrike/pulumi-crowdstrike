// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource allows you to manage CrowdStrike Falcon prevention policies for Mac hosts. Prevention policies allow you to manage what activity will trigger detections and preventions on your hosts.
 *
 * ## API Scopes
 *
 * The following API scopes are required:
 *
 * - Prevention policies | Read & Write
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as crowdstrike from "@crowdstrike/pulumi";
 *
 * const example = new crowdstrike.PreventionPolicyMac("example", {
 *     enabled: false,
 *     description: "Made with Pulumi",
 *     hostGroups: [],
 *     ioaRuleGroups: [],
 *     cloudAdwareAndPup: {
 *         detection: "MODERATE",
 *         prevention: "CAUTIOUS",
 *     },
 *     cloudAntiMalware: {
 *         detection: "MODERATE",
 *         prevention: "CAUTIOUS",
 *     },
 *     sensorAntiMalware: {
 *         detection: "MODERATE",
 *         prevention: "CAUTIOUS",
 *     },
 *     sensorAdwareAndPup: {
 *         detection: "MODERATE",
 *         prevention: "CAUTIOUS",
 *     },
 *     notifyEndUsers: true,
 *     customBlocking: true,
 *     detectOnWrite: true,
 *     intelligenceSourcedThreats: true,
 *     preventSuspiciousProcesses: true,
 *     quarantine: true,
 *     quarantineOnWrite: true,
 *     scriptBasedExecutionMonitoring: true,
 *     sensorTamperingProtection: true,
 *     uploadUnknownExecutables: true,
 *     uploadUnknownDetectionRelatedExecutables: true,
 *     xpcomShell: true,
 *     kcPasswordDecoded: true,
 *     hashCollector: true,
 *     empyreBackdoor: true,
 *     chopperWebshell: true,
 * });
 * export const preventionPolicyMac = example;
 * ```
 *
 * ## Import
 *
 * prevention policy can be imported by specifying the policy id.
 *
 * ```sh
 * $ pulumi import crowdstrike:index/preventionPolicyMac:PreventionPolicyMac example 7fb858a949034a0cbca175f660f1e769
 * ```
 */
export class PreventionPolicyMac extends pulumi.CustomResource {
    /**
     * Get an existing PreventionPolicyMac resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PreventionPolicyMacState, opts?: pulumi.CustomResourceOptions): PreventionPolicyMac {
        return new PreventionPolicyMac(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'crowdstrike:index/preventionPolicyMac:PreventionPolicyMac';

    /**
     * Returns true if the given object is an instance of PreventionPolicyMac.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PreventionPolicyMac {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PreventionPolicyMac.__pulumiType;
    }

    /**
     * Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
     */
    public readonly chopperWebshell!: pulumi.Output<boolean>;
    /**
     * Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
     */
    public readonly cloudAdwareAndPup!: pulumi.Output<outputs.PreventionPolicyMacCloudAdwareAndPup>;
    /**
     * Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
     */
    public readonly cloudAntiMalware!: pulumi.Output<outputs.PreventionPolicyMacCloudAntiMalware>;
    /**
     * Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
     */
    public readonly customBlocking!: pulumi.Output<boolean>;
    /**
     * Description of the prevention policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
     */
    public readonly detectOnWrite!: pulumi.Output<boolean>;
    /**
     * Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
     */
    public readonly empyreBackdoor!: pulumi.Output<boolean>;
    /**
     * Enable the prevention policy.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
     */
    public readonly hashCollector!: pulumi.Output<boolean>;
    /**
     * Host Group ids to attach to the prevention policy.
     */
    public readonly hostGroups!: pulumi.Output<string[]>;
    /**
     * Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
     */
    public readonly intelligenceSourcedThreats!: pulumi.Output<boolean>;
    /**
     * IOA Rule Group to attach to the prevention policy.
     */
    public readonly ioaRuleGroups!: pulumi.Output<string[]>;
    /**
     * Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
     */
    public readonly kcPasswordDecoded!: pulumi.Output<boolean>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Name of the prevention policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
     */
    public readonly notifyEndUsers!: pulumi.Output<boolean>;
    /**
     * Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
     */
    public readonly preventSuspiciousProcesses!: pulumi.Output<boolean>;
    /**
     * Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
     */
    public readonly quarantine!: pulumi.Output<boolean>;
    /**
     * Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
     */
    public readonly quarantineOnWrite!: pulumi.Output<boolean>;
    /**
     * Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
     */
    public readonly scriptBasedExecutionMonitoring!: pulumi.Output<boolean>;
    /**
     * For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
     */
    public readonly sensorAdwareAndPup!: pulumi.Output<outputs.PreventionPolicyMacSensorAdwareAndPup>;
    /**
     * For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
     */
    public readonly sensorAntiMalware!: pulumi.Output<outputs.PreventionPolicyMacSensorAntiMalware>;
    /**
     * Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
     */
    public readonly sensorTamperingProtection!: pulumi.Output<boolean>;
    /**
     * Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
     */
    public readonly uploadUnknownDetectionRelatedExecutables!: pulumi.Output<boolean>;
    /**
     * Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
     */
    public readonly uploadUnknownExecutables!: pulumi.Output<boolean>;
    /**
     * Whether to enable the setting. The execution of an XPCOM shell was blocked.
     */
    public readonly xpcomShell!: pulumi.Output<boolean>;

    /**
     * Create a PreventionPolicyMac resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PreventionPolicyMacArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PreventionPolicyMacArgs | PreventionPolicyMacState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PreventionPolicyMacState | undefined;
            resourceInputs["chopperWebshell"] = state ? state.chopperWebshell : undefined;
            resourceInputs["cloudAdwareAndPup"] = state ? state.cloudAdwareAndPup : undefined;
            resourceInputs["cloudAntiMalware"] = state ? state.cloudAntiMalware : undefined;
            resourceInputs["customBlocking"] = state ? state.customBlocking : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectOnWrite"] = state ? state.detectOnWrite : undefined;
            resourceInputs["empyreBackdoor"] = state ? state.empyreBackdoor : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["hashCollector"] = state ? state.hashCollector : undefined;
            resourceInputs["hostGroups"] = state ? state.hostGroups : undefined;
            resourceInputs["intelligenceSourcedThreats"] = state ? state.intelligenceSourcedThreats : undefined;
            resourceInputs["ioaRuleGroups"] = state ? state.ioaRuleGroups : undefined;
            resourceInputs["kcPasswordDecoded"] = state ? state.kcPasswordDecoded : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifyEndUsers"] = state ? state.notifyEndUsers : undefined;
            resourceInputs["preventSuspiciousProcesses"] = state ? state.preventSuspiciousProcesses : undefined;
            resourceInputs["quarantine"] = state ? state.quarantine : undefined;
            resourceInputs["quarantineOnWrite"] = state ? state.quarantineOnWrite : undefined;
            resourceInputs["scriptBasedExecutionMonitoring"] = state ? state.scriptBasedExecutionMonitoring : undefined;
            resourceInputs["sensorAdwareAndPup"] = state ? state.sensorAdwareAndPup : undefined;
            resourceInputs["sensorAntiMalware"] = state ? state.sensorAntiMalware : undefined;
            resourceInputs["sensorTamperingProtection"] = state ? state.sensorTamperingProtection : undefined;
            resourceInputs["uploadUnknownDetectionRelatedExecutables"] = state ? state.uploadUnknownDetectionRelatedExecutables : undefined;
            resourceInputs["uploadUnknownExecutables"] = state ? state.uploadUnknownExecutables : undefined;
            resourceInputs["xpcomShell"] = state ? state.xpcomShell : undefined;
        } else {
            const args = argsOrState as PreventionPolicyMacArgs | undefined;
            if ((!args || args.hostGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostGroups'");
            }
            if ((!args || args.ioaRuleGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ioaRuleGroups'");
            }
            resourceInputs["chopperWebshell"] = args ? args.chopperWebshell : undefined;
            resourceInputs["cloudAdwareAndPup"] = args ? args.cloudAdwareAndPup : undefined;
            resourceInputs["cloudAntiMalware"] = args ? args.cloudAntiMalware : undefined;
            resourceInputs["customBlocking"] = args ? args.customBlocking : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectOnWrite"] = args ? args.detectOnWrite : undefined;
            resourceInputs["empyreBackdoor"] = args ? args.empyreBackdoor : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["hashCollector"] = args ? args.hashCollector : undefined;
            resourceInputs["hostGroups"] = args ? args.hostGroups : undefined;
            resourceInputs["intelligenceSourcedThreats"] = args ? args.intelligenceSourcedThreats : undefined;
            resourceInputs["ioaRuleGroups"] = args ? args.ioaRuleGroups : undefined;
            resourceInputs["kcPasswordDecoded"] = args ? args.kcPasswordDecoded : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifyEndUsers"] = args ? args.notifyEndUsers : undefined;
            resourceInputs["preventSuspiciousProcesses"] = args ? args.preventSuspiciousProcesses : undefined;
            resourceInputs["quarantine"] = args ? args.quarantine : undefined;
            resourceInputs["quarantineOnWrite"] = args ? args.quarantineOnWrite : undefined;
            resourceInputs["scriptBasedExecutionMonitoring"] = args ? args.scriptBasedExecutionMonitoring : undefined;
            resourceInputs["sensorAdwareAndPup"] = args ? args.sensorAdwareAndPup : undefined;
            resourceInputs["sensorAntiMalware"] = args ? args.sensorAntiMalware : undefined;
            resourceInputs["sensorTamperingProtection"] = args ? args.sensorTamperingProtection : undefined;
            resourceInputs["uploadUnknownDetectionRelatedExecutables"] = args ? args.uploadUnknownDetectionRelatedExecutables : undefined;
            resourceInputs["uploadUnknownExecutables"] = args ? args.uploadUnknownExecutables : undefined;
            resourceInputs["xpcomShell"] = args ? args.xpcomShell : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PreventionPolicyMac.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PreventionPolicyMac resources.
 */
export interface PreventionPolicyMacState {
    /**
     * Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
     */
    chopperWebshell?: pulumi.Input<boolean>;
    /**
     * Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
     */
    cloudAdwareAndPup?: pulumi.Input<inputs.PreventionPolicyMacCloudAdwareAndPup>;
    /**
     * Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
     */
    cloudAntiMalware?: pulumi.Input<inputs.PreventionPolicyMacCloudAntiMalware>;
    /**
     * Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
     */
    customBlocking?: pulumi.Input<boolean>;
    /**
     * Description of the prevention policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
     */
    detectOnWrite?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
     */
    empyreBackdoor?: pulumi.Input<boolean>;
    /**
     * Enable the prevention policy.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
     */
    hashCollector?: pulumi.Input<boolean>;
    /**
     * Host Group ids to attach to the prevention policy.
     */
    hostGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
     */
    intelligenceSourcedThreats?: pulumi.Input<boolean>;
    /**
     * IOA Rule Group to attach to the prevention policy.
     */
    ioaRuleGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
     */
    kcPasswordDecoded?: pulumi.Input<boolean>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Name of the prevention policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
     */
    notifyEndUsers?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
     */
    preventSuspiciousProcesses?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
     */
    quarantine?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
     */
    quarantineOnWrite?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
     */
    scriptBasedExecutionMonitoring?: pulumi.Input<boolean>;
    /**
     * For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
     */
    sensorAdwareAndPup?: pulumi.Input<inputs.PreventionPolicyMacSensorAdwareAndPup>;
    /**
     * For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
     */
    sensorAntiMalware?: pulumi.Input<inputs.PreventionPolicyMacSensorAntiMalware>;
    /**
     * Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
     */
    sensorTamperingProtection?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
     */
    uploadUnknownDetectionRelatedExecutables?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
     */
    uploadUnknownExecutables?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. The execution of an XPCOM shell was blocked.
     */
    xpcomShell?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PreventionPolicyMac resource.
 */
export interface PreventionPolicyMacArgs {
    /**
     * Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
     */
    chopperWebshell?: pulumi.Input<boolean>;
    /**
     * Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
     */
    cloudAdwareAndPup?: pulumi.Input<inputs.PreventionPolicyMacCloudAdwareAndPup>;
    /**
     * Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
     */
    cloudAntiMalware?: pulumi.Input<inputs.PreventionPolicyMacCloudAntiMalware>;
    /**
     * Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
     */
    customBlocking?: pulumi.Input<boolean>;
    /**
     * Description of the prevention policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
     */
    detectOnWrite?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
     */
    empyreBackdoor?: pulumi.Input<boolean>;
    /**
     * Enable the prevention policy.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
     */
    hashCollector?: pulumi.Input<boolean>;
    /**
     * Host Group ids to attach to the prevention policy.
     */
    hostGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
     */
    intelligenceSourcedThreats?: pulumi.Input<boolean>;
    /**
     * IOA Rule Group to attach to the prevention policy.
     */
    ioaRuleGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
     */
    kcPasswordDecoded?: pulumi.Input<boolean>;
    /**
     * Name of the prevention policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
     */
    notifyEndUsers?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
     */
    preventSuspiciousProcesses?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
     */
    quarantine?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
     */
    quarantineOnWrite?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
     */
    scriptBasedExecutionMonitoring?: pulumi.Input<boolean>;
    /**
     * For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
     */
    sensorAdwareAndPup?: pulumi.Input<inputs.PreventionPolicyMacSensorAdwareAndPup>;
    /**
     * For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
     */
    sensorAntiMalware?: pulumi.Input<inputs.PreventionPolicyMacSensorAntiMalware>;
    /**
     * Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
     */
    sensorTamperingProtection?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
     */
    uploadUnknownDetectionRelatedExecutables?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
     */
    uploadUnknownExecutables?: pulumi.Input<boolean>;
    /**
     * Whether to enable the setting. The execution of an XPCOM shell was blocked.
     */
    xpcomShell?: pulumi.Input<boolean>;
}
