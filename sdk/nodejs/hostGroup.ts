// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to manage host groups in the CrowdStrike Falcon Platform.
 *
 * ## API Scopes
 *
 * The following API scopes are required:
 *
 * - Host groups | Read & Write
 * - Firewall management | Read & Write
 * - Prevention policies | Read & Write
 * - Response policies | Read & Write
 * - Sensor update policies | Read & Write
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as crowdstrike from "@crowdstrike/pulumi";
 *
 * const example = new crowdstrike.HostGroup("example", {
 *     description: "Made with Pulumi",
 *     type: "dynamic",
 *     assignmentRule: "tags:'SensorGroupingTags/cloud-lab'+os_version:'Amazon Linux 2'",
 * });
 * export const hostGroup = example;
 * ```
 *
 * ## Import
 *
 * host group can be imported by specifying the policy id.
 *
 * ```sh
 * $ pulumi import crowdstrike:index/hostGroup:HostGroup example 7fb858a949034a0cbca175f660f1e769
 * ```
 */
export class HostGroup extends pulumi.CustomResource {
    /**
     * Get an existing HostGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostGroupState, opts?: pulumi.CustomResourceOptions): HostGroup {
        return new HostGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'crowdstrike:index/hostGroup:HostGroup';

    /**
     * Returns true if the given object is an instance of HostGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HostGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HostGroup.__pulumiType;
    }

    /**
     * The assignment rule for dynamic host groups.
     */
    public readonly assignmentRule!: pulumi.Output<string>;
    /**
     * Description of the host group.
     */
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Name of the host group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The host group type, case sensitive. (dynamic, static, staticByID)
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a HostGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostGroupArgs | HostGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostGroupState | undefined;
            resourceInputs["assignmentRule"] = state ? state.assignmentRule : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as HostGroupArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["assignmentRule"] = args ? args.assignmentRule : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HostGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HostGroup resources.
 */
export interface HostGroupState {
    /**
     * The assignment rule for dynamic host groups.
     */
    assignmentRule?: pulumi.Input<string>;
    /**
     * Description of the host group.
     */
    description?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Name of the host group.
     */
    name?: pulumi.Input<string>;
    /**
     * The host group type, case sensitive. (dynamic, static, staticByID)
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HostGroup resource.
 */
export interface HostGroupArgs {
    /**
     * The assignment rule for dynamic host groups.
     */
    assignmentRule?: pulumi.Input<string>;
    /**
     * Description of the host group.
     */
    description: pulumi.Input<string>;
    /**
     * Name of the host group.
     */
    name?: pulumi.Input<string>;
    /**
     * The host group type, case sensitive. (dynamic, static, staticByID)
     */
    type: pulumi.Input<string>;
}
