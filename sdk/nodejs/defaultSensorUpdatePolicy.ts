// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource allows management of the default sensor update policy in the CrowdStrike Falcon platform.
 *
 * ## API Scopes
 *
 * The following API scopes are required:
 *
 * - Sensor update policies | Read & Write
 *
 * ## Import
 *
 * A default sensor update policy can be imported by specifying the policy id.
 *
 * ```sh
 * $ pulumi import crowdstrike:index/defaultSensorUpdatePolicy:DefaultSensorUpdatePolicy default 7fb858a949034a0cbca175f660f1e769
 * ```
 */
export class DefaultSensorUpdatePolicy extends pulumi.CustomResource {
    /**
     * Get an existing DefaultSensorUpdatePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultSensorUpdatePolicyState, opts?: pulumi.CustomResourceOptions): DefaultSensorUpdatePolicy {
        return new DefaultSensorUpdatePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'crowdstrike:index/defaultSensorUpdatePolicy:DefaultSensorUpdatePolicy';

    /**
     * Returns true if the given object is an instance of DefaultSensorUpdatePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultSensorUpdatePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultSensorUpdatePolicy.__pulumiType;
    }

    /**
     * Sensor build to use for the default sensor update policy.
     */
    public readonly build!: pulumi.Output<string>;
    /**
     * Sensor arm64 build to use for the default sensor update policy (Linux only). Required if platformName is Linux.
     */
    public readonly buildArm64!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Chooses which default sensor update policy to manage. (Windows, Mac, Linux)
     */
    public readonly platformName!: pulumi.Output<string>;
    /**
     * Prohibit sensor updates during a set of time blocks.
     */
    public readonly schedule!: pulumi.Output<outputs.DefaultSensorUpdatePolicySchedule>;
    /**
     * Enable uninstall protection. Windows and Mac only.
     */
    public readonly uninstallProtection!: pulumi.Output<boolean>;

    /**
     * Create a DefaultSensorUpdatePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultSensorUpdatePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultSensorUpdatePolicyArgs | DefaultSensorUpdatePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultSensorUpdatePolicyState | undefined;
            resourceInputs["build"] = state ? state.build : undefined;
            resourceInputs["buildArm64"] = state ? state.buildArm64 : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["platformName"] = state ? state.platformName : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["uninstallProtection"] = state ? state.uninstallProtection : undefined;
        } else {
            const args = argsOrState as DefaultSensorUpdatePolicyArgs | undefined;
            if ((!args || args.build === undefined) && !opts.urn) {
                throw new Error("Missing required property 'build'");
            }
            if ((!args || args.platformName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'platformName'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            resourceInputs["build"] = args ? args.build : undefined;
            resourceInputs["buildArm64"] = args ? args.buildArm64 : undefined;
            resourceInputs["platformName"] = args ? args.platformName : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["uninstallProtection"] = args ? args.uninstallProtection : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultSensorUpdatePolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DefaultSensorUpdatePolicy resources.
 */
export interface DefaultSensorUpdatePolicyState {
    /**
     * Sensor build to use for the default sensor update policy.
     */
    build?: pulumi.Input<string>;
    /**
     * Sensor arm64 build to use for the default sensor update policy (Linux only). Required if platformName is Linux.
     */
    buildArm64?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Chooses which default sensor update policy to manage. (Windows, Mac, Linux)
     */
    platformName?: pulumi.Input<string>;
    /**
     * Prohibit sensor updates during a set of time blocks.
     */
    schedule?: pulumi.Input<inputs.DefaultSensorUpdatePolicySchedule>;
    /**
     * Enable uninstall protection. Windows and Mac only.
     */
    uninstallProtection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DefaultSensorUpdatePolicy resource.
 */
export interface DefaultSensorUpdatePolicyArgs {
    /**
     * Sensor build to use for the default sensor update policy.
     */
    build: pulumi.Input<string>;
    /**
     * Sensor arm64 build to use for the default sensor update policy (Linux only). Required if platformName is Linux.
     */
    buildArm64?: pulumi.Input<string>;
    /**
     * Chooses which default sensor update policy to manage. (Windows, Mac, Linux)
     */
    platformName: pulumi.Input<string>;
    /**
     * Prohibit sensor updates during a set of time blocks.
     */
    schedule: pulumi.Input<inputs.DefaultSensorUpdatePolicySchedule>;
    /**
     * Enable uninstall protection. Windows and Mac only.
     */
    uninstallProtection?: pulumi.Input<boolean>;
}
